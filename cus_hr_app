######################## custom_hr_applicant ###################################

########################### init.py #############################

from openerp.modules import get_module_resource, get_module_path

import wizard
import hr_recruitment_ext
import report
import candidate_statistics
import recruiter_metrics
import controllers
#import report_metrics

#############  Controllers ###########################
    ##################3 init.py ########################

import timesheet_report_controllers
import cStringIO

export_timesheet_data=cStringIO.StringIO()
export_timesheet_filename="timesheet.xls"

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

############################# timesheet_report_controllers.py ######################


import openerp
from openerp.addons.web.controllers.main import manifest_list, module_boot, html_template
import openerp.addons.web.http as http
import logging
from openerp.addons.web.controllers.main import content_disposition
from openerp import pooler
import base64
import os
from psycopg2 import Binary

class hr_data_download(http.Controller):
   _cp_path = '/hr_data_download'

   @http.httprequest
   def download_attachment(self, req, id, db, uid, s_action=None, **kw):
        logging.info(' Inside export xls method')
        logging.info(id)
        path = req.httprequest.path[1:].split('/')
        cr = pooler.get_db(db).cursor()
        pool = pooler.get_pool(db)
             
        cr.execute('select db_datas,datas_fname from ir_attachment where id=%s',(id,)) 
        attach=cr.fetchall()
        for data in attach:
            filecontent = base64.b64decode(data[0])
            filename = data[1]
            #print "======> filecontent,", filecontent, type(filecontent)
            #print "------------>filename",type(filename)
###################################################################################################

            
            #~ fobj = open("/home/likewise-open/HTCINDIA/rajkumars/Videos/create_docs/input_file.odt", 'w')
            fobj = open("input_file.odt", 'w')
            fobj.write(filecontent)
            fobj.close()
            import platform
            if platform.system() == 'Linux':
                off = os.system('ps ax | grep "soffice" |wc -l')
                if not off == 2:
                    os.system('soffice "-accept=socket,port=2002;urp;" &')
            #~ cmd="python /home/likewise-open/HTCINDIA/rajkumars/Videos/pyodconverter-master/DocumentConverter.py  /home/likewise-open/HTCINDIA/rajkumars/Videos/create_docs/input_file.odt /home/likewise-open/HTCINDIA/rajkumars/Videos/create_docs/output_file.doc"
            cmd="python pyodconverter-master/DocumentConverter.py  input_file.odt output_file.pdf"
            os.system(cmd)

            #~ fread= open("/home/likewise-open/HTCINDIA/rajkumars/Videos/create_docs/output_file.doc", 'r')
            fread= open("output_file.pdf", 'r')
            new_cont=fread.read()
            fread.close()
            print type(new_cont),"NNNNNNLNNNLKJLKJKJJL"
            #~ conv_cont=base64.b64encode(new_cont).decode('windows-1252')
            #~ conv_cont=new_cont.decode('base64')
            #~ cr.execute('update ir_atteachment set db_datas=%s where id=%s',(conv_cont,id,))
            if new_cont and filename:
                return req.make_response(new_cont,
                    headers=[('Content-Type', 'application/octet-stream'),
                            ('Content-Disposition', content_disposition("out.pdf", req))])
####################################################################################################            
            #~ if filecontent and filename:
                #~ return req.make_response(filecontent,
                    #~ headers=[('Content-Type', 'application/octet-stream'),
                            #~ ('Content-Disposition', content_disposition(filename, req))])
        return req.not_found()


################################################ report ######################################
######################### init.py ##################################
import xls
import pdf
# import test_report
#############################33 xls ##########################################

###############################3  __init__.py #######################################3
import hr_applicant_report
import hr_applicants_list_xls
import hr_stages_info_report
import hr_stages_info_xls
##################################33 hr_applicant_list_xls.xml ##############################
<?xml version="1.0" encoding="utf-8"?>
<openerp>
  <data>

    <record id="action_hr_candidate_list_xls" model="ir.actions.report.xml">
      <field name="name">Export Selected Candidates</field>
      <field name="model">hr.candidate</field>
      <field name="type">ir.actions.report.xml</field>
      <field name="report_name">hr.candidate1.list.xls</field>
      <field name="report_type">xls</field>
      <field name="auto" eval="False"/>
    </record>

    <record model="ir.values" id="action_hr_candidate_list_xls_values">
      <field name="name">Export Selected Candidates</field>
      <field name="key2">client_action_multi</field>
      <field name="value" eval="'ir.actions.report.xml,' +str(ref('action_hr_candidate_list_xls'))" />
      <field name="model">hr.candidate</field>
    </record>   
    
  </data>
</openerp>
################################################### hr_applicant_report.py ###################################

from openerp.osv import orm
from openerp.addons.report_xls.utils import rowcol_to_cell, _render
from openerp.tools.translate import _


class hr_candidate(orm.Model):
    _inherit = 'hr.candidate'
    # override list in custom module to add/drop columns or change order
    def _report_xls_fields(self, cr, uid, context=None):
        return [
           # 'move',
           'x_candidate_id','x_first_name',
           'x_middle_name','x_last_name',
           'x_gender','x_street1','x_street2',
           'x_city','state_id','country_id',
           'x_zip_code',
           #~ 'x_nationality',
           'x_email_from','x_secondary_email',
           'x_phone','x_mobile','x_dob','x_pan',
           'x_ssn','user_id','x_sourcename',
           'x_sourcetype','x_job_id',
           'x_client_project','x_vendor_id',
           'x_exp_in_years','x_exp_in_months',
           'x_relevent_exp_in_years','x_relevent_exp_in_months',
           #~ 'x_current_employer','x_current_role',
           'x_current_salary','x_cur_salary_currency',
           'x_cur_salary_payby','x_desired_salary',
           'x_des_sal_currency','x_des_sal_payby',
           'x_passport_no','x_passport_validity',
           'x_passport_country_id','x_work_authorization',
           'x_auth_validity','x_country_id','x_relocate',
           'x_application_summary','x_status','create_date',
           
#            'x_candidate_roll_no',

           
           #'date', 'journal', 'period', 'partner', 'account',
           # 'date_maturity', 'debit', 'credit', 'balance',
           # 'reconcile', 'reconcile_partial', 'analytic_account',
            #'ref', 'partner_ref', 'tax_code', 'tax_amount', 'amount_residual',
            #'amount_currency', 'currency_name', 'company_currency',
            #'amount_residual_currency',
            #'product', 'product_ref', 'product_uom', 'quantity',
            #'statement', 'invoice', 'narration', 'blocked',
        ]

    # Change/Add Template entries
    def _report_xls_template(self, cr, uid, context=None):
        """
        Template updates, e.g.

        my_change = {
            'move':{
                'header': [1, 20, 'text', _('My Move Title')],
                'lines': [1, 0, 'text', _render("line.name or ''")],
                'totals': [1, 0, 'text', None]},
        }
        return my_change
        """
        return {}
#########################################3  hr_applicants_list_xls.py #####################################

import xlwt
import time
from datetime import datetime
from openerp.osv import orm
from openerp.report import report_sxw
from openerp.addons.report_xls.report_xls import report_xls
from openerp.addons.report_xls.utils import rowcol_to_cell, _render
from openerp.tools.translate import translate, _
from openerp import pooler
import logging
_logger = logging.getLogger(__name__)

_ir_translation_name = 'hr.candidate.list.xls'


class hr_candidate_xls_parser(report_sxw.rml_parse):

    def __init__(self, cr, uid, name, context):
        super(hr_candidate_xls_parser, self).__init__(cr, uid, name, context=context)
        move_obj = self.pool.get('hr.candidate')
        self.context = context
        wanted_list = move_obj._report_xls_fields(cr, uid, context)
        template_changes = move_obj._report_xls_template(cr, uid, context)
        self.localcontext.update({
            'datetime': datetime,
            'wanted_list': wanted_list,
            'template_changes': template_changes,
            '_': self._,
        })

    def _(self, src):
        lang = self.context.get('lang', 'en_US')
        return translate(self.cr, _ir_translation_name, 'report', lang, src) or src


class move_line_xls(report_xls):

    def __init__(self, name, table, rml=False, parser=False, header=True, store=False):
        super(move_line_xls, self).__init__(name, table, rml, parser, header, store)

        # Cell Styles
        _xs = self.xls_styles
        # header
        rh_cell_format = _xs['bold'] + _xs['fill'] + _xs['borders_all']
        self.rh_cell_style = xlwt.easyxf(rh_cell_format)
        self.rh_cell_style_center = xlwt.easyxf(rh_cell_format + _xs['center'])
        self.rh_cell_style_right = xlwt.easyxf(rh_cell_format + _xs['right'])
        # lines
        aml_cell_format = _xs['borders_all']
        self.aml_cell_style = xlwt.easyxf(aml_cell_format)
        self.aml_cell_style_center = xlwt.easyxf(aml_cell_format + _xs['center'])
        self.aml_cell_style_date = xlwt.easyxf(aml_cell_format + _xs['left'], num_format_str=report_xls.date_format)
        self.aml_cell_style_decimal = xlwt.easyxf(aml_cell_format + _xs['right'], num_format_str=report_xls.decimal_format)
        # totals
        rt_cell_format = _xs['bold'] + _xs['fill'] + _xs['borders_all']
        self.rt_cell_style = xlwt.easyxf(rt_cell_format)
        self.rt_cell_style_right = xlwt.easyxf(rt_cell_format + _xs['right'])
        self.rt_cell_style_decimal = xlwt.easyxf(rt_cell_format + _xs['right'], num_format_str=report_xls.decimal_format)

        # XLS Template
        self.col_specs_template = {
                                   
            'x_candidate_id': {
                'header': [1, 42, 'text', _render("_('Candidate ID')")],
                'lines': [1, 0, 'text', _render("line.x_candidate_id or ''")],
                'totals': [1, 0, 'text', None]},
                                  
            'x_first_name': {
                'header': [1, 42, 'text', _render("_('First Name')")],
                'lines': [1, 0, 'text', _render("line.x_first_name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_middle_name': {
                'header': [1, 42, 'text', _render("_('Middle Name')")],
                'lines': [1, 0, 'text', _render("line.x_middle_name or ''")],
                'totals': [1, 0, 'text', None]},
                    
            'x_last_name': {
                'header': [1, 42, 'text', _render("_('Last Name')")],
                'lines': [1, 0, 'text', _render("line.x_last_name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_gender': {
                'header': [1, 42, 'text', _render("_('Gender')")],
                'lines': [1, 0, 'text', _render("line.x_gender or ''")],
                'totals': [1, 0, 'text', None]},
             
                  
            'x_dob': {
                'header': [1, 42, 'text', _render("_('Date Of Birth')")],
                'lines': [1, 0, 'text', _render("str(line.x_dob) or ''")],
                'totals': [1, 0, 'text', None]},
                                   
                 
            'x_pan': {
                'header': [1, 42, 'text', _render("_('PAN')")],
                'lines': [1, 0, 'text', _render("line.x_pan or ''")],
                'totals': [1, 0, 'text', None]},                      
            
                 
            'x_ssn': {
                'header': [1, 42, 'text', _render("_('SSN')")],
                'lines': [1, 0, 'text', _render("line.x_ssn or ''")],
                'totals': [1, 0, 'text', None]},
            
                 
            'user_id': {
                'header': [1, 42, 'text', _render("_('Recruiter')")],
                'lines': [1, 0, 'text', _render("line.user_id.name or ''")],
                'totals': [1, 0, 'text', None]},
                                                          
            'x_city': {
                'header': [1, 42, 'text', _render("_('City')")],
                'lines': [1, 0, 'text', _render("line.x_city or ''")],
                'totals': [1, 0, 'text', None]},
             
            'country_id': {
                'header': [1, 42, 'text', _render("_('Country')")],
                'lines': [1, 0, 'text', _render("line.country_id.name or ''")],
                'totals': [1, 0, 'text', None]},
                                    
            'x_email_from': {
                'header': [1, 42, 'text', _render("_('Email')")],
                'lines': [1, 0, 'text', _render("line.x_email_from or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_phone': {
                'header': [1, 42, 'text', _render("_('Phone')")],
                'lines': [1, 0, 'text', _render("line.x_phone or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_mobile': {
                'header': [1, 42, 'text', _render("_('Mobile')")],
                'lines': [1, 0, 'text', _render("line.x_mobile or ''")],
                'totals': [1, 0, 'text', None]},
                                    
             
            'x_job_id': {
                'header': [1, 42, 'text', _render("_('Job Applied')")],
                'lines': [1, 0, 'text', _render("line.x_job_id.name or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_exp_in_years': {
                'header': [1, 42, 'text', _render("_('Experience in Years')")],
                'lines': [1, 0, 'text', _render("str(line.x_exp_in_years) or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_application_summary': {
                'header': [1, 42, 'text', _render("_('Application Summary')")],
                'lines': [1, 0, 'text', _render("line.x_application_summary or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_current_employer': {
                'header': [1, 42, 'text', _render("_('Last Employeed')")],
                'lines': [1, 0, 'text', _render("line.x_current_employer or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_sourcename': {
                'header': [1, 42, 'text', _render("_('Source Name')")],
                'lines': [1, 0, 'text', _render("line.x_sourcename.name or ''")],
                'totals': [1, 0, 'text', None]},
                                
            'x_sourcetype': {
                'header': [1, 42, 'text', _render("_('Source Type')")],
                'lines': [1, 0, 'text', _render("line.x_sourcetype.name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_application_summary': {
                'header': [1, 42, 'text', _render("_('Summary')")],
                'lines': [1, 0, 'text', _render("line.x_application_summary or ''")],
                'totals': [1, 0, 'text', None]},   
                                   
                        
            'x_street1': {
                            'header': [1, 42, 'text', _render("_('Street1')")],
                            'lines': [1, 0, 'text', _render("line.x_street1 or ''")],
                            'totals': [1, 0, 'text', None]},    
            'x_street2': {
                            'header': [1, 42, 'text', _render("_('Street2')")],
                            'lines': [1, 0, 'text', _render("line.x_street2 or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'state_id': {
                            'header': [1, 42, 'text', _render("_('State')")],
                            'lines': [1, 0, 'text', _render("line.state_id.name or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_zip_code': {
                            'header': [1, 42, 'text', _render("_('Zip Code')")],
                            'lines': [1, 0, 'text', _render("line.x_zip_code or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_nationality': {
                            'header': [1, 42, 'text', _render("_('Nationality')")],
                            'lines': [1, 0, 'text', _render("line.x_nationality.name or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_secondary_email': {
                            'header': [1, 42, 'text', _render("_('Secondary Email')")],
                            'lines': [1, 0, 'text', _render("line.x_secondary_email or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_client_project': {
                            'header': [1, 42, 'text', _render("_('Client Project')")],
                            'lines': [1, 0, 'text', _render("line.x_client_project or ''")],
                            'totals': [1, 0, 'text', None]},    
            'x_vendor_id': {
                            'header': [1, 42, 'text', _render("_('Vendor')")],
                            'lines': [1, 0, 'text', _render("line.x_vendor_id.name or ''")],
                            'totals': [1, 0, 'text', None]},   
            
            'x_current_employer': {
                            'header': [1, 42, 'text', _render("_('Total Exp in Years')")],
                            'lines': [1, 0, 'text', _render("line.x_exp_in_years or ''")],
                            'totals': [1, 0, 'text', None]},    
            'x_exp_in_months': {
                            'header': [1, 42, 'text', _render("_('Total Exp in Months')")],
                            'lines': [1, 0, 'text', _render("str(line.x_exp_in_months) or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_relevent_exp_in_years': {
                            'header': [1, 42, 'text', _render("_('Rel Exp in Years')")],
                            'lines': [1, 0, 'text', _render("str(line.x_relevent_exp_in_years) or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_current_employer': {
                            'header': [1, 42, 'text', _render("_('Current Employer')")],
                            'lines': [1, 0, 'text', _render("line.x_current_employer or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_current_role': {
                            'header': [1, 42, 'text', _render("_('Current Role')")],
                            'lines': [1, 0, 'text', _render("line.x_current_role or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_cur_salary_currency': {
                            'header': [1, 42, 'text', _render("_('Cur Salary Currency')")],
                            'lines': [1, 0, 'text', _render("line.x_cur_salary_currency or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_cur_salary_payby': {
                            'header': [1, 42, 'text', _render("_('Cur Salary Payby')")],
                            'lines': [1, 0, 'text', _render("line.x_cur_salary_payby or ''")],
                            'totals': [1, 0, 'text', None]},    
            'x_des_sal_currency': {
                            'header': [1, 42, 'text', _render("_('Des Sal Currency')")],
                            'lines': [1, 0, 'text', _render("line.x_des_sal_currency or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_des_sal_payby': {
                            'header': [1, 42, 'text', _render("_('Des Sal Payby')")],
                            'lines': [1, 0, 'text', _render("line.x_des_sal_payby or ''")],
                            'totals': [1, 0, 'text', None]},  
            
            'x_passport_no': {
                            'header': [1, 42, 'text', _render("_('Passport No')")],
                            'lines': [1, 0, 'text', _render("line.x_passport_no or ''")],
                            'totals': [1, 0, 'text', None]},    
            'x_passport_validity': {
                            'header': [1, 42, 'text', _render("_('Passport Validity')")],
                            'lines': [1, 0, 'text', _render("str(line.x_passport_validity) or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_work_authorization': {
                            'header': [1, 42, 'text', _render("_('Work Authorization')")],
                            'lines': [1, 0, 'text', _render("line.x_work_authorization or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_auth_validity': {
                            'header': [1, 42, 'text', _render("_('Auth Validity')")],
                            'lines': [1, 0, 'text', _render("str(line.x_auth_validity) or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_country_id': {
                            'header': [1, 42, 'text', _render("_('Auth Validity Country')")],
                            'lines': [1, 0, 'text', _render("line.x_country_id.name or ''")],
                            'totals': [1, 0, 'text', None]},    
            
            'x_relocate': {
                            'header': [1, 42, 'text', _render("_('Relocate')")],
                            'lines': [1, 0, 'text', _render("line.x_relocate or ''")],
                            'totals': [1, 0, 'text', None]},
                                   
            'x_status': {
                            'header': [1, 42, 'text', _render("_('Status')")],
                            'lines': [1, 0, 'text', _render("line.x_status or ''")],
                            'totals': [1, 0, 'text', None]},        
             
             'x_relevent_exp_in_months': {
                            'header': [1, 42, 'text', _render("_('Relevent Exp In Months')")],
                            'lines': [1, 0, 'text', _render("str(line.x_relevent_exp_in_months) or ''")],
                            'totals': [1, 0, 'text', None]}, 
                                   
            'x_desired_salary': {
                            'header': [1, 42, 'text', _render("_('Desired Salary')")],
                            'lines': [1, 0, 'text', _render("str(line.x_desired_salary) or ''")],
                            'totals': [1, 0, 'text', None]},    
                                   
            'x_current_salary': {
                            'header': [1, 42, 'text', _render("_('Current Salary')")],
                            'lines': [1, 0, 'text', _render("str(line.x_current_salary) or ''")],
                            'totals': [1, 0, 'text', None]},    
                                   
            'x_passport_country_id': {
                            'header': [1, 42, 'text', _render("_('Country')")],
                            'lines': [1, 0, 'text', _render("line.x_passport_country_id.name or ''")],
                            'totals': [1, 0, 'text', None]},   
            
            'create_date': {
                            'header': [1, 42, 'text', _render("_('Create Date')")],
                            'lines': [1, 0, 'text', _render("str(line.create_date) or ''")],
                            'totals': [1, 0, 'text', None]},
            }

    def generate_xls_report(self, _p, _xs, data, objects, wb):

        wanted_list = _p.wanted_list
        self.col_specs_template.update(_p.template_changes)
        _ = _p._

        

        #report_name = objects[0]._description or objects[0]._name
        report_name = _("HR Candidates")
        ws = wb.add_sheet(report_name[:31])
        ws.panes_frozen = True
        ws.remove_splits = True
        ws.portrait = 0  # Landscape
        ws.fit_width_to_pages = 1
        row_pos = 0

        # set print header/footer
        ws.header_str = self.xls_headers['standard']
        ws.footer_str = self.xls_footers['standard']

        # Title
        cell_style = xlwt.easyxf(_xs['xls_title'])
        c_specs = [
            ('report_name', 1, 0, 'text', report_name),
        ]
        row_data = self.xls_row_template(c_specs, ['report_name'])
        row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=cell_style)
        row_pos += 1

        # Column headers
        c_specs = map(lambda x: self.render(x, self.col_specs_template, 'header', render_space={'_': _p._}), wanted_list)
        row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
        row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.rh_cell_style, set_column_size=True)
        ws.set_horz_split_pos(row_pos)

        # account move lines
        for line in objects:
            #debit_cell = rowcol_to_cell(row_pos, debit_pos)
            #credit_cell = rowcol_to_cell(row_pos, credit_pos)
            #bal_formula = debit_cell + '-' + credit_cell
            c_specs = map(lambda x: self.render(x, self.col_specs_template, 'lines'), wanted_list)
            row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
            row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.aml_cell_style)

        #row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
        #row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.rt_cell_style_right)

move_line_xls('report.hr.candidate1.list.xls',
    'hr.candidate',
    parser=hr_candidate_xls_parser)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

########################################## hr_stages_info_report.py #############################################

from openerp.osv import orm
from openerp.addons.report_xls.utils import rowcol_to_cell, _render
from openerp.tools.translate import _


class hr_applicant(orm.Model):
    _inherit = 'hr.applicant'
    # override list in custom module to add/drop columns or change order
    def _report_xls_fields(self, cr, uid, context=None):
        return [
           # 'move',
           'x_candidate_id','job_id',
           'x_job','x_job_title',
           'x_first_name','x_last_name',
           'x_candidate_roll_no',
           'x_cli_id','x_cli_req',
            'x_candidate_identified_date',
            'x_candidate_identified_by',
            'x_candidate_identified_comments',
#             'x_initial_screening_date',
            'x_communication_rating',
            'x_comments',
            'x_initialscreen_created_by',
            'x_tcmg_manager_date','x_tcmg_created_by',
            'x_tcmg_comments',
            'x_submit_to_client_date','x_client_created_by',
            'x_client_comments',
            'x_interview_date','x_interview_created_by',
            'x_interview_comments',
              
             'x_hire_candidate_report','x_hire_employee_id',
             'x_hire_start_date','x_hire_created_by',
             'x_hire_comments',
             'x_stage_status','x_stages_status_report', 
             #~ 'x_app_stages','x_view_status',
            
           

           
         
           
           #'date', 'journal', 'period', 'partner', 'account',
           # 'date_maturity', 'debit', 'credit', 'balance',
           # 'reconcile', 'reconcile_partial', 'analytic_account',
            #'ref', 'partner_ref', 'tax_code', 'tax_amount', 'amount_residual',
            #'amount_currency', 'currency_name', 'company_currency',
            #'amount_residual_currency',
            #'product', 'product_ref', 'product_uom', 'quantity',
            #'statement', 'invoice', 'narration', 'blocked',
        ]

    # Change/Add Template entries
    def _report_xls_template(self, cr, uid, context=None):
        """
        Template updates, e.g.

        my_change = {
            'move':{
                'header': [1, 20, 'text', _('My Move Title')],
                'lines': [1, 0, 'text', _render("line.name or ''")],
                'totals': [1, 0, 'text', None]},
        }
        return my_change
        """
        return {}
################################################# hr_stages_info_xls.py ###############################3


import xlwt
import time
from datetime import datetime
from openerp.osv import orm
from openerp.report import report_sxw
from openerp.addons.report_xls.report_xls import report_xls
from openerp.addons.report_xls.utils import rowcol_to_cell, _render
from openerp.tools.translate import translate, _
from openerp import pooler
import logging
_logger = logging.getLogger(__name__)

_ir_translation_name = 'hr.applicant.list.xls'


class hr_applicant_xls_parser(report_sxw.rml_parse):

    def __init__(self, cr, uid, name, context):
        super(hr_applicant_xls_parser, self).__init__(cr, uid, name, context=context)
        move_obj = self.pool.get('hr.applicant')
        self.context = context
        wanted_list = move_obj._report_xls_fields(cr, uid, context)
        template_changes = move_obj._report_xls_template(cr, uid, context)
        self.localcontext.update({
            'datetime': datetime,
            'wanted_list': wanted_list,
            'template_changes': template_changes,
            '_': self._,
        })

    def _(self, src):
        lang = self.context.get('lang', 'en_US')
        return translate(self.cr, _ir_translation_name, 'report', lang, src) or src


class move_line_xls(report_xls):

    def __init__(self, name, table, rml=False, parser=False, header=True, store=False):
        super(move_line_xls, self).__init__(name, table, rml, parser, header, store)

        # Cell Styles
        _xs = self.xls_styles
        # header
        rh_cell_format = _xs['bold'] + _xs['fill'] + _xs['borders_all']
        self.rh_cell_style = xlwt.easyxf(rh_cell_format)
        self.rh_cell_style_center = xlwt.easyxf(rh_cell_format + _xs['center'])
        self.rh_cell_style_right = xlwt.easyxf(rh_cell_format + _xs['right'])
        # lines
        aml_cell_format = _xs['borders_all']
        self.aml_cell_style = xlwt.easyxf(aml_cell_format)
        self.aml_cell_style_center = xlwt.easyxf(aml_cell_format + _xs['center'])
        self.aml_cell_style_date = xlwt.easyxf(aml_cell_format + _xs['left'], num_format_str=report_xls.date_format)
        self.aml_cell_style_decimal = xlwt.easyxf(aml_cell_format + _xs['right'], num_format_str=report_xls.decimal_format)
        # totals
        rt_cell_format = _xs['bold'] + _xs['fill'] + _xs['borders_all'] 
        self.rt_cell_style = xlwt.easyxf(rt_cell_format)
        self.rt_cell_style_right = xlwt.easyxf(rt_cell_format + _xs['right'])
        self.rt_cell_style_decimal = xlwt.easyxf(rt_cell_format + _xs['right'], num_format_str=report_xls.decimal_format)

        # XLS Template
        self.col_specs_template = {
                                   
            'x_candidate_id': {
                'header': [1, 42, 'text', _render("_('Candidate ID')")],
                'lines': [1, 0, 'text', _render("line.x_candidate_id.x_candidate_id or ''")],
                'totals': [1, 0, 'text', None]},
            
            'job_id': {
                'header': [1, 42, 'text', _render("_('Applied Job')")],
                'lines': [1, 0, 'text', _render("line.job_id.name or ''")],
                'totals': [1, 0, 'text', None]},
                                  
            'name': {
                'header': [1, 42, 'text', _render("_('Name')")],
                'lines': [1, 0, 'text', _render("line.name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_initial_screening_date': {
                'header': [1, 42, 'text', _render("_('Initial Screening Date')")],
                'lines': [1, 0, 'text', _render("str(line.x_initial_screening_date) or ''")],
                'totals': [1, 0, 'text', None]},
                    
            'x_communication_rating': {
                'header': [1, 42, 'text', _render("_('Initial Screening Communication Rating')")],
                'lines': [1, 0, 'text', _render("line.x_communication_rating or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_comments': {
                'header': [1, 42, 'text', _render("_('Initial Screening Comments')")],
                'lines': [1, 0, 'text', _render("line.x_comments or ''")],
                'totals': [1, 0, 'text', None]},
             
                  
            'x_initialscreen_created_by': {
                'header': [1, 42, 'text', _render("_('Initial Screening Created by')")],
                'lines': [1, 0, 'text', _render("line.x_initialscreen_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
                 
            'x_tcmg_manager_date': {
                'header': [1, 42, 'text', _render("_('TCMG Manager Date')")],
                'lines': [1, 0, 'text', _render("line.x_tcmg_manager_date or ''")],
                'totals': [1, 0, 'text', None]},                      
            
                 
            'x_tcmg_created_by': {
                'header': [1, 42, 'text', _render("_('TCMG Created By')")],
                'lines': [1, 0, 'text', _render("line.x_tcmg_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},
            
                 
            'x_tcmg_comments': {
                'header': [1, 42, 'text', _render("_('TCMG Comments')")],
                'lines': [1, 0, 'text', _render("line.x_tcmg_comments or ''")],
                'totals': [1, 0, 'text', None]},
                                                          
            'x_submit_to_client_date': {
                'header': [1, 42, 'text', _render("_('Submit To Client Date')")],
                'lines': [1, 0, 'text', _render("line.x_submit_to_client_date or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_client_created_by': {
                'header': [1, 42, 'text', _render("_('Client Created By')")],
                'lines': [1, 0, 'text', _render("line.x_client_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},
                                    
            'x_client_comments': {
                'header': [1, 42, 'text', _render("_('Client Comments')")],
                'lines': [1, 0, 'text', _render("line.x_client_comments or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_interview_date': {
                'header': [1, 42, 'text', _render("_('Interview Date')")],
                'lines': [1, 0, 'text', _render("line.x_interview_date or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_interview_created_by': {
                'header': [1, 42, 'text', _render("_('Interview Created By')")],
                'lines': [1, 0, 'text', _render("line.x_interview_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},
            
            'x_interview_comments': {
                'header': [1, 42, 'text', _render("_('Interview Status Comments')")],
                'lines': [1, 0, 'text', _render("line.x_interview_comments or ''")],
                'totals': [1, 0, 'text', None]},                        
             
            'x_offer_recruiter': {
                'header': [1, 42, 'text', _render("_('Recruiter')")],
                'lines': [1, 0, 'text', _render("line.x_offer_recruiter.name or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_Offer_status_date': {
                'header': [1, 42, 'text', _render("_('Offer Status Date')")],
                'lines': [1, 0, 'text', _render("line.x_Offer_status_date or ''")],
                'totals': [1, 0, 'text', None]},
             
            'x_off_offer_date': {
                'header': [1, 42, 'text', _render("_('Offer Created On')")],
                'lines': [1, 0, 'text', _render("line.x_off_offer_date or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_offer_created_by': {
                'header': [1, 42, 'text', _render("_('Offer Created By')")],
                'lines': [1, 0, 'text', _render("line.x_offer_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_offer_comments': {
                'header': [1, 42, 'text', _render("_('Offer Status Comments')")],
                'lines': [1, 0, 'text', _render("line.x_offer_comments or ''")],
                'totals': [1, 0, 'text', None]},
                                
            'x_hire_candidate_report': {
                'header': [1, 42, 'text', _render("_('Candidate Reported')")],
                'lines': [1, 0, 'text', _render("line.x_hire_candidate_report or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_hire_employee_id': {
                'header': [1, 42, 'text', _render("_('Emp ID')")],
                'lines': [1, 0, 'text', _render("line.x_hire_employee_id or ''")],
                'totals': [1, 0, 'text', None]},                      
                                   
            'x_hire_start_date': {
                'header': [1, 42, 'text', _render("_('Start Date')")],
                'lines': [1, 0, 'text', _render("line.x_hire_start_date or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_hire_created_by': {
                'header': [1, 42, 'text', _render("_('Hire Status Created By')")],
                'lines': [1, 0, 'text', _render("line.x_hire_created_by.name or ''")],
                'totals': [1, 0, 'text', None]},                      
                                   
            'x_hire_comments': {
                'header': [1, 42, 'text', _render("_('Hire Comments')")],
                'lines': [1, 0, 'text', _render("line.x_hire_comments or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_application_summary': {
                'header': [1, 42, 'text', _render("_('Summary')")],
                'lines': [1, 0, 'text', _render("line.x_application_summary or ''")],
                'totals': [1, 0, 'text', None]},                                             
            
            
             'x_stage_status': {
                'header': [1, 42, 'text', _render("_('Stage Status')")],
                'lines': [1, 0, 'text', _render("line.x_stage_status or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            #~ 'x_app_stages': {
                #~ 'header': [1, 42, 'text', _render("_('x_app_stages')")],
                #~ 'lines': [1, 0, 'text', _render("str(line.x_app_stages) or ''")],
                #~ 'totals': [1, 0, 'text', None]},                      
                                   #~ 
            #~ 'x_view_status': {
                #~ 'header': [1, 42, 'text', _render("_('x_view_status')")],
                #~ 'lines': [1, 0, 'text', _render("str(line.x_view_status) or ''")],
                #~ 'totals': [1, 0, 'text', None]},
                                   
            'x_stages_status_report': {
                'header': [1, 42, 'text', _render("_('Stages Status Report')")],
                'lines': [1, 0, 'text', _render("line.x_stages_status_report or ''")],
                'totals': [1, 0, 'text', None]},                       
            
            
            #*****************************************************#
            
            
            'x_job': {
                'header': [1, 42, 'text', _render("_('HTC Job ID')")],
                'lines': [1, 0, 'text', _render("line.x_job or ''")],
                'totals': [1, 0, 'text', None]},                      
                                   
            'x_job_title': {
                'header': [1, 42, 'text', _render("_('HTC Job Title')")],
                'lines': [1, 0, 'text', _render("line.x_job_title or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_first_name': {
                'header': [1, 42, 'text', _render("_('First Name')")],
                'lines': [1, 0, 'text', _render("line.x_first_name or ''")],
                'totals': [1, 0, 'text', None]},                                             
            
             'x_last_name': {
                'header': [1, 42, 'text', _render("_('Last Name')")],
                'lines': [1, 0, 'text', _render("line.x_last_name or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_candidate_roll_no': {
                'header': [1, 42, 'text', _render("_('Candidate Roll No')")],
                'lines': [1, 0, 'text', _render("str(line.x_candidate_roll_no) or ''")],
                'totals': [1, 0, 'text', None]},                      
                                   
            'x_candidate_identified_date': {
                'header': [1, 42, 'text', _render("_('Candidate Identified Date')")],
                'lines': [1, 0, 'text', _render("str(line.x_candidate_identified_date) or ''")],
                'totals': [1, 0, 'text', None]},
                                   
            'x_candidate_identified_by': {
                'header': [1, 42, 'text', _render("_('Candidate Identified By')")],
                'lines': [1, 0, 'text', _render("line.x_candidate_identified_by.name or ''")],
                'totals': [1, 0, 'text', None]},                       
                                                      
            'x_candidate_identified_comments': {
                'header': [1, 42, 'text', _render("_('Candidate Identified Comments')")],
                'lines': [1, 0, 'text', _render("line.x_candidate_identified_comments or ''")],
                'totals': [1, 0, 'text', None]},                       
                                   

            'x_cli_id': {
                            'header': [1, 42, 'text', _render("_('Client')")],
                            'lines': [1, 0, 'text', _render("line.x_cli_id.name or ''")],
                            'totals': [1, 0, 'text', None]},   

            'x_cli_req':{
                            'header': [1, 42, 'text', _render("_('Client Req Id')")],
                            'lines': [1, 0, 'text', _render("line.x_cli_req or ''")],
                            'totals': [1, 0, 'text', None]},               
            
            
                                                           
                                   
            }

    def generate_xls_report(self, _p, _xs, data, objects, wb):

        wanted_list = _p.wanted_list
        self.col_specs_template.update(_p.template_changes)
        _ = _p._

        

        #report_name = objects[0]._description or objects[0]._name
        report_name = _("HR Applicant")
        ws = wb.add_sheet(report_name[:31])
        ws.panes_frozen = True
        ws.remove_splits = True
        ws.portrait = 0  # Landscape
        ws.fit_width_to_pages = 1
        row_pos = 0

        # set print header/footer
        ws.header_str = self.xls_headers['standard']
        ws.footer_str = self.xls_footers['standard']

        # Title
        cell_style = xlwt.easyxf(_xs['xls_title'])
        c_specs = [
            ('report_name', 1, 0, 'text', report_name),
        ]
        row_data = self.xls_row_template(c_specs, ['report_name'])
        row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=cell_style)
        row_pos += 1

        # Column headers
        c_specs = map(lambda x: self.render(x, self.col_specs_template, 'header', render_space={'_': _p._}), wanted_list)
        row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
        row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.rh_cell_style, set_column_size=True)
        ws.set_horz_split_pos(row_pos)

        # account move lines
        for line in objects:
            #debit_cell = rowcol_to_cell(row_pos, debit_pos)
            #credit_cell = rowcol_to_cell(row_pos, credit_pos)
            #bal_formula = debit_cell + '-' + credit_cell
            c_specs = map(lambda x: self.render(x, self.col_specs_template, 'lines'), wanted_list)
            row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
            row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.aml_cell_style)

        #row_data = self.xls_row_template(c_specs, [x[0] for x in c_specs])
        #row_pos = self.xls_write_row(ws, row_pos, row_data, row_style=self.rt_cell_style_right)

move_line_xls('report.hr.applicant1.list.xls',
    'hr.applicant',
    parser=hr_applicant_xls_parser)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:


################################# security ##############################
################################## candidate_security.xml ###################################3
<?xml version="1.0" encoding="utf-8"?>
<openerp>
<data noupdate="0">

    <record id="base.group_us_user" model="res.groups">
        <field name="name">US User</field>
        <field name="comment">Candidate Profile menu for US users</field>
    </record>

    <record id="base.group_row_user" model="res.groups">
        <field name="name">ROW User</field>
        <field name="comment">Candidate Profile menu for ROW users</field>
    </record>


    <record id="base.group_top_management" model="res.groups">
        <field name="name">Top Management Report</field>
        <field name="comment">To view all the report from Top Management Perspective</field>
    </record>

    <record id="base.group_employee_management" model="res.groups">
        <field name="name">Employee Level Report</field>
        <field name="comment">To view all the report from Employee Perspective</field>
    </record>



</data>
</openerp>
######################################333 crm_meeting_security.xml ##############################
<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data noupdate="0">

        <record id="base.group_hr_attendances" model="res.groups">
            <field name="name">crm meeting</field>
            <field name="category_id" ref="base.module_category_hidden"/>
        </record>

        <record id="crm_meeting_rights_security" model="ir.rule">
            <field name="name">crm only</field>
            <field model="ir.model" name="model_id" ref="model_crm_meeting"/>
            <field name="domain_force">['|',('user_id','=',user.id),('user_id','=',False)]</field>
            <field name="groups" eval="[(4,ref('base.group_hr_user'))]"/>
        </record>
		<record id="crm_meeting_rights_all_security" model="ir.rule">
            <field name="name">crm all</field>
            <field model="ir.model" name="model_id" ref="model_crm_meeting"/>
            <field name="groups" eval="[(4,ref('base.group_hr_manager'))]"/>
        </record>
        

    </data>
</openerp>
########################################3  ir.model.access.csv  #######################################3

id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_hr_candidate_manager,hr.candidate.manager,model_hr_candidate,base.group_hr_manager,1,1,1,1
access_hr_candidate,hr.candidate,model_hr_candidate,base.group_hr_user,1,1,1,0

access_hr_applicant_manager,hr.applicant.manager,model_hr_applicant,base.group_hr_manager,1,1,1,1
access_hr_applicant,hr.applicant.id,model_hr_applicant,base.group_hr_user,1,1,1,0
access_hr_applicant_id,hr_applicant.id,model_hr_applicant,base.group_candidate,1,1,1,0


access_res_source_id,res.source.id,model_res_source,base.group_hr_manager,1,1,1,1
access_res_source_uid,res.source.id,model_res_source,base.group_hr_user,1,0,0,0

access_res_source__sourcetype_id,res.source.sourcetypeid,model_res_source_sourcetype,base.group_hr_manager,1,1,1,1
access_res_source_sourcetype_uid,res.source.sourcetype.id,model_res_source_sourcetype,base.group_hr_user,1,0,0,0

access_hr_applicant_interview,hr.applicant.interview.id,model_hr_applicant_interview,base.group_hr_manager,1,1,1,1
access_hr_applicant_interview_uid,hr.applicant.interview.id,model_hr_applicant_interview,base.group_hr_user,1,1,1,1

access_hr_applicant_qualification,hr.applicant.qualification.id,model_hr_applicant_qualification,base.group_hr_manager,1,1,1,1
access_hr_applicant_qualification_uid,hr.applicant.qualification.id,model_hr_applicant_qualification,base.group_hr_user,1,1,1,1

access_hr_recruitment_stage_id,hr_recruitment_stage_uid,model_hr_recruitment_stage,base.group_hr_manager,1,1,1,1
access_hr_recruitment_stage_uid,hr_recruitment_stage_user,model_hr_recruitment_stage,base.group_hr_manager,1,0,0,0

access_candidates_statistics,candidates_statistics_id,model_candidates_statistics,base.group_hr_manager,1,1,1,1
access_candidates_statistics_uid,candidates_statistics_id,model_candidates_statistics,base.group_hr_user,1,1,1,1

access_candidates_statistics_line,candidates_statistics_line_id,model_candidates_statistics_line,base.group_hr_manager,1,1,1,1
access_candidates_statistics_line_uid,candidates_statistics_line_id,model_candidates_statistics_line,base.group_hr_user,1,1,1,1

access_hr_terms_id,hr_terms_ui,model_hr_terms,base.group_hr_manager,1,1,1,1
access_hr_terms_uid,hr_terms_id,model_hr_applicant_interview,base.group_hr_user,1,1,1,1

access_hr_offer_terms_id,hr_offer_terms_ui,model_hr_offer_terms,base.group_hr_manager,1,1,1,1
access_hr_offer_terms_uid,hr_offer_terms_id,model_hr_offer_terms,base.group_hr_user,1,1,1,1
access_hr_offer_termss_uid,hr_offer_terms_id,model_hr_offer_terms,base.group_candidate,1,1,1,1

access_previous_employment_details_manager,previous_employment_details_manager,model_previous_employment_details,base.group_hr_manager,1,1,1,1
access_previous_employment_details,previous_employment_details_uid,model_previous_employment_details,base.group_hr_user,1,1,1,1

access_shedule_meeting_lists_manager,shedule_meeting_lists_manager,model_shedule_meeting_lists,base.group_hr_manager,1,1,1,1
access_shedule_meeting_lists,shedule_meeting_lists_uid,model_shedule_meeting_lists,base.group_hr_user,1,1,1,1

access_crm_meeting_type_manager,crm_meeting_type_manager,model_crm_meeting_type,base.group_hr_manager,1,1,1,1
access_crm_meeting_type,crm_meeting_type_uid,model_crm_meeting_type,base.group_hr_user,1,1,1,1

access_crm_meeting_manager,crm_meeting_manager,model_crm_meeting,base.group_hr_manager,1,1,1,1
access_crm_meeting,crm_meeting_uid,model_crm_meeting,base.group_hr_user,1,1,1,1

access_recruiter_metrics_id,recruiter_metrics_user,model_recruiter_metrics,base.group_hr_user,1,1,1,1
access_recruiter_metrics_uid,recruiter_metrics_manager,model_recruiter_metrics,base.group_hr_manager,1,1,1,1

access_recruiter_metrics_line_id,recruiter_metrics_line_user,model_recruiter_metrics_line,base.group_hr_user,1,1,1,1
access_recruiter_metrics_lineuid,recruiter_metrics_line_manager,model_recruiter_metrics_line,base.group_hr_manager,1,1,1,1

access_rchilly_id,rchilly_user_id,model_rchilly,base.group_hr_user,1,1,1,1
access_rchilly_uid,rchilly_manager_uid,model_rchilly,base.group_hr_manager,1,1,1,1

access_rchilly_count_id,rchilly_count_user_id,model_rchilly_count,base.group_hr_user,1,1,1,1
access_rchilly_count_uid,rchilly_count_manager_uid,model_rchilly_count,base.group_hr_manager,1,1,1,1

access_employment_details_id,employment_details_id,model_employment_details,base.group_hr_manager,1,1,1,1
access_employment_details_uid,employment_details_uid,model_employment_details,base.group_hr_user,1,1,1,1

access_candidate_skills_id,candidate_skills_manager,model_candidate_skills,base.group_hr_manager,1,1,1,1
access_candidate_skills_uid,candidate_skills_user,model_candidate_skills,base.group_hr_user,1,1,1,1

access_removing_highlighted_candidate_config_id,removing_highlighted_candidate_config_manager,model_removing_highlighted_candidate_config,base.group_hr_manager,1,1,1,1
access_removing_highlighted_candidate_config_uid,removing_highlighted_candidate_config_user,model_removing_highlighted_candidate_config,base.group_hr_user,1,0,0,0

################################################ static ##################################################
############################################### src ####################################################
########################################################## css ##########################################
############################################### bootstrap.css ############################################

.accordion {
  margin-bottom: 20px;
}

.accordion-group {
  margin-bottom: 2px;
  border: 1px solid #e5e5e5;
  -webkit-border-radius: 2px;
     -moz-border-radius: 2px;
          border-radius: 2px;
}

.accordion-heading {
  border-bottom: 0;
}

.accordion-heading .accordion-toggle {
  display: block;
  padding: 8px 15px;
}

.accordion-toggle {
  cursor: pointer;
}

.accordion-inner {
  padding: 9px 15px;
  border-top: 1px solid #e5e5e5;
}

.collapse {
  position: relative;
  height: 0;
  overflow: hidden;
  -webkit-transition: height 0.35s ease;
     -moz-transition: height 0.35s ease;
       -o-transition: height 0.35s ease;
          transition: height 0.35s ease;
}

.collapse.in {
  height: auto;
}

##############################################3 recruitment.css #############################################

.mt-left-200{
	margin-left:-200px !important;
}
.mt-left{
	margin-left:256px !important;
}
.mt-left_candidate{
	margin-left:380px !important;
}
.field_width{
	width:25% !important;
}
.comments_width{
	height:100% !important;
	margin-left:10px !important;
	margin-top:10px !important;
}
.align_right{
	float:right;
}
.align_center{
	float:center;
}
.status_message{
	width:22% !important;
}

.blue_color{
	color:#3399FF !important;
}
.openerp .rallign {
  text-align: right;
}
.openerp .oe_form .oe_form_field_text textarea,extarea, .openerp .oe_form .oe_form_field_selection select {
width: 100%;
height: 75%;
}
.date_field_size{
	width:36%;
}
.date_field_sizes{
	width:25%;
}
.view_field{
	width:50% !important;
}
.full_field_width{
	width:100% !important;
}
[data-id="x_tcmg_comments"]
{
	width: 50px !important;
}
.label_size{
	font-size: 100%;
}


.openerp .oe_form .oe_form_field_text .oe_form_text_content {
    text-overflow: ellipsis;
    display: inline-block;
    white-space: pre-wrap;
    overflow-x: hidden;
    width: 100%;
}

.scroll_style{
	overflow: scroll;
    text-align: center;
	 width: 800px; 
	 height:335px;
	  white-space: inherit;
	}
openerp .oe_form .oe_form_embedded_html {
	position: relative !important;
	width: 800px !important;
	margin-top: 12px !important;
	margin-bottom: 12px !important;
	text-align: justify !important;
}

.nolabel_2{
	margin-left:-150px !important;
	width:70px !important;
}

.nolabel_3{
	margin-left:-290px !important;
	width:70px !important;
}
.nolable_bonus{
	margin-left:-90px !important;
	width:70px !important;
}


.attach_style{
    width:100px !important;
}
.nolabel_new{
    margin-left:-180px !important;
    width:70px !important;

}

###########################################  js ##########################################################
#################################################### bootstrap.js #####################################

!function ($) {

  "use strict"; // jshint ;_;


 /* COLLAPSE PUBLIC CLASS DEFINITION
  * ================================ */

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse.defaults, options)

    if (this.options.parent) {
      this.$parent = $(this.options.parent)
    }

    this.options.toggle && this.toggle()
  }

  Collapse.prototype = {

    constructor: Collapse

  , dimension: function () {
      var hasWidth = this.$element.hasClass('width')
      return hasWidth ? 'width' : 'height'
    }

  , show: function () {
      var dimension
        , scroll
        , actives
        , hasData

      if (this.transitioning || this.$element.hasClass('in')) return

      dimension = this.dimension()
      scroll = $.camelCase(['scroll', dimension].join('-'))
      actives = this.$parent && this.$parent.find('> .accordion-group > .in')

      if (actives && actives.length) {
        hasData = actives.data('collapse')
        if (hasData && hasData.transitioning) return
        actives.collapse('hide')
        hasData || actives.data('collapse', null)
      }

      this.$element[dimension](0)
      this.transition('addClass', $.Event('show'), 'shown')
      $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

  , hide: function () {
      var dimension
      if (this.transitioning || !this.$element.hasClass('in')) return
      dimension = this.dimension()
      this.reset(this.$element[dimension]())
      this.transition('removeClass', $.Event('hide'), 'hidden')
      this.$element[dimension](0)
    }

  , reset: function (size) {
      var dimension = this.dimension()

      this.$element
        .removeClass('collapse')
        [dimension](size || 'auto')
        [0].offsetWidth

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

      return this
    }

  , transition: function (method, startEvent, completeEvent) {
      var that = this
        , complete = function () {
            if (startEvent.type == 'show') that.reset()
            that.transitioning = 0
            that.$element.trigger(completeEvent)
          }

      this.$element.trigger(startEvent)

      if (startEvent.isDefaultPrevented()) return

      this.transitioning = 1

      this.$element[method]('in')

      $.support.transition && this.$element.hasClass('collapse') ?
        this.$element.one($.support.transition.end, complete) :
        complete()
    }

  , toggle: function () {
      this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

  }


 /* COLLAPSE PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('collapse')
        , options = $.extend({}, $.fn.collapse.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.defaults = {
    toggle: true
  }

  $.fn.collapse.Constructor = Collapse


 /* COLLAPSE NO CONFLICT
  * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


 /* COLLAPSE DATA-API
  * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href
      , target = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
      , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
  })

}(window.jQuery);

################################################  trp_treeview_html.js  ######################################3

openerp.trp_web_treeview_html_widget=function(openerp)
{
    var format_cell_org=openerp.web.format_cell;
    openerp.web.format_cell=function(row_data, column, options)
    {
        if(column.widget=='trp_treeview_html')
        {
            return row_data[column.id].value;
        }
        else
        {
            return format_cell_org(row_data, column, options);
        }
    }
}
######################################################## recruitment.js ######################################

$(document).ready(function() {
    $('#collapseOne').addClass('active');
});


########################################################## wizard ###############################################
#################################### init.py #############################################################

import wizard_comment
import wizard_history
import wizard_comment_candidate

############################ wizard_comment.py #####################################################################


from openerp.osv import fields, osv
from openerp.tools.translate import _
import datetime
import time

class applicant_comment_wiz(osv.osv_memory):

    _name = "applicant.comment.wiz"
    _description = "Add comment in applicant"


    def addcomment(self, cr, uid, ids, context=None):
        tm = '('+ time.strftime('%Y-%m-%d %H:%M:%S') + '): '
        hr_pool=self.pool.get('hr.applicant')
        usr_name=self.pool.get('res.users').browse(cr, uid, uid,context).name
        comment = self.browse(cr, uid, ids[0], context).wiz_comment
        
        if comment:
            
            if context['active_id']:
                hr_br = hr_pool.browse(cr, uid, context['active_id'],context)
                print "hr_br.x_app_stages",hr_br.x_app_stages
                if hr_br.x_app_stages==5:
                    if not hr_br.x_candidate_identified_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        add_comm = hr_br.x_candidate_identified_comments +'\n\n'+ usr_name + tm +''+comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_candidate_identified_comments': add_comm, 'x_ch_commt0':'yes'})
                
                
                if hr_br.x_app_stages==10:
                    print "hi if"
                    if not hr_br.x_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        print "hi hi"
                        add_comm = hr_br.x_comments +'\n\n'+ usr_name + tm +''+comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_comments': add_comm, 'x_ch_commt1':'yes'})
                
                if hr_br.x_app_stages==20:
                    if not hr_br.x_tcmg_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        add_comm = hr_br.x_tcmg_comments+'\n\n'+ usr_name + tm +'' +comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_tcmg_comments': add_comm,'x_ch_commt2':'yes'})
                
                if hr_br.x_app_stages==30:
                    if not hr_br.x_client_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        add_comm = hr_br.x_client_comments+'\n\n'+ usr_name + tm +'' +comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_client_comments': add_comm,'x_ch_commt3':'yes'})
                
                if hr_br.x_app_stages==40:
                    if not hr_br.x_interview_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        add_comm = hr_br.x_interview_comments+'\n\n'+ usr_name + tm  +''+comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_interview_comments': add_comm, 'x_ch_commt4':'yes'})
                
                if hr_br.x_app_stages==50:
                    if not hr_br.x_offer_comments:
                        add_comm = ""+usr_name + tm +''+comment+'\n'
                    else:
                        add_comm = hr_br.x_offer_comments+'\n\n'+ usr_name + tm  +''+comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_offer_comments': add_comm,'x_ch_commt5':'yes'})
                
                if hr_br.x_app_stages==60:
                    if not hr_br.x_hire_comments:
                        add_comm = ""+usr_name + tm +''+comment
                    else:
                        add_comm = hr_br.x_hire_comments+'\n\n'+ usr_name + tm  +''+comment
                    hr_pool.write(cr, uid, context['active_id'], {'x_hire_comments': add_comm, 'x_ch_commt6':'yes'})
                        
        return True


    _columns = {
        'wiz_comment':fields.text('Add comment'),
    }

applicant_comment_wiz()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

##################################################33 wizard_comment_candidate.py ################################################


from openerp.osv import fields, osv
from openerp.tools.translate import _
import datetime
import time

class candidate_comment_wiz(osv.osv_memory):

    _name = "candidate.comment.wiz"
    _description = "Add comment in candidate"


    def addcomment(self, cr, uid, ids, context=None):
        tm = '('+ time.strftime('%Y-%m-%d %H:%M:%S') + '): '
        hr_pool=self.pool.get('hr.candidate')
        usr_name=self.pool.get('res.users').browse(cr, uid, uid,context).name
        comment = self.browse(cr, uid, ids[0], context).wiz_comment
        
        if comment:
            
            if context['active_id']:
                hr_br = hr_pool.browse(cr, uid, context['active_id'],context)
                
                if not hr_br.x_candidate_chat_comment:
                    add_comm = ""+usr_name + tm +''+comment
                else:
                    add_comm = hr_br.x_candidate_chat_comment +'\n\n'+ usr_name + tm +''+comment
                hr_pool.write(cr, uid, context['active_id'], {'x_candidate_chat_comment': add_comm})
                        
        return True


    _columns = {
        'wiz_comment':fields.text('Add comment'),
    }

candidate_comment_wiz()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

########################################################3 wizard_comment_candidate_view.xml #########################

<openerp>
   <data>

        

       <record id="view_candidate_chat_comment_wiz" model="ir.ui.view">
          <field name="name">candidate.comment.wiz.form</field>
          <field name="model">candidate.comment.wiz</field>
          <field name="arch" type="xml">
            <form string="Add Comment"  version="7.0">
                <group col="4">
                    <field name="wiz_comment" />
                </group>
                <footer>
                    <button name="addcomment" string="Save" type="object" class="oe_highlight"/>
                    or
                    <button string="Cancel" class="oe_link" special="cancel" />
                </footer>
            </form>
          </field>
       </record>

       

       <record id="action_candidate_chat_comment_wiz" model="ir.actions.act_window">
          <field name="name">Add Comment</field>
          <field name="type">ir.actions.act_window</field>
          <field name="res_model">candidate.comment.wiz</field>
          <field name="view_type">form</field>
          <field name="view_mode">form</field>
          <field name="target">new</field>
       </record>

   </data>
</openerp>

#################################################### wizard_comment_view.xml ####################################
<openerp>
   <data>

        

       <record id="view_applicant_comment_wiz" model="ir.ui.view">
          <field name="name">applicant.comment.wiz.form</field>
          <field name="model">applicant.comment.wiz</field>
          <field name="arch" type="xml">
            <form string="Add Comment"  version="7.0">
                <group col="4">
                    <field name="wiz_comment" />
                </group>
                <footer>
                    <button name="addcomment" string="Save" type="object" class="oe_highlight"/>
                    or
                    <button string="Cancel" class="oe_link" special="cancel" />
                </footer>
            </form>
          </field>
       </record>

       

       <record id="action_applicant_comment_wiz" model="ir.actions.act_window">
          <field name="name">Add Comment</field>
          <field name="type">ir.actions.act_window</field>
          <field name="res_model">applicant.comment.wiz</field>
          <field name="view_type">form</field>
          <field name="view_mode">form</field>
          <field name="target">new</field>
       </record>

   </data>
</openerp>

 ##################################  wizard_history.py #########################################

 
from openerp.osv import fields, osv
from openerp.tools.translate import _
import datetime
import time

class history_line_wiz(osv.osv_memory):

    _name = "history.line.wiz"
    _description = "History applicant"
    _columns = {
        'line_id':fields.many2one('history.wiz','History'),
        'stage_name':fields.many2one('hr.recruitment.stage','Stage Name'),
        'wiz_comment':fields.text('Stage comment'),
        'created_on':fields.datetime('Created On'),
        'completed_on':fields.datetime('Completed On'),
        'status':fields.char('Status',size=256),
        'recruiter_name':fields.many2one('res.users','Recruiter Name'),
    }

history_line_wiz()


class history_wiz(osv.osv_memory):
    _name = "history.wiz"
    _columns={
        'name':fields.char('Name',size=216),
        'hist_line_ids':fields.one2many('history.line.wiz','line_id','History'),
        'appl_id':fields.many2one('hr.applicant',"Applicant"),
    }
history_wiz()
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:


#########################################3  wizard_history_view.xml ####################################

<openerp>
   <data>

        

       <record id="view_history_wiz" model="ir.ui.view">
          <field name="name">history.wiz.form</field>
          <field name="model">history.wiz</field>
          <field name="arch" type="xml">
            <form string="Histroy"  version="7.0">
                <field name="hist_line_ids">
                    <tree string='History' create='false' edit='false' delete='false'>
                        <field name="stage_name"/>
                        <field name="wiz_comment"/>
                        <field name="created_on"/>
                        <field name="completed_on"/>
                        <field name="status"/>
                        <field name="recruiter_name"/>
                    </tree>
                </field>
                <footer>
                    <button string="Cancel" class="oe_link" special="cancel" />
                </footer>
            </form>
          </field>
       </record>

       <record id="view_history_tree_wiz" model="ir.ui.view">
          <field name="name">history.wiz.tree</field>
          <field name="model">history.wiz</field>
          <field name="arch" type="xml">
            <tree string="Histroy" version="7.0" create="False" edit="False">
                    <field name="name"/>
                
            </tree>
          </field>
       </record>


       <record id="action_applicant_history_wiz" model="ir.actions.act_window">
          <field name="name">History</field>
          <field name="type">ir.actions.act_window</field>
          <field name="res_model">history.wiz</field>
          <field name="view_type">tree</field>
          <field name="view_mode">form</field>
       </record>

   </data>
</openerp>

############################################## candidate_statistics.py #####################################

from openerp.osv import fields, osv
from openerp import tools
from openerp.addons.hr_recruitment import hr_recruitment
from openerp.addons.decimal_precision import decimal_precision as dp
from datetime import datetime
from datetime import date
import datetime
import time
from document.content_index import cntIndex
from openerp.tools.misc import ustr
import uuid
from openerp.tools.translate import _
import base64




class candidates_statistics(osv.osv):
    _name = "candidates.statistics"
    _description = "Candidates Statistics"
    _columns = {
                'x_total_candidates': fields.integer('Total Number Of Candidates',readonly="True"),
                'name':fields.char('Name',size=128),
                'creation_catagory':fields.selection([
                                             ('Applicant Creation','Applicant Creation'),
                                             ('Internal Screening','Internal Screening'),
                                             ('To Client Partner','To Client Partner'),
                                             ('To Client','To Client'),
                                             ('Interviewed / Decision','Interviewed / Decision'),
                                             ('Offer Status','Offered'),
                                             ('Join','Joined'),
                                             ],'Select Stages'),
                'candidate_creation_from':fields.date('Please Select Report Run Date'),
                'cand_stat_line_ids':fields.one2many('candidates.statistics.line','cand_stat_id','Candidates'),
                'x_tcmg_mgr': fields.many2one('res.users', 'TCMG Member'),
                 'x_tcmg_member': fields.many2one('res.users', 'Recruiter'),
                'user_id': fields.many2one('res.users', 'x_tcmg_member', track_visibility='onchange',required=True),  
                'user_ids': fields.many2one('res.users', 'Admin', track_visibility='onchange',required=True),  

               }
    _defaults ={
                'name': 'New Candidates Added',
                'x_tcmg_member': lambda obj, cr, uid, context: uid,
                'user_id': lambda obj, cr, uid, context: uid,
                'user_ids': lambda obj, cr, uid, context: uid,
                #~ 'candidate_creation_from':lambda *a: datetime.now().strftime('%Y-%m-%d %H:%M:%S'),


     
                }
    
    
    def create(self, cr, uid, vals, context=None):     
        cr.execute('''  
                    select count(id) from hr_candidate       
                    ''' )
        data = cr.dictfetchall()    
        vals['x_total_candidates']= data[0]['count']
        return super(candidates_statistics, self).create(cr,uid,vals,context=context)
    
    
    
    
    def get_data(self, cr, uid, ids, context):
         #### delete previous generated data in candidates.pipeline.line####
        pip_line = self.pool.get('candidates.statistics.line')
        data_ids = pip_line.search(cr, uid, [('id','>',0)])
        if len(data_ids)>0:
            pip_line.unlink(cr, uid, data_ids, context)
        ############ End ###########
    
        #### delete previous generated data in candidates.pipeline ####
        cur_id = self.browse(cr, uid, ids[0], context=context)
        pip = self.search(cr, uid, [('id','<',ids[0])])
        if len(pip)>0:
            self.unlink(cr, uid, pip, context)
        ##############  End ################
    
        cur_id = self.browse(cr, uid, ids[0], context=context)
        where_sql = " where 1=1 "
        if not cur_id.candidate_creation_from:
            raise osv.except_osv(('Warning !!!'), ('PLease Enter The Run Date'))
        obj = cur_id.candidate_creation_from
        date_obj=datetime.datetime.strptime(obj, '%Y-%m-%d').date()
        date_obj_yr= str(date_obj).split('-')
        date_yr_obj = date_obj_yr[0]
        date_month_obj =date_obj_yr[1] 
        #### Month ###
        obj_to_month = date_obj_yr[0]+'-'+date_obj_yr[1]+'-'+'01'
        ###### Year ####
        obj_to_year = date_obj_yr[0]+'-'+'01'+'-'+'01'
        #######week##
        week_obj=datetime.datetime.strptime(str(obj), '%Y-%m-%d').date()
        obj_week = week_obj.isocalendar()[1]
        obj_week_no = int(obj_week)-1
        wk_dy = str(date_obj.year)+' '+str(obj_week_no)+' '+'1'
        week_day=time.asctime(time.strptime(wk_dy, '%Y %W %w'))
        week_obj_br=datetime.datetime.strptime(week_day, "%a %b %d %H:%M:%S %Y")
        week_obj_split = str(week_obj_br).split('-')
        week_obj_yr = week_obj_split[0]
        week_obj_month = week_obj_split[1]
        week_obj_sp = week_obj_split[2]
        week_obj_date_obj =week_obj_sp.split(' ')
        week_obj_date =  week_obj_date_obj[0]
        week_conc_obj = week_obj_yr + '-' + week_obj_month + '-' + week_obj_date
        if cur_id.candidate_creation_from <= str(date_obj.year)+'-'+'03'+'-'+'31':
            obj_qtr_month= str(date_obj.year)+'-'+'01'+'-'+'01'
        elif cur_id.candidate_creation_from <= str(date_obj.year)+'-'+'06'+'-'+'30': 
            obj_qtr_month= str(date_obj.year)+'-'+'04'+'-'+'01'
        elif cur_id.candidate_creation_from <= str(date_obj.year)+'-'+'09'+'-'+'30':
            obj_qtr_month= str(date_obj.year)+'-'+'07'+'-'+'01'
        elif cur_id.candidate_creation_from <= str(date_obj.year)+'-'+'12'+'-'+'31':
            obj_qtr_month= str(date_obj.year)+'-'+'10'+'-'+'01'
        if cur_id.x_tcmg_member:
            
            cr.execute('''  
            select distinct user_id as x_tcmg_member
            from hr_candidate c 
            order by 1
            ''' )
                 
            data = []
            i=0
        #                  for c in cr.fetchall():
    
            r_d = {'rect':cur_id.x_tcmg_member.id}
            i=i+1
    
            cr.execute('''select * from (select  count(id) as today_count from hr_candidate 
                        where date(create_date) = (%s) and user_id = %s
                    ) AS T1,
                    
                    (select  count(id) as current_week_count from hr_candidate
                        where date(create_date) >= (%s) 
                        and date(create_date) <= (%s) and user_id = %s
                    ) AS T2,
                    
                    (select  count(id) as monthly_count from hr_candidate
                        where date(create_date) >= (%s) 
                        and date(create_date) <= (%s) and user_id = %s
                    ) AS T3,
                    
                    (select  count(id) as quarterly_count from hr_candidate
                        where date(create_date) >= (%s) and
                        date(create_date) <= (%s) and user_id = %s
                    ) AS T4,
                    
                    
                    (select  count(id) as annual_count from hr_candidate
                        where date(create_date) >= (%s) 
                        and date(create_date) <= (%s) and user_id = %s
                    ) AS T5
                    
                    ''',(cur_id.candidate_creation_from,cur_id.x_tcmg_member.id,
                     week_conc_obj,cur_id.candidate_creation_from,cur_id.x_tcmg_member.id,
                     obj_to_month,cur_id.candidate_creation_from,cur_id.x_tcmg_member.id,
                     obj_qtr_month,cur_id.candidate_creation_from,cur_id.x_tcmg_member.id,
                     obj_to_year,cur_id.candidate_creation_from,cur_id.x_tcmg_member.id))
            res = cr.dictfetchall()
            r_d.update(res[0])
            data.append(r_d)
                
        else:
            cr.execute('''
                select distinct user_id as x_tcmg_member 
                from hr_candidate c 
                order by 1
                ''' )
     
            data = []
            i=0
            for c in cr.fetchall():
    
                r_d = {'rect':c[0]}
                i=i+1
                r=cr.execute('''select * from (select  count(id) as today_count from hr_candidate 
                            where date(create_date) = (%s) and user_id = %s
                        ) AS T1,
                        
                        (select  count(id) as current_week_count from hr_candidate
                            where date(create_date) >= (%s) 
                            and date(create_date) <= (%s) and user_id = %s
                        ) AS T2,
                        
                        (select  count(id) as monthly_count from hr_candidate
                           where date(create_date) >= (%s) 
                            and date(create_date) <= (%s) and user_id = %s
                        ) AS T3,
                        
                        (select  count(id) as quarterly_count from hr_candidate
                            where date(create_date) >= (%s) and 
                            date(create_date) <= (%s) and user_id = %s
                        ) AS T4,
                        
                           
                        (select  count(id) as annual_count from hr_candidate
                            where date(create_date) >= (%s) 
                            and date(create_date) <= (%s) and user_id = %s
                        ) AS T5
                        
                        ''',(cur_id.candidate_creation_from,c[0],
                         week_conc_obj,cur_id.candidate_creation_from,c[0],
                         obj_to_month,cur_id.candidate_creation_from,c[0],
                         obj_qtr_month,cur_id.candidate_creation_from,c[0],
                         obj_to_year,cur_id.candidate_creation_from,c[0]))
                
            res = cr.dictfetchall()
            r_d.update(res[0])
            data.append(r_d)
                
         
        line_pool = self.pool.get('candidates.statistics.line')
    

        if data:
            for i in data:
                line_pool.create(cr, uid, {'cand_stat_id':ids[0],
                                          'x_tcmg_member': i['rect'] or '',
                                         'daily_count':i['today_count'] or '',
                                         'weekly_count':i['current_week_count'] or '',
                                         'monthly_count':i['monthly_count'] or '',
                                         'quarterly_count':i['quarterly_count'] or '',
                                         #~ 'halfyearly_count':i['halfyearly_count'] or '',
                                         'annual_count':i['annual_count'] or '',
                                          
                                            })
        else:
            raise osv.except_osv(('Warning !!!'), ('No Records Found'))
 
        return True
    
    
    
    
    def clear_data(self,cr, uid, ids, context):
        self.write(cr, uid, ids[0], {'x_tcmg_mgr':''})
        pip_line = self.pool.get('candidates.statistics.line')
        data_ids = pip_line.search(cr, uid, [('id','>',0)])
        if data_ids:
            pip_line.unlink(cr, uid, data_ids, context)
        return True

candidates_statistics()

class candidates_statistics_line(osv.osv):
    _name = "candidates.statistics.line"
    _description = "Pipeline Statistics Line"
    _columns = {
                'cand_stat_id':fields.many2one('candidates.statistics','Statistics'),
                'x_tcmg_member':fields.many2one('res.users','Recruiter', readonly=True),
                'daily_count':fields.integer('Today', readonly=True),
                'weekly_count':fields.integer('Week', readonly=True),
                'monthly_count':fields.integer('Month', readonly=True),
                'quarterly_count':fields.integer('Quarter', readonly=True),
                #~ 'halfyearly_count':fields.integer('HalfYear', readonly=True),
                'annual_count':fields.integer('YTD', readonly=True),
               }


candidates_statistics_line()

################################################candidate_statistics_view.xml ###############################3

<?xml version="1.0"?>
<openerp>
    <data>
	<!--Candidate Statistics-->
	
	 <record id="view_cand_statistics_form" model="ir.ui.view">
        <field name="name">candidates.statistics.form</field>
        <field name="model">candidates.statistics</field>
        <field name="arch" type="xml">
        <form string="New Candidates Added" version="7.0" create="false" edit="false" quick_create="false">
        	   <group col="4" colspan="2">
					<field name="x_total_candidates" />
              </group>
        	  	<pre> To retrive candidate statistics for a given period,</pre>
              <group col="4" colspan="2">
					<field name="candidate_creation_from" />
					<!--<field name="x_tcmg_mgr" class="infrastructure" domain="[('x_is_tcmg_manger','=','1')]" groups="base.group_hr_manager"/>-->
					<field name = "user_ids" invisible = "1"/>
					<field name="x_tcmg_member" domain = "['|',('x_manager','=',user_id),('x_admin','=',user_ids)]" class="view_field"/>
					<field name="user_id" domain="[('x_is_tcmg_manger','=','1')]" invisible = "1"/>

<!--                     <field name="creation_catagory" class="view_field"/>
 -->              </group>
			  		
              <group col="4" colspan="2">
                    <div align="left">
                        <button name="get_data" string="Search" type="object"/>
                        <button name="clear_data" string="Reset" type="object"/>
                    </div>
              </group>
                        <field name="cand_stat_line_ids">
                             <tree string="Candidates Created" create="false" delete="false" editable="top">
                                    <field name="x_tcmg_member"/>
                                    <field name="daily_count"/>
									<field name="weekly_count"/>
									<field name="monthly_count"/>
									<field name="quarterly_count"/>
<!--
									<field name="halfyearly_count" invisible="1"/>
-->
									<field name="annual_count"/>
                             </tree>
                        </field>
        </form>
        </field>
    </record>

    <record id="action_candidate_statistics" model="ir.actions.act_window">
        <field name="name">New Candidates Added</field>
        <field name="res_model">candidates.statistics</field>
        <field name="view_type">form</field>
        <field name="view_id" ref="view_cand_statistics_form"/>
    </record>

    <menuitem action="action_candidate_statistics" id="menu_candidate_statistics_id" 
			parent="custom_hr_applicant.menu_hr_main_reportin" groups="base.group_employee_management"
             sequence="5"/>
	
	
    </data>
</openerp>


###################################################  candidate_statistics_view_for_shyam.xml #######################################
<?xml version="1.0"?>
<openerp>
    <data>
	<!--Candidate Statistics-->
	
	 <record id="view_cand_statistics_form_for_shyam" model="ir.ui.view">
        <field name="name">candidates.statistics.form</field>
        <field name="model">candidates.statistics</field>
        <field name="arch" type="xml">
        <form string="New Candidates Added" version="7.0" create="false" edit="false" quick_create="false">
        	   <group col="4" colspan="2">
					<field name="x_total_candidates" />
              </group>
        	  	<pre> To retrive candidate statistics for a given period,</pre>
              <group col="4" colspan="2">
					<field name="candidate_creation_from" />
					<!--<field name="x_tcmg_mgr" class="infrastructure" domain="[('x_is_tcmg_manger','=','1')]" groups="base.group_hr_manager"/>-->
					<field name = "user_ids" invisible = "1"/>
					<field name="x_tcmg_member"/>
					<field name="user_id" domain="[('x_is_tcmg_manger','=','1')]" invisible = "1"/>

<!--                     <field name="creation_catagory" class="view_field"/>
 -->              </group>
			  		
              <group col="4" colspan="2">
                    <div align="left">
                        <button name="get_data" string="Search" type="object"/>
                        <button name="clear_data" string="Reset" type="object"/>
                    </div>
              </group>
                        <field name="cand_stat_line_ids">
                             <tree string="Candidates Created" create="false" delete="false" editable="top">
                                    <field name="x_tcmg_member"/>
                                    <field name="daily_count"/>
									<field name="weekly_count"/>
									<field name="monthly_count"/>
									<field name="quarterly_count"/>
<!--
									<field name="halfyearly_count" invisible="1"/>
-->
									<field name="annual_count"/>
                             </tree>
                        </field>
        </form>
        </field>
    </record>

    <record id="action_candidate_statistics_for_shyam" model="ir.actions.act_window">
        <field name="name">New Candidates Added</field>
        <field name="res_model">candidates.statistics</field>
        <field name="view_type">form</field>
        <field name="view_id" ref="view_cand_statistics_form_for_shyam"/>
    </record>

    <menuitem action="action_candidate_statistics_for_shyam" id="menu_candidate_statistics_id_for_shyam" 
			parent="custom_hr_applicant.menu_hr_main_reportin" groups="base.group_top_management"  sequence="5"/>
	
	
    </data>
</openerp>


######################################################## candidate_view_for_us.xml ################################


<openerp>
    <data>
   
		 <!-- hr.candidate view -->
		
	 <record model="ir.ui.view" id="candidate_source_form_for_us">
        <field name="name">hr.candidate</field>
        <field name="model">hr.candidate</field>
        <field name="type">form</field>
        <field name="arch" type="xml">
        	<form string="Applicant Creation Form" version="7.0">
	            <sheet>
	            		<group>
	            		<div class="oe_title">
		                            <label for="x_first_name"  invisible="1" class="oe_edit_only"/>
		                            <h1><field name="x_first_name" class="oe_inline" invisible="1"/></h1>
									<h3><font color="Blue"><field name="x_candidate_id" readonly="True" attrs="{'invisible':[('x_applicant_bool','=',False)]}"/></font></h3>
									<field name="x_applicant_bool" invisible='1'/>
		             	</div>
						<div class="oe_right oe_button_box">
                   			<button name="action_generate_resume" type="object"  groups="base.group_us_user"
                        			string="Generate / Attach Resume" />
        				</div>
						</group>
						<group>
							<field name="x_title"  style="width:70%%" />
							<field name="x_skill_technology" widget="many2many_tags" />
							<field name="users_dept" invisible="1"/>
						</group>
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
						<font size="2">General Information</font>
						
						</a>
						</div>
						<div id="collapseOne" class="accordion-body collapse in ">
						<div class="accordion-inner">
		                   <group col="4" colspan="2">
					<field name="x_resume" filename="x_file_name" /><newline/>
			                  <field name="x_first_name" on_change="onchange_firstname(x_first_name)"/>
			                   <field name="x_middle_name" on_change="onchange_middlename(x_middle_name)"/>
							    <field name="x_last_name" on_change="onchange_check_name(x_first_name,x_last_name)"/>
							   <label for="x_date"/>
                                <div>
                                       <field name="x_month" class="oe_inline"/>
                                        
                                        <span class="oe_inline" attrs="{'invisible':[('x_month','=',False)]}"> </span>
                                        <field name="x_date" class="oe_inline"/>
                                </div>
							   <field name="x_street1"/>
							   <field name="x_street2"/>
							   <field name="x_county"/>
                               <field name="country_id" options="{'create': false, 'create_edit': false,'no_open': True}"/>
							    <field name="state_id" options="{'create': false, 'create_edit': false,'no_open': True}"/>
							   <field name="x_city"  />
                               <field name="x_zip_code" on_change="onchange_zipcode(x_zip_code)"/>
							   <field name="x_resident_status"  />
							   <field name="x_email_from" on_change="onchange_primary_email(x_email_from)"/>
                               <field name="x_secondary_email" on_change="onchange_secondary_email(x_secondary_email)"/>
							   <field name="x_mobile" placeholder="e.g XXX-XXX-XXXX" />
							   <field name="x_phone" />
							   <field name="x_ssn" attrs="{'invisible':[('users_dept','=',1)]}" on_change="validate_ssn(x_ssn)"/>
							   <field name="x_candidate_function" />
                                <field name="x_candidate_status" attrs="{'invisible':[('x_applicant_bool','=',False)]}"/>
                                <field name="x_linkedin_id"/>
                                <field name="x_twitter_id"/>
							   <field name="user_id" readonly="1"/>
							   <field name="x_job_id" domain="[('x_requisition_status','=',1),('depart_id','=',2)]" on_change="onchange_applied_job(x_job_id,context)"/><newline/>
						       <field name="x_sourcetype" on_change="onchange_sourcetype(x_sourcename,context)" />
							   <field name="x_sourcename" domain="[('source_id','=',x_sourcetype)]" attrs="{'invisible':[('x_sourcetype','in',[2,3])],'required':[('x_sourcetype','not in',[2,3])]}"/>
							   <field name="x_vendor_id" attrs="{'invisible':[('x_sourcetype','!=',3)],'required':[('x_sourcetype','=',3)]}"/>
							   <field name="x_employee" attrs="{'invisible':[('x_sourcetype','!=',2)],'required':[('x_sourcetype','=',2)]}"/><newline/>
								 <field name="write_date" invisible="1"/>
								<field name="write_uid" invisible="1" />
								<field name="x_file_name" invisible="1" on_change="onchange_resume(x_resume,x_file_name,context)"/>
							</group>
					  </div>
					  </div>
					  </div>
					  </div>
					  
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsetwo">
						<font size="2">Education Information</font>
						</a>
						</div>
						<div id="collapsetwo" class="accordion-body collapse  ">
						<div class="accordion-inner">
		                   <group >
		                   	
                               <field name = "child_ids_qual" >
                               	 <tree string="interview Categories" editable="bottom">
				                    <field name="x_degree"/>
				                     <field name="x_course_name"/>
				                     <field name="x_university"/>
				                     <field name="x_edu_month" />
				                    <field name="x_edu_year" on_change = "onchange_year(x_edu_year)"/>
                                    
				                </tree>
								</field>
							</group >
						</div>
						</div>
						</div>
						</div>
						
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsethree">
						<font size="2" >Employment Information</font>
						</a>
						</div>
						<div id="collapsethree" class="accordion-body collapse  ">
						<div class="accordion-inner">
						
		                   <group col="4" colspan="2" string="Years of Experience">
		                   		<label for="x_exp_in_years"/>
								<div>
								        <field name="x_exp_in_years" placeholder="Years" class="oe_inline"/>
								        . 
										<span class="oe_inline" attrs="{'invisible':[('x_exp_in_months','=',False)]}">  </span>
								        <field name="x_exp_in_months" class="oe_inline"/>
								</div>
								<label for="x_relevent_exp_in_years"/>
								<div>
										 <field name="x_relevent_exp_in_years" placeholder="Years"  class="oe_inline"/>
										  . 
										 <span class="oe_inline" attrs="{'invisible':[('x_relevent_exp_in_months','=',False)]}">  </span>
								         <field name="x_relevent_exp_in_months" class="oe_inline"/>
								</div>
							</group>
							
							<group>
                                <field name="x_employment_ids">
                                    <tree editable='top'>
                                        <field name="x_employeer"/>
                                        <field name="x_exp_start_date"/>
                                        <field name="x_exp_end_date"/>
                                        <field name="x_role"/>
                                        <field name="x_tech"/>
                                        <field name="is_last_employer"/>
                                    </tree>
                                </field>
                            </group>
							<group string="Salary" col="4" colspan="4">
								<label for="x_current_salary"/>
								<div>
								        <field name="x_cur_salary_currency"  class="oe_inline"/>
								        <span class="oe_inline" >  </span>
								        <field name="x_current_salary" class="oe_inline"/>
										<span class="oe_inline"> </span>
								        <field name="x_cur_salary_payby" class="oe_inline"/>
								</div>
								<newline/>
								<label for="x_desired_salary"/>
								<div>
								    <field name="x_des_sal_currency" class="oe_inline"/>
								    <span class="oe_inline"> </span>
								    <field name="x_desired_salary" class="oe_inline" />
									<span class="oe_inline" > </span>
								    <field name="x_des_sal_payby" class="oe_inline" />
								</div>
							   
							</group>
					    </div>
						</div>
						</div>
						</div>
				<div class="accordion" id="accordion2">
				<div class="accordion-group">
				<div class="accordion-heading">
				<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsefour">
				<font size="2">Work Authorization</font></a>
				</div>
				<div id="collapsefour" class="accordion-body collapse  ">
				<div class="accordion-inner">
		                   <group col="6" colspan="2">
		                   <field name="x_passport_no" attrs="{'invisible':[('users_dept','!=',1)]}"/>
							   <field name="x_passport_validity" attrs="{'invisible':[('users_dept','!=',1)]}" string="Date of Expiry" on_change="onchange_passport_validity(x_passport_validity)"/>
							   <field name="x_passport_country_id" attrs="{'invisible':[('users_dept','!=',1)]}"/>
							   <field name="x_work_authorization"/>
							   <field name="x_auth_validity" string="Date of Expiry" on_change="onchange_auth_validity(x_auth_validity)"/>
							   <field name="x_country_id"/>
					</group>
					
				  </div>
				  </div>
				  </div>
				  </div>
				<div class="accordion" id="accordion2">
				<div class="accordion-group">
				<div class="accordion-heading">
				<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsefive">
				<font size="2">Resume Summary</font></a>
				</div>
				<div id="collapsefive" class="accordion-body collapse  ">
				<div class="accordion-inner">
                   <group string="Resume Content" >
					   <div class="oe_title">
	                       <fieldset>
	            				<div class="scroll_style" >
	                              				<field name="x_resume_content" widget="html"/>
								   <field name="create_date" invisible="1"/>
								   <field name="create_uid" invisible="1" />
								   <field name="x_candidate_role"  invisible="1"/>
								   <field name="x_major_strengths" invisible="1"/>
								   <field name="x_certifications" invisible="1"/>
								   <field name="x_operating_sys" invisible="1"/>
								   <field name="x_known_languages" invisible="1"/>
								   <field name="x_version_control" invisible="1"/>
								   <field name="x_database" invisible="1"/>
								   <field name="x_scheduler" invisible="1"/>
								   <field name="x_tools_utilities" invisible="1"/>
								   <field name="x_employment_details_ids" invisible="1">
	                                    <tree editable='top'>
	                                        <field name="client"/>
	                                        <field name="city"/>
	                                        <field name="roles"/>
	                                        <field name="project_name"/>
											<field name="project_desc"/>
						   					<field name="responsibilities" />
						   					<field name="environment"/>
						  
	                                    </tree>
	                                </field>
	                            </div>
	                        </fieldset>
                        </div>
					</group>
               <!-- <label for="x_candidate_chat_comment" string="Comments" />
				 	
				<field name="x_candidate_chat_comment"   class="comments_width"  readonly="1" />
                
                <group>
                   <button name="%(action_candidate_chat_comment_wiz)d" string="Add Comment" type="action" />
                </group>			 -->
				  </div>
				  </div>
				  </div>
				  </div>
				  
				  
				<!--  <div class="accordion" id="accordion2">
				  <div class="accordion-group">
				  <div class="accordion-heading">
				  <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsesix">
				  <font size="2">Candidate Resume</font></a>
				  </div>
				  <div id="collapsesix" class="accordion-body collapse  ">
				  <div class="accordion-inner">
						<group col="6" colspan="2">				
		                   <field name="x_candidate_role" />
						   <field name="x_major_strengths" />
						   <field name="x_certifications" />
						</group>
						<group col="6" colspan="2" string="Techinical Summary">
						   <field name="x_operating_sys" />
						   <field name="x_known_languages" />
						   <field name="x_version_control" />
						   <field name="x_database" />
						   <field name="x_scheduler" />
						   <field name="x_tools_utilities" />
						 </group>
						 <group>
	                                <field name="x_employment_details_ids">
	                                    <tree editable='top'>
	                                        <field name="client"/>
	                                        <field name="city"/>
	                                        <field name="roles"/>
	                                        <field name="project_name"/>
											<field name="project_desc"/>
						   					<field name="responsibilities" />
						   					<field name="environment"/>
						  
	                                    </tree>
	                                </field>
	                      </group>
					  </div>
					  </div>
					  </div>
					  </div>				  
	            
				    -->
	            </sheet>
				
				
				<header attrs="{'invisible':[('x_applicant_bool','=',False)]}">
					<button name="link_to_jobs" type="object" string="Attach a job" icon="STOCK_CONNECT" class="mt-left" />
					<button name="applied_jobs" type="object" string="Applied Jobs" class="mt-left_candidate" />
				</header>
				</form>
			</field>
	</record>

	
	<record model="ir.ui.view" id="candidate_tree_for_us">
        <field name="name">hr.candidate</field>
        <field name="model">hr.candidate</field>
        <field name="type">tree</field>
        <field name="arch" type="xml">
        	<tree string="Resource">
        		<field name="users_dept" invisible="1"/>
                <field name="x_combine_name6" invisible="1"/>
				<field name="create_date" />
			   <field name="x_first_name"/>
			   <field name="x_last_name"/>
			   <field name="x_candidate_roll_no"/>
			   <field name="x_city"/>
			   <field name="state_id"/>
			  <!--  <field name="country_id"  /> -->
			   <field name="x_email_from"/>
			   <field name="x_mobile"/>
			   <field name="x_skill_technology"/>
			   <field name="x_sourcetype" invisible="1"/>
			   <field name="x_sourcename" domain="[('source_id','=',x_sourcetype)]" />
			   <field name="user_id"/>
			   <field name="write_date"/>
			   <field name="write_uid" />
               <field name="is_cand_tagged" invisible="1"/>
        	</tree>
		</field>
	</record>
	<record id="view_hr_applicant_creation_search_for_us" model="ir.ui.view">
        <field name="name">Applicant Search</field>
        <field name="model">hr.candidate</field>
        <field name="arch" type="xml">
            <search string="Search Candidate">
            	<filter string="Created by you" name="candidate_creator" icon="terp-personal" 
			domain="['|',('create_uid','=',uid),('write_uid','=',uid)]"/>
                <field name="user_id"/>
                <field name="x_job_id" filter_domain="[('x_job_id','ilike',self)]"/>
                <field name="x_combine_name6" filter_domain="[('x_combine_name6','ilike',self)]"/>
                <field name="x_first_name"/>
			    <field name="x_last_name"/>
                <field name="x_mobile"/>
                <field name="x_phone"/>
				<field name="x_city"/>
				<field name="x_candidate_roll_no"/>
                <field name="x_ssn"/>
                <field name="x_passport_no"/>
                <field name="x_email_from"/>
                <field name="x_secondary_email"/>
			    <field name="country_id"/>
				<field name="x_sourcetype"/>
			    <field name="x_sourcename" />
                <field name="x_skill_technology"/>
				<field name="create_uid" />
				<field name="write_uid" />
                <field name="create_date" string="Created Date (From)" filter_domain="[('create_date','&gt;=',self)]" widget="calendar"/>
                <field name="create_date" string="Created Date (To)" filter_domain="[('create_date','&lt;=',self)]" widget="calendar"/>
                <separator/>
                
                <group expand="0" string="Group By...">
                    <filter string="Recruiter" domain="[]"   context="{'group_by':'user_id'}" groups='base.group_hr_manager'/>
                    <filter string="Job" domain="[]" context="{'group_by':'x_job_id'}"/>
                    <filter string="Source Name" domain="[]" context="{'group_by':'x_sourcetype'}"/>
                    <filter string="Source Type" invisible="1" domain="[]" context="{'group_by':'x_sourcename'}"/>
					<filter string="Creation Date" domain="[]" context="{'group_by':'create_date'}"/>
                </group>
           </search>
        </field>
    </record>
	
	
	 <record id="candidate_source_for_us" model="ir.actions.act_window">
        <field name="name">Candidate Profile</field>
        <field name="res_model">hr.candidate</field>
        <field name="view_type">form</field>
		 <field name="view_mode">tree,form</field>
		 <field name="view_id" ref="candidate_tree_for_us"/>
		 <field name="domain">[('x_country_sep','=','2')]</field>
		 <field name="search_view_id" ref="view_hr_applicant_creation_search_for_us"/>
		 <field name="context">{'search_default_candidate_creator': 1}</field>
            <field name="help" type="html">
              <p class="oe_view_nocontent_create">
                Click to define a new applicant.
              </p><p>
                You can create and edit the applicants here.
              </p>
            </field>
    </record>

    <record model="ir.actions.act_window.view" id="action_view_applicant_tree">
        <field name="act_window_id" ref="candidate_source_for_us"/>
        <field name="sequence" eval="1"/>
        <field name="view_mode">tree</field>
        <field name="view_id" ref="candidate_tree_for_us"/>
    </record>

       <record model="ir.actions.act_window.view" id="action_view_applicant_form">
        <field name="act_window_id" ref="candidate_source_for_us"/>
        <field name="sequence" eval="2"/>
        <field name="view_mode">form</field>
        <field name="view_id" ref="candidate_source_form_for_us"/>
    </record>
	
	<menuitem
        id="menu_hr_candidate_source_for_us" name="Add a new Candidate"
        parent="base.menu_crm_case_job_req_main" action="candidate_source_for_us"
        groups="base.group_us_user"      sequence="1"/>
		
		
		
		
	<!-- Hr applicant view -->


    </data>
</openerp>

################################################## cand_pipeline_for_us.xml ################################

<?xml version="1.0"?>
<openerp>
    <data>
  
   <!-- Hr applicant Form US view -->
    <record model="ir.ui.view" id="crm_case_form_view_job_us">
        <field name="name">hr.applicant.us</field>
        <field name="model">hr.applicant</field>
        <field name="type">form</field>
        <field name="view_mode">tree,form</field>
        <field name="arch" type="xml">
            <form string="Jobs - Recruitment Form" version="7.0">
                <header>
                    <field name="x_app_stages" invisible="1"/>
                    <field name="x_country_sep" invisible="1"/>
                    <field name="x_on_change_view_status" invisible="1"/>
                <group>
                <field name="x_view_status" attrs="{'invisible': [('x_app_stages','=',10)]}" class="view_field" string="View Stages" on_change="onchange_status(x_view_status,context)" invisible='1' />
                <field name="x_stage_status" readonly="True"  class="view_field" />
                <field name="x_candidate_id" class="view_field" attrs="{'required':[('x_app_stages','=',5)],'readonly':[('|'),('x_app_stages','in',[10,20,30,40,50,60,70,80]),('x_on_change_view_status','=',True)]}"
                    context="{'form_view_ref':'custom_hr_applicant.candidate_source_form_for_us'}"/>
                <field name="job_id" on_change="onchange_job(x_candidate_id,job_id,context)" class="view_field" attrs="{'required':[('x_app_stages','=',5)],'readonly':[('|'),('x_app_stages','in',[10,20,30,40,50,60,70]),('x_on_change_view_status','=',True)]}" domain="[('depart_id','=',2),('x_requisition_status','=',1)]" />
                </group>
				<group col="4" colspan="2">  
					<field name="x_doc_reports" attrs="{'invisible':['|',('x_is_offer_accepted','=',False),('x_app_stages','in',[5,10,20,30,40])]}" 
									class="view_field" groups="base.group_us_user"/>
								
					<button name="action_generate_reports" type="object"  groups="base.group_us_user"
                        			class="mt-left-200"  string="Generate / Attach" attrs="{'invisible':['|',('x_doc_reports','&lt;','1'),('x_app_stages','in',[5,10,20,30,40])]}"/>
				</group>
				<group col="4" colspan="2">
					<field name="x_doc_reports_ind" attrs="{'invisible':['|',('x_is_offer_accepted','=',False),('x_app_stages','in',[5,10,20,30,40])]}" 
									class="view_field" groups="base.group_row_user"/>			
					<button name="action_generate_reports_ind" type="object"  groups="base.group_row_user"
                        			class="mt-left-200" string="Generate / Attach" attrs="{'invisible':['|',('x_doc_reports_ind','&lt;','1'),('x_app_stages','in',[5,10,20,30,40])]}"/>				
				</group>
                <button name="case_cancel" string="Refuse" type="object" invisible="1"
                        states="draft,open,pending" class="oe_highlight"/>
                <field name="emp_id" invisible="1"/>
                <field name="state" invisible="1"/>
                <field name="department_id" invisible="1"/>
                <field name="x_offer_status_bool" invisible="1"/>
               
                <field name="stage_id" widget="statusbar" statusbar_colors='{"draft":"red"}' attrs="{'readonly':True}"/>
                <!--<button name="open_url_function" type="object" string="Applied Jobs" icon="{something}" help="Visit this URL in your browser"/>-->
            </header>
            <sheet attrs="{'invisible': [('x_app_stages','!=',05)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="Candidate Identified" col="4" colspan="2">
                    <field name="x_candidate_roll_no" invisible="1"/>
                    <field name="x_first_name" invisible="1"/>
                    <field name="x_last_name" invisible="1"/>
                    
                    <field name="x_candidate_identified_date" attrs="{'required':[('x_app_stages','=',05)]}" /><newline/>
                    <field name="x_candidate_identified_by" class="view_field" attrs="{'required':[('x_app_stages','=',05)]}"/><newline/>                   
                </group>
                <label for="x_candidate_identified_comments" string="Comments" />
                    
                <field name="x_candidate_identified_comments"   class="comments_width"  readonly="1" />
                
                <group>
                   <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                </group>             
                
            </sheet>
            
            <sheet attrs="{'invisible': [('x_app_stages','!=',10)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="Internal Screening" col="4" colspan="2">
                    <field name="x_candidate_roll_no" invisible="1"/>
                    <field name="x_first_name" invisible="1"/>
                    <field name="x_last_name" invisible="1"/>
                    
                    <field name="x_initial_screening_date" attrs="{'required':[('x_app_stages','=',10)]}" /><newline/>
                    <field name="x_initialscreen_created_by" class="view_field" attrs="{'required':[('x_app_stages','=',10)]}"/><newline/>
                    <field name="x_communication_rating" class="full_field_width" />
                </group>
                 <label for="x_comments" string="Comments" />
                    
                    <field name="x_comments"   class="comments_width"  readonly="1" />
                 
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
                
            </sheet>
            <sheet attrs="{'invisible': [('x_app_stages','!=',20)]}" col="4" colspan="2" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="To Client Partner">
                    
                    <field name="x_tcmg_manager_date" attrs="{'required':[('x_app_stages','=',20)]}" /><newline/>
                    <field name="x_tcmg_created_by" class="view_field" attrs="{'required':[('x_app_stages','=',20)]}" />
                    
                </group>
                <label for="x_tcmg_comments" string="Comments" />
                <field name="x_tcmg_comments"  class="comments_width"   readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
            </sheet>
            <sheet attrs="{'invisible': [('x_app_stages','!=',30)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="To Client">
                    <field name="x_submit_to_client_date" attrs="{'required':[('x_app_stages','=',30)]}"/><newline/>
                    <field name="x_client_created_by"  class="view_field" attrs="{'required':[('x_app_stages','=',30)]}"/>
                    
                </group>
                <label for="x_client_comments" string="Comments" />
                <field name="x_client_comments"   class="comments_width" readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
                
            </sheet>
            <sheet attrs="{'invisible': [('x_app_stages','!=',40)]}" >
                <div class="oe_right oe_button_box">
                    <button name="action_makeMeeting" type="object"
                        string="View Schedule Meeting" help="Schedule interview with this applicant"/>
                    <button name="get_history" string="View Stages" type="object"/>

                </div>
                <group string="Interview/Decision">
                    
                    <field name="x_interview_date" attrs="{'required':[('x_app_stages','=',40)]}" />
                    <field name="x_interview_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',40)]}" />
                    <field name = "child_ids" widget = "one2many" invisible="1"/>
                    <field name="x_shedule_meeting_link_ids"/>
                    
                </group>
                <label for="x_interview_comments" string="Comments" />
                <field name="x_interview_comments"  class="comments_width" readonly="1" />
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
            </sheet>
            <sheet attrs="{'invisible': [('x_app_stages','!=',50)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="Offered">
                    <field name="x_offer_status_date" attrs="{'required':[('x_app_stages','=',50)]}"/>
                    <field name="x_offer_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',50)]}"/><newline/>
                
                    <field name="x_is_offer_accepted" invisible="1"/>
                </group>
                <label for="x_offer_comments" string="Comments" />
                <field name="x_offer_comments"   class="comments_width" readonly="1" />
                <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />

                </group>
                
            </sheet>
            <sheet attrs="{'invisible': [('x_app_stages','!=',60)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
                <group string="Joined">
                    <field name="x_hire_candidate_report" class="field_width"/>
                    <field name="x_hire_employee_id" class="field_width" />
                    <field name="x_hire_start_date" attrs="{'required':[('x_app_stages','=',60)]}" /><newline/>
                    <field name="x_term_date" /><newline/>
                    <field name="x_hire_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',60)]}" />
                    <field name="x_join_status" class="view_field" invisible="1" />
                    <field name='x_is_employee' invisible="1"/>
                </group>
                <label for="x_hire_comments" string="Comments" />
                <field name="x_hire_comments"   class="comments_width" readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
            </sheet>
            
            <!-- exit term process-->
            <sheet attrs="{'invisible': [('x_app_stages','!=',70)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            <group string="Term Process">
                <group string="Personal Info" col="6" colspan="3">
                    <field name = "x_first_name" string="First Name"/>
                    <field name = "x_middle_name" string="Middle Name"/>
                    <field name = "x_last_name" string="Last Name" />
                </group>
                <group  col="6" colspan="3">
                    <field name = "x_employee_no"/>
                    <field name = "x_ssn"/>
                    <field name = "x_clients"/>
                </group>
                <group col="6" colspan="3">
                    <field name = "x_candidate"/>
                    <field name = "x_cjo"/>
                    <field name = "x_sjo"/>
                </group>
                    <field name = "x_street"/>
                <group  col="6" colspan="3">
                    <field name = "x_city_id"/>
                    <field name = "x_state_id"/>
                    <field name = "x_zip_codes"/>
                </group>
                <group  col="4" colspan="2">
                    <field name = "x_planned_end_date"/>
                    <field name = "x_hire_date"/>
                </group>
                <group col="4" colspan="2" string = "Work Authorization: Each of the following items (as applicable) must be returned upon separation and before issuance of final check, as allowed by law:" >
               
                    <field name ="x_desk_key"/>
                    <field name ="x_office_key"/>                                       
                    <field name ="x_office_laptop"/>
                    <field name ="x_security_pass"/>
                    <field name ="x_other_info"/>
                </group>
                <label string = "Reason for Termination" />
                    <label string="Reason for Termination: Select the types and reason for termination"/>
        
                <group string="Hired By Client:" col="4" colspan="2">
                    <field name = "x_hireby_client_technology"/>
                    <field name = "x_hireby_client_benefits"/>
                    <field name = "x_hireby_client_money"/>
                    <field name = "x_hireby_client_long_term_stability"/>
                    <field name = "x_hireby_client_other"/>
                </group>
                <group string="Permanent Position(non-contract, not as client)" col="4" colspan="2">
                    <field name = "x_permanent_pos_technology"/>
                    <field name = "x_permanent_pos_benefits"/>
                    <field name = "x_permanent_pos_money"/>
                    <field name = "x_permanent_pos_long_term_stability"/>
                    <field name = "x_permanent_pos_other"/>
                </group>
                <group string="Assignment Ended" col="4" colspan="2">
                    <field name = "x_marketable_employee"/>
                    <field name = "x_performance_issue"/>
                    <field name = "x_skillset"/>
                    <field name = "x_budgetcuts"/>
                </group>
                <group string="Competitor" col="4" colspan="2">
                    <field name = "x_competitor_technology"/>
                    <field name = "x_competitor_benefits"/>
                    <field name = "x_competitor_money"/>
                    <field name = "x_competitor_other"/>
                </group>
                <group string="other" col="4" colspan="2">
                    <field name = "x_personal_reason"/>
                    <field name = "x_customer_requested"/>
                    <field name = "x_lack_feedback"/>
                    <field name = "x_reloctor"/>
                    <field name = "x_lack_Training"/>
                </group>
                    <field name = "x_term_comments"/>
                <group col="4" colspan="2">
                    <field name = "x_employee_signature"/>
                    <field name = "x_term_process_date"/>
                </group>
           </group>
           </sheet>
            
            <!-- bottom buttons-->
            <group  attrs="{'invisible': [('x_app_stages','=',50)]}">
                        <header>
                            <button name="reject_status" string="Reject" type="object" class="oe_highlight mt-left"/>
                            <button name="onhold_status" string="On Hold" type="object" class="oe_highlight"/>
                            <button name="next_stage" string="Proceed" type="object" attrs="{'invisible': [('x_app_stages','in',[70])]}" class="oe_highlight"/>
                            <button name="case_with_emp" string="Hire And Create Employee" type="object" class="oe_highlight" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,70])]}" />
                            <button name="back_to_previous_stage" string="Back to Previous Stage" type="object" class="oe_highlight" attrs="{'invisible': [('|'),('x_app_stages','=',05),('x_stage_status','=','Joined')]}"/>
                            <button name="action_generate_reports" type="object" string="Seperate/Exit Report" class="oe_highlight"  groups="base.group_us_user" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,60,80])]}"/>
                            <button name="action_generate_reports_ind" type="object" string="Seperate / Exit Report" class="oe_highlight"  groups="base.group_row_user" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,60,80])]}"/>
                        </header>
            </group>
            <group attrs="{'invisible': [('x_app_stages','in',[5,10,20,30,40,60,70,80])]}">
                        <header>
                            <button name="offer_decline" string="Offer Rejected" type="object" class="oe_highlight mt-left" />
                            <button name="Offer_accepted" string="Offer Accepted " type="object" class="oe_highlight " />
                            <button name="offer_withdrawn" string="Offer Withdrawn" type="object" class="oe_highlight" />
                            <button name="next_stage" string="Proceed" type="object" class="oe_highlight" />
                            <button name="back_to_previous_stage" string="Back to Previous Stage" type="object" class="oe_highlight" />
                            <!--<button name="cron_job" string="cron job" type="object" class="oe_highlight" />-->
                        </header>
            </group>
            
            <div class="oe_chatter">
                <field name="message_follower_ids" widget="mail_followers"/>
                <field name="message_ids" widget="mail_thread"/>
            </div>
          </form>
            
        </field>
    </record>
    
    <!-- tree view of applicant creation -->
    <record model="ir.ui.view" id="crm_case_tree_view_job_us">
        <field name="name">Applicants US</field>
        <field name="model">hr.applicant</field>
        <field name="arch" type="xml">
            <tree string="Applicants"  fonts="bold:message_unread==True"
            colors="green:x_stages_status_report=='Offer Accepted';purple:x_stages_status_report=='On Hold';red:x_stages_status_report=='Offer Declined';red:x_stages_status_report=='Rejected'" >
                <button string="View Candidate" icon="terp-personal+" name="go_to_candidate" type="object"/>
                <field name="x_job_status2" invisible="1" />
                <field name="x_combine_name3"  invisible="1"/>
                <field name="x_first_name" />
                <field name="x_last_name" />
                <field name="x_candidate_roll_no" />
                <field name="x_cli_id"/>
                <field name="x_cli_req"/>
                <field name="x_job" string="HTC Job Id"/>
                <field name="x_job_title" string="HTC Job Title"/>
                
                <field name="stage_id" invisible="1"/>
                <field name="x_stages_status_report" invisible="1" string="Stage status"/>
                <field name="message_unread" invisible="1"/>
                <field name="partner_name" invisible="1"/>
                <field name="title_action" invisible="context.get('invisible_next_action', True)"/>
                <field name="date_action" invisible="context.get('invisible_next_date', True)"/>
                <field name="response" invisible="1"/>
                <field name="availability" invisible="1"/>
                <field name="department_id" invisible="context.get('invisible_department', True)"/>
                <field name="state" invisible="1"/>
                
                <field name="x_prog_candidate_identified" widget="progressbar" />
                <field name= "x_prog_initial" widget="progressbar"/>
                <field name= "x_prog_to_cli_part" widget="progressbar"/>
                <field name= "x_prog_to_cli" widget="progressbar"/>
                <field name= "x_prog_interview" widget="progressbar" string="Interview"/>
                <field name= "x_prog_off" widget="progressbar" string="Decision"/>
                <field name= "x_prog_join" widget="progressbar"/>
                <field name= "x_prog_term" widget="progressbar"/>
                <field name="create_date"/>
                <field name="create_uid"/>
				<field name="write_date"/>
				<field name="write_uid"/>
            </tree>
        </field>
    </record>
    
    <!-- applicant search filter -->
    
    <record id="view_crm_case_jobs_filter_us" model="ir.ui.view">
        <field name="name">Jobs - Recruitment Search US</field>
        <field name="model">hr.applicant</field>
        <field name="arch" type="xml">
            <search string="Search Jobs">
                <field name="partner_name" filter_domain="['|','|',('name','ilike',self),('partner_name','ilike',self),('email_from','ilike',self)]" string="Subject / Applicant"/>
                <filter string="Unread Messages" name="message_unread" domain="[('message_unread','=',True)]"/>
                <separator/>
                <field name="x_date_from" string="From Date" filter_domain="[('create_date','&gt;=',self)]"/>
                <field name="x_date_to" string="To Date" filter_domain="[('create_date','&lt;=',self)]"/>

                <filter string="Candidates in Open Jobs" domain="[('job_id.x_requisition_status','=',1)]" help="Open jobs candidate list"/>
                <filter string="In Process" domain="[('stage_id','in',[05,10,20,30,40])]" help="Applicants In Process"/>
                <filter string="Candidate Identified" domain="[('stage_id','=',05)]" help="Candidate Identified"/>
                <filter string="Internal Screening" domain="[('stage_id','=',10)]" help="Internal Screening Status "/>
                <filter string="To Client Partner" domain="[('stage_id','=',20)]" help="To Client Partner Status"/>
                <filter string="To Client" domain="[('stage_id','=',30)]" help="To Client Status"/>
                <filter string="Interview/Decision" domain="[('stage_id','=',40)]" help="Interview/Decision Status"/>
                <filter string="Offered" domain="[('stage_id','=',50)]" help="Offered Status"/>
                <filter string="Joined" domain="[('stage_id','=',60)]" help="Joined Status"/>
                <filter string="Termed" domain="[('stage_id','=',70)]" help="Termed Status"/>
                <separator/>
                <filter string="Unassigned Recruitments" invisible="1" domain="[('user_id','=',False)]" help="Unassigned Recruitments"/>
                <separator/>
                <filter string="Next Actions" context="{'invisible_next_action':False, 'invisible_next_date':False}"
                    domain="[('date_action','&lt;&gt;',False)]" help="Filter and view on next actions and date" invisible="1"/>
                <field name="job_id"/>
                <field name="x_combine_name3" filter_domain="[('x_combine_name3','ilike',self)]"/>
                <field name="x_candidate_id" filter_domain="[('x_candidate_id','ilike',self)]"/>
                <field name="x_candidate_id" filter_domain="[('x_candidate_id.x_email_from','ilike',self)]" string="E-mail"/>
                <field name="x_candidate_id" filter_domain="[('x_candidate_id.x_mobile','ilike',self)]" string="Mobile"/>
                <field name="department_id"/>
                <field name="user_id"/>
                <field name="x_first_name" />
                <field name="x_last_name" />
                <field name="x_candidate_roll_no" />
                <field name="x_cli_id"/>
                <field name="x_cli_req"/>
                <field name="x_job"/>
                <field name="x_job_title"/>
                <field name="create_date" string="Created Date (From)" filter_domain="[('create_date','&gt;=',self)]" widget="calendar"/>
                <field name="create_date" string="Created Date (To)" filter_domain="[('create_date','&lt;=',self)]" widget="calendar"/>

                
                <filter string="Created by Me" name="type_person" icon="terp-personal" domain="['|',('create_uid','=',uid),('write_uid','=',uid)]"/>
                
                <separator/>
                <field name="categ_ids"/>
                <group expand="0" string="Group By...">
                    <filter string="Candidate" domain="[]"  context="{'group_by':'x_candidate_id'}"/>
                    <filter string="Responsible" domain="[]" invisible="1"  context="{'group_by':'user_id'}"/>
                    <filter string="Department" domain="[]" invisible="1" context="{'group_by':'department_id'}"/>
                    <filter string="Job ID" domain="[]" context="{'group_by':'x_job'}"/>
                    <filter string="Job Title" domain="[]" context="{'group_by':'x_job_title'}"/>
                    <filter string="BU" domain="[]" context="{'group_by':'x_group_bu'}"/>
                    <filter string="Recruiter" domain="[]" context="{'group_by':'x_candidate_identified_by'}" groups='base.group_hr_manager'/>
                    <filter string="Client" domain="[]" context="{'group_by':'x_cli_id'}"/>
                    <filter string="Client Request ID" domain="[]" context="{'group_by':'x_cli_req'}"/>
                    <filter string="Availability" invisible="1" domain="[]" context="{'group_by':'availability'}"/>
                    <filter string="Stage" domain="[]" context="{'group_by':'stage_id'}"/>
                    <filter string="Source" invisible="1" domain="[]" context="{'group_by':'source_id'}"/>
                    <filter string="Creation Date" domain="[]" context="{'group_by':'create_date'}"/>
                </group>
           </search>
        </field>
    </record>
    
    <!-- search filter end -->
    
    <!-- applicant act window -->

    <record model="ir.actions.act_window" id="crm_case_categ0_act_job_us">
            <field name="name">Candidate Pipeline </field>
            <field name="res_model">hr.applicant</field>
            <field name="view_mode">tree,form,graph</field>
            <field name="view_id" eval="False"/>
            <field name="search_view_id" ref="view_crm_case_jobs_filter_us"/>
            <field name="domain">[('x_country_sep','=','2')]</field>
            <field name="context">{'search_default_type_person': 1}</field>
            <field name="help" type="html">
              <p class="oe_view_nocontent_create">
                Click to add a new job applicant.
              </p><p>
                OpenERP helps you track applicants in the recruitment
                process and follow up all operations: meetings, interviews, etc.
              </p><p>
                If you setup the email gateway, applicants and their attached
                CV are created automatically when an email is sent to
                jobs@yourcompany.com. If you install the document management
                modules, all resumes are indexed automatically, so that you can
                easily search through their content.
              </p>
            </field>
        </record>



        <record model="ir.actions.act_window.view" id="action_hr_sec_tree_view_act_job_us">
            <field name="sequence" eval="1"/>
            <field name="view_mode">tree</field>
            <field name="view_id" ref="crm_case_tree_view_job_us"/>
            <field name="act_window_id" ref="crm_case_categ0_act_job_us"/>
        </record>

        <record model="ir.actions.act_window.view" id="action_hr_sec_form_view_act_job_us">
            <field name="sequence" eval="2"/>
            <field name="view_mode">form</field>
            <field name="view_id" ref="crm_case_form_view_job_us"/>
            <field name="act_window_id" ref="crm_case_categ0_act_job_us"/>
        </record>

    <menuitem
            name="Candidate Pipeline"
            parent="base.menu_crm_case_job_req_main"
            id="menu_crm_case_categ0_act_job_us" 
            action="crm_case_categ0_act_job_us"
            groups="base.group_us_user"
            sequence="6"/>
            

    </data>
</openerp>

################################################### hr_recruitment_ext.py #######################################
#-*- coding: utf-8 -*-
from openerp.osv import fields, osv
from openerp import tools
from openerp.addons.hr_recruitment import hr_recruitment
from openerp.addons.decimal_precision import decimal_precision as dp
from datetime import datetime,timedelta,date
from document.content_index import cntIndex
from openerp.tools.misc import ustr
import uuid
from openerp.tools.translate import _
import base64
import re
from openerp import netsvc
import time
import socket
import os,sys
import xml.etree.ElementTree as ET
import httplib 
import logging


# Static Data initialization block 
DATE=[
     ('01','01'),
     ('02','02'),
     ('03','03'),
     ('04','04'),
     ('05','05'),
     ('06','06'),
     ('07','07'),
     ('08','08'),
     ('09','09'),
     ('10','10'),
     ('11','11'),
     ('12','12'),
     ('13','13'),
     ('14','14'),
     ('15','15'),
     ('16','16'),
     ('17','17'),
     ('18','18'),
     ('19','19'),
     ('20','20'),
     ('21','21'),
     ('22','22'),
     ('23','23'),
     ('24','24'),
     ('25','25'),
     ('26','26'),
     ('27','27'),
     ('28','28'),
     ('29','29'),
     ('30','30'),
     ('31','31'),
  
     ]

EXPERIENCESTATUS=[('FRESHER','FRESHER'),('EXPERIENCED','EXPERIENCED')]

MONTH=[
      ('1','Jan'),
    ('2',  'Feb'),
    ('3',  'Mar'),
    ('4',  'Apr'),
    ('5',  'May'),
    ('6',  'Jun'),
    ('7',  'Jul'),
     ('8', 'Aug'),
    ('9',  'Sep'),
    ('10', 'Oct'),
    ('11', 'Nov'),
    ('12', 'Dec'),
   
     ]


EXPERIENCEDSTATUS=[('FRESHER','FRESHER'),('EXPERIENCED','EXPERIENED')]
AVAILABLE_AUTHORIZATION = [
    ('NA', 'NA'),
    ('H1', 'H1'),
    ('H4', 'H4'),
    ('B1/B2', 'B1/B2'),
    ('L1', 'L1'),
    ('L2', 'L2'),
    ('J1', 'J1'),
    ('US Citizen', 'US Citizen'),
    ('PR', 'PR'),
    ('EAD-H1', 'EAD-H1'),
    ('EAD-L1', 'EAD-L1'),
    ('EAD-L2', 'EAD-L2'),
    ('EAD-OPT', 'EAD-OPT'),
    ('EAD-CPT', 'EAD-CPT'),
    ('TN Visa', 'TN Visa'),
]


CURRENCY=[
          
    ('AED', 'AED (د.إ)'),
    ('AFN', 'AFN Afs'),
    ('AUD', 'AUD $'),
    ('AZN', 'AZN ман'),
    ('BSD', 'BSD $'),
    ('BT', 'BT ()'),
    ('BZD', 'BZD BZ$'),
    ('ECS', 'ECS S/.'),
     ('EUR', 'EUR €'),
     ('GBP', 'GBP £'),
     ('GGP', 'GGP £'),
     ('GHS', 'GHS GH₵'),
     ('GYD', 'GYD $'),
     ('IMP', 'IMP £'),
    ('INR', 'INR ₹'),   
    ('JEP', 'JEP £'),
    ('JPY', 'JPY ¥'),
    ('KYD', 'KYD $'),
    ('MGA', 'MGA Ar'),
    ('MUR', 'MUR ₨'),
    ('MYR', 'MYR RM'),
    ('OMR', 'OMR (﷼)'),
    ('QAR', 'QAR (﷼)'),
    ('RSD', 'RSD Дин.'),
    ('SDG', 'SDG (ملّيم)'),
    ('SGD', 'SGD $'),
    ('SRD', 'SRD $'),
    ('STD', 'STD $'),
    ('USD', 'USD $'),
    ('USN', 'USN $'), 
    ('VEF', 'VEF Bs'),
          
]
PAYBY=[
    ('Bi-Weekly', 'Bi-Weekly'),
    ('Day', 'Day'),
    ('Hour', 'Hour'),
    ('Month', 'Month'),
    ('Quarterly', 'Quarterly'),
    ('Week', 'Week'),
    ('Year', 'Year'),
]
Candidate_Reported=[
                    ('Yes','Yes'),
                    ('No','No'),
                    ]

BACKGROUND_CHECK=[
                    ('Yes','Yes'),
                    ('No','No'),
                    ]

YESORNO=[
                    ('Yes','Yes'),
                    ('No','No'),
                    ]

CANDIDATE_FUNCTION=[
                ('IT','IT'),
                ('ITES','ITES'),
                ('PROJECTS','PROJECTS'),
                ('OTHERS','OTHERS'),
                
                ]

RESIDENT_STATUS=[
                ('RESIDENT','Resident'),
                ('NON_RESIDENT','Non-Resident'),
                
                ]

CANDIDATE_STATUS=[
                ('0','New'),
                ('1','On Assignment'),
                ('2','Off Assignment'),
                ]
Rating=[
                      ('1','1'),
                      ('2','2'),
                      ('3','3'),
                      ('4','4'),
                      ('5','5'),
                      ]

JOIN_STATUS=[
            ('1','Joined'),
            ]
INTERVIEW=[
                      ('Interview 1','Interview 1'),
                      ('Interview 2','Interview 2'),
                      ('Interview 3','Interview 3'),
                      ('Interview 4','Interview 4'),
                      ('Interview 5','Interview 5'),
                      ('Interview 6','Interview 6'),
                      ('Interview 7','Interview 7'),
                      ('Interview 8','Interview 8'),
                      
                      ]

APP_STATUS=[
          (05,'Candidate Identified'),
          (10,'Internal Screening'),
          (20,'To Client Partner'),
          (30,'To Client'),
          (40,'Interview / Decision'),
          (50,'Offer Status'),
          (60,'Joined'),
          (70,'Term'),          
            ]

YEAR=[
('1950','1950'),('1951','1951'),('1952','1952'),('1953','1953'),('1954','1954'),('1955','1955'),('1956','1956'),('1957','1957'),('1958','1958'),('1959','1959'), 
('1960','1960'),('1961','1961'),('1962','1962'),('1963','1963'),('1964','1964'),('1965','1965'),('1966','1966'),('1967','1967'),('1968','1968'),('1969','1969'),
('1970','1970'),('1971','1971'),('1972','1972'),('1973','1973'),('1974','1974'),('1975','1975'),('1976','1976'),('1977','1977'),('1978','1978'),('1979','1979'),
('1980','1980'),('1981','1981'),('1982','1982'),('1983','1983'),('1984','1984'),('1985','1985'),('1986','1986'),('1987','1987'),('1988','1988'),('1989','1989'),
('1990','1990'),('1991','1991'),('1992','1992'),('1993','1993'),('1994','1994'),('1995','1995'),('1996','1996'),('1997','1997'),('1998','1998'),('1999','1999'),
('2000','2000'),('2001','2001'),('2002','2002'),('2003','2003'),('2004','2004'),('2005','2005'),('2006','2006'),('2007','2007'),('2008','2008'),('2009','2009'),
('2010','2010'),('2011','2011'),('2012','2012'),('2013','2013'),('2014','2014'),('2015','2015'),('2016','2016'),('2017','2017'),('2018','2018'),('2019','2019'),
('2020','2020'),('2021','2021'),('2022','2022'),('2023','2023'),('2024','2024'),('2025','2025'),('2026','2026'),('2027','2027'),('2028','2028'),('2029','2029'),
('2030','2030'),('2031','2031'),('2032','2032'),('2033','2033'),('2034','2034'),('2035','2035'),('2036','2036'),('2037','2037'),('2038','2038'),('2039','2039'),
('2040','2040'),('2041','2041'),('2042','2042'),('2043','2043'),('2044','2044'),('2045','2045'),('2046','2046'),('2047','2047'),('2048','2048'),('2049','2049'),
('2050','2050'),

     
  
     ]
COMMUNICATION_RATING=[
                      ('1','Speaks with limited fluency and irregular grammar besides carries a distinct accent'),
                      ('2','Speaks with comfortable fluency and agreeable grammar however has a noticeable accent'),
                      ('3','Speaks with acceptable finesse/ accurate grammar and has no accent'),
                      ('4','Speaks with lots of polish / finesse. Demonstrates confidence in presenting the credentials with ease.'),
                      ]


JOB_MOTIVATOR_APPLICABLE=[
                            ('Position Advancement', 'Position Advancement'),
                            ('Attractive Benefits/Compensation', 'Attractive Benefits/Compensation'),
                            ('Relocation', 'Relocation'),
                            ('Challenging Position', 'Challenging Position'),
                            ('Easy Commute', 'Easy Commute'),
                            ('Established Company/Brand name', 'Established Company/Brand name'),
                            ('Relocating to Home town', 'Relocating to Home town'),
                            
                            ('Flexible working hours', 'Flexible working hours'),
                            ('Limited Travel', 'Limited Travel'),
                            ('No Travel (Onsite)', 'No Travel (Onsite)'),
                            ('Onsite Opportunities', 'Onsite Opportunities'),
                            ('Temporary work/Part Time', 'Temporary work/Part Time'),
                            ('Permanent position', 'Permanent position'),
                            ('Sibling/Friend/Relative/Spouse with HTC', 'Sibling/Friend/Relative/Spouse with HTC'),
                        ]

DOC_REPORTS=[
         
          (4,'New Hire Authorization US - .odt'),
          (5,'Offer Letter Template For w 2 hourly With No Benefits - .odt'),
          (6,'Offer Letter Template For w2 Salaried - .odt'),
          (7,'Offer Letter For H1 To H1 Visa - .odt'),
          (8,'Employee Agreement Form For US citizens - .odt'),
          (9,'Employee Agreement For H1 To H1 Visa And L1 To H1 Visa - .odt'),
          (10,'HTC Addendum One Time Bonus - .odt'),
          (11,'HTC Addendum Relocation Allowance - .odt'),
          (12,'HTC Addendum Relocation Expenses - .odt'),
          (13,'HTC Addendum Sign On Bonus - .odt'),
          (14,'HTC Addendum Utilization Bonus - .odt'),
          (15,'HTC Addendum SF Notice Period - .odt'),
          (16,'Separation/Exit US - .odt'),
          (17,'Employee Agreement For EAD - .odt'),
          (18,'Offer Letter For EAD - .odt'),  
          
            ]

DOC_REPORTS_IND=[
          (1,'Preliminary Interview - .odt'),
          (2,'Technical Evaluation - .odt'),
          (3,'New Hire Authorization - .odt'),
          (4,'Separation/Exit - .odt'),
          
            ]

HIRE_TYPE=[
           ('W2 Salaried','W2 Salaried'),
           ('W2 Hourly','W2 Hourly'),
           ('C2C','C2C'),
           ('1099','1099'),
           ('Re-hire','Re-hire'),
           ]

REQ_TYPE=[
           ('FTE','FTE'),
           ('Contract','Contract'),
           ('Consultant','Consultant'),
           ('Internship','Internship'),
           ('Re-hire','Re-hire'),
           ]

######################################### To keep track of rchilly server request detail######################################

class rchilly(osv.osv):
    _name = "rchilly"
    _description = "rchilly"
    _columns = {
                'user_id': fields.many2one('res.users', 'Users'),
                'login':fields.char('Login name', size=1024,),
                'request_date':fields.char("Date"),
                'login_host':fields.char('System Name', size=1024,),
                'login_ip':fields.char('Ip Address', size=1024,),
               }
    
        
rchilly()

###############################################Rchilly request count ########################################################
class rchilly_count(osv.osv):
    _description="Rchilly Count"
    _name = 'rchilly.count'
    _columns = {
        'request_count':fields.integer("Rchilly Request Count"),
    }
rchilly_count()

#############################################################################################################################



############################################ class for Terminating  employees #######################################################
class terminate_employee(osv.osv):
    _name = 'hr.terms'
    _columns = {
        'hr_applicant_id':fields.many2one('hr.applicant','Hr applicant'),
        'x_candidate_id': fields.many2one('hr.candidate', 'Candidate Name',required=True),
        'job_id': fields.many2one('hr.job', 'Applied Job'),
        'x_first_name':fields.char("First"),
        'x_middle_name':fields.char("Middle"),
        'x_last_name':fields.char("Last"),
        'x_city':fields.char("City"),
        'x_candidate':fields.char("Candidate ID"),
        'x_hireby_client_technology':fields.boolean("Better Technology"),
        'x_hireby_client_benefits':fields.boolean("Improved Benefits"),
        'x_hireby_client_money':fields.boolean("More Money"),
        'x_hireby_client_long_term_stability':fields.boolean("Long Term Stability"),
        'x_hireby_client_other':fields.boolean("Other"),
        
        'x_permanent_pos_technology':fields.boolean("Better Technology"),
        'x_permanent_pos_benefits':fields.boolean("Improved Benefits"),
        'x_permanent_pos_money':fields.boolean("More Money"),
        'x_permanent_pos_long_term_stability':fields.boolean("Long Term Stability"),
        'x_permanent_pos_other':fields.boolean("Other"),

        'x_competitor_technology':fields.boolean("Better Technology"),
        'x_competitor_benefits':fields.boolean("Improved Benefits"),
        'x_competitor_money':fields.boolean("More Money"),
        'x_competitor_long_term_stability':fields.boolean("Long Term Stability"),
        'x_competitor_other':fields.boolean("Other"),

        'x_marketable_employee':fields.boolean("Marketable Employee-Unable to find new assignment"),
        'x_performance_issue':fields.boolean("Not re-marketing due to performance issue"),
        'x_skillset':fields.boolean("Not re-marketing due to skill set"),
        'x_budgetcuts':fields.boolean("Budget Cuts"),
        'x_personal_reason':fields.boolean("Personal Reason"),
        'x_customer_requested':fields.boolean("Customer Requested"),
        'x_lack_feedback':fields.boolean("Lack of Feedback"),
        'x_reloctor':fields.boolean("Relocator"),
        'x_lack_Training':fields.boolean("Lack Of Training"),
        'x_security_pass':fields.boolean("Security Pass"),
        'x_office_laptop':fields.boolean("Computer(Laptop)"),
        'x_office_key':fields.boolean("Office Keys"),
        'x_desk_key':fields.boolean("File/Desk keys"),
        'x_other_info':fields.boolean("Other Info"),
        'x_state_id':fields.char("State"),
        'x_employee_no':fields.char("Employee No"),
        'x_city_id':fields.char("City"),
        'x_cjo':fields.char("CJO"),
        'x_sjo':fields.char("SJO"),
        'x_street':fields.char("Street"),
        'x_zip_codes':fields.char("Zip-Code"),
        'x_ssn':fields.char("Last 4 digits of SSN", size=128),
        'x_candidate_id':fields.char("Candidate ID"),
        'x_clients':fields.char("Client"),
        'x_comments':fields.text("Comments"),
        'x_employee_signature':fields.char("Employee Signature(Optional)"),
        'x_term_process_date':fields.date("Date"),
        'x_planned_end_date': fields.date('Planned End Date'),
        'x_hire_date': fields.date('Hire Date'),
        }
    
    def act_back_to_hire_status(self, cr, uid, ids, context):
        
        applicant = self.browse(cr, uid, ids[0], context=context)
        return {'type': 'ir.actions.act_window',
                 'res_model': 'hr.applicant',
                 'src_model': 'hr.offers',
                 'view_mode': 'form',
                 'target': 'current',
                 'res_id':applicant.hr_applicant_id.id,
                 }


terminate_employee()

####################################################################################################################################

############################### Offer Terms to keep track of Offer ################################################################
class offer_terms(osv.osv):
    _name='hr.offer.terms'
    _columns = {
        
        'hr_applicant_id':fields.many2one('hr.applicant','Hr applicant'),
        'x_candidate_id':fields.many2one('hr.candidate','Candidate Name'),
        'jod_id':fields.many2one('hr.job','Job ID'),      
        'is_experienced':fields.selection(EXPERIENCEDSTATUS,'Is the candidate fresher or experienced?'),
        'x_planned_start_date': fields.date('Planned Start Date',),
        'x_planned_end_date': fields.date('Planned End Date'),
        'x_req_type':fields.selection(REQ_TYPE,"Hire Type",size=256),
        'x_title_offered':fields.char('Title Offered', size=512,),
        'x_offer_current_salary':fields.integer('Current Salary'),       
        'x_offer_cur_salary_currency': fields.selection(CURRENCY,"Salary Currency"),
        'x_offer_cur_salary_payby': fields.selection(PAYBY,"Salary Pay By"),
        'x_offer_expected_salary':fields.integer('Expected Salary'),       
        'x_offer_exp_salary_currency': fields.selection(CURRENCY,"Expected Currency"),
        'x_offer_exp_salary_payby': fields.selection(PAYBY,"Expected Payby"),
        'x_offer_base_salary':fields.integer('Offered Salary'),       
        'x_offer_base_salary_currency': fields.selection(CURRENCY,"Base Currency"),
        'x_offer_base_salary_payby': fields.selection(PAYBY,"Base Payby"),
        'x_offer_percentage_hike':fields.integer('Percentage Hike'), 
        'x_offer_joining_bonus':fields.integer('Joining Bonus'),  
        'x_offer_joining_bonus_currency': fields.selection(CURRENCY,"Bonus Currency"),
        'x_offer_relocation_payment':fields.integer('Relocation Assistance'),  
        'x_offer_relocation_payment_currency': fields.selection(CURRENCY,"Relocation Payment Currency"),
        'x_offer_referral_bonus':fields.integer('Referral Bonus'),  
        'x_offer_referral_bonus_currency': fields.selection(CURRENCY,"Referral Currency"),
        'x_offer_special_payment':fields.integer('Special Payment'),
        'x_offer_special_payment_desc':fields.char('Special Payment Description', size=512),  
        'x_offer_special_payment_currency': fields.selection(CURRENCY,"Special Payment Currency"),
        'x_offer_comments':fields.text('Offer Accepted Comments'),
        'x_current_salary_char':fields.char('Current Salary in Text',size=256),
        'x_desired_salary_char':fields.char('Desired Salary in Text',size=256),
    #newly added fields
        #~ 'x_offer_attachment':fields.binary('Document Upload',required=True), 
        'x_offer_comments': fields.text('Offer Comments'),
        
        'x_hire_type':fields.selection(HIRE_TYPE,"Hire Type"),
        'x_bill_rate':fields.integer('Bill Rate'), 
        'x_bill_rate_currency': fields.selection(CURRENCY,"Bill Rate Currency"),
        'x_retension_bonus':fields.integer('Retention Bonus'), 
        'x_retension_bonus_currency': fields.selection(CURRENCY,"Retention Bonus Currency"),
        'x_lca_wage':fields.integer('LCA Wage'), 
        'x_lca_wage_currency': fields.selection(CURRENCY,"LCA Wage Currency"),
        'x_utility_bonus':fields.integer('Utility Bonus'), 
        'x_utility_bonus_currency': fields.selection(CURRENCY,"Utility Bonus Currency"),
        'x_hourly':fields.integer('Hourly'), 
        'x_hourly_currency': fields.selection(CURRENCY,"Hourly Currency"),
        'x_benefits':fields.boolean('Benefits'),
        'x_proof_of_insurance':fields.char('Proof of Insurance',size=256),
        'x_tax':fields.boolean('Tax'),
        'x_sign_on_date': fields.date('Sign By Date'),
        'x_semi_monthly':fields.float('Semi_Monthly'), 

        }
    def act_back_to_offer_term(self, cr, uid, ids, context):

        view_row_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'hr_recruitment', 'crm_case_form_view_job')
        view_us_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'custom_hr_applicant', 'crm_case_form_view_job_us')
        view_us_id = view_us_ref and view_us_ref[1] or False
        view_row_id = view_row_ref and view_row_ref[1] or False

        offers = self.browse(cr, uid, ids[0], context=context)
        cr.execute("select coalesce(count(id),0) from designation where lower(designation_name) = %s",(offers.x_title_offered.lower().strip(),))
        rec = cr.fetchone()
        if rec[0]<=0:
            self.pool.get('designation').create(cr,uid,{'code':'','designation_name':offers.x_title_offered.lower().strip()})
            
        applicant=self.pool.get('hr.applicant').browse(cr,uid,offers.hr_applicant_id.id,context)
        stage_status_updated= applicant.stage_id.name+': Offer Accepted'
        update_dict={'x_stages_status_report':'Offer Accepted','x_stage_status' : stage_status_updated,'x_is_offer_accepted':True, 'x_prog_off':100.00,'is_offer_accept':True, 'x_doc_reports':False}
            #~ candidates=self.pool.get('hr.candidate').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
        #~ cand = candidates[0]
        cand = applicant.x_candidate_id.id
        candidate=self.pool.get('hr.candidate').browse(cr,uid,cand,context)
        self.pool.get('hr.applicant').write(cr,uid,applicant.id,update_dict,context)
        
        jobs=self.pool.get('hr.job').search(cr,uid,[('x_job_title','=',applicant.x_job_title)])
        job_id = jobs[0]
        job=self.pool.get('hr.job').browse(cr,uid,job_id,context)
        #~ self.pool.get('hr.applicant').action_generate_reports(cr, uid,[offers.hr_applicant_id.id])
        #~ cr.execute('''  
                    #~ select documents from offer_documents_stage_mapping where stage_id = 50       
                    #~ ''' )
                    
        #~ data = cr.fetchall()
        
        data = []
        if applicant.x_country_sep == '2':      
            if offers.x_hire_type == 'W2 Salaried':
                data.append((6))
            elif offers.x_hire_type == 'W2 Hourly':
                data.append((5))
            if offers.x_retension_bonus:
                data.append((10))
            if offers.x_offer_relocation_payment:
                data.append((11))
                data.append((12))
            if offers.x_offer_joining_bonus:
                data.append((13))
            if offers.x_utility_bonus:
                data.append((14))
            if job.x_client_id.id == 928:
                data.append((15))
            if candidate.x_work_authorization == 'H1':
                data.append((9))
                data.append((7))
            elif candidate.x_work_authorization == 'US Citizen': 
                data.append((8))
            elif candidate.x_work_authorization == 'EAD-CPT':
                data.append((17))
                data.append((18))
            elif candidate.x_work_authorization == 'EAD-OPT':
                data.append((17))
                data.append((18))
            elif candidate.x_work_authorization == 'EAD-L2':
                data.append((17))
                data.append((18))
            elif candidate.x_work_authorization == 'EAD-L1':
                data.append((17))
                data.append((18))
            elif candidate.x_work_authorization == 'EAD-H1':
                data.append((17))
                data.append((18))
            #~ data = [(5), (6), (7), (18)]    
            #~ raise osv.except_osv('Invalid Year', 'Please enter a valid Year')
            value = {'data':data,'ids':offers.hr_applicant_id.id}
            self.pool.get('hr.applicant').action_auto_generate_reports(cr, uid,value,context=None)
    
            return self.pool.get('hr.applicant').action_generate_reports(cr, uid,[offers.hr_applicant_id.id])
        else:
            return {'type': 'ir.actions.act_window',
            'res_model': 'hr.applicant',
            'src_model': 'hr.offer.terms',
            'view_mode': 'form',
            'view_id': view_us_id if applicant.x_country_sep == '2' else view_row_id,
            'target': 'current',
            'res_id':offers.hr_applicant_id.id,
     }

    def onchange_offer_base_sal(self, cr, uid, ids, pay_by, off_salary, context=None):
        cal_sal=0.0
        if pay_by == 'Year' and off_salary:
            cal_sal= off_salary / 24.0
        return {'value':{'x_semi_monthly':cal_sal or 0.0}}


    def onchange_offer_sal_pay_by(self, cr, uid, ids, pay_by, off_salary, context=None):
        cal_sal=0.0
        if pay_by == 'Year' and off_salary:
            cal_sal= off_salary / 24.0
        return {'value':{'x_semi_monthly':cal_sal or 0.0}}

#     def _onchange_offer_date(self,cr,uid,ids,context=None):
#         for fd in self.browse(cr, uid, ids, context=context):
#             if fd.x_planned_end_date:
#                 if fd.hr_applicant_id.job_id.x_job_post_start:
#                     if fd.hr_applicant_id.job_id.x_job_post_start < fd.x_planned_start_date < fd.x_planned_end_date:
#                         return True
#                     else:
#                         #~ raise osv.except_osv(_('Input Error!'), _('End date should be greater than start date'))
#                         return False
#                 elif fd.x_planned_start_date < fd.x_planned_end_date:
#                     return True
#                 else:
#                     return False
#             elif fd.hr_applicant_id.job_id.x_job_post_start and fd.x_planned_start_date:
#                 if fd.hr_applicant_id.job_id.x_job_post_start < fd.x_planned_start_date:
#                     return True
#                 else:
#                     return False
#             return True
#                     
#     _constraints = [
#         (_onchange_offer_date, 'Error!\n Please Check Planned Start date, Planned end date and Job Post Start Date ', ['Planned Start Date','Planned End Date','Job Post Start Date'])]


    def hike_percentage(self, cr, uid, ids, cur_sal, base_sal, context=None):
        if cur_sal and base_sal:
            hike = ((cur_sal - base_sal)/float(base_sal))*100.0
        return {'value':{'x_offer_percentage_hike':hike or 0}}

offer_terms()

################################################# Candidate source to apply to the job###########################################
class Source(osv.osv):
    _name = 'res.source'
    _description = 'Source'
    _columns = {
        'name': fields.char('Source Name', size=124,
            help='The source name ', required=True, translate=True),
        'code': fields.char('source Code', size=2)
            
    }
    
source = Source

################################################ Type of Source#################################################################

class Sourcetype(osv.osv):
    _description="Source Type"
    _name = 'res.source.sourcetype'
    _columns = {
        'source_id': fields.many2one('res.source', 'Source',required=True),
        'name': fields.char('Source Type Name', size=64, required=True), 
    }

source_type=Sourcetype

################################################ To have multiple interviews for a same candidate ############################
class hr_applicant_interview(osv.osv):
    
    _name = 'hr.applicant.interview'
    _columns = {
        'x_inter_number':fields.selection(INTERVIEW,"Interview"),
        'x_partner_ids': fields.many2many('res.partner','partner_id',
            string='Attendees'),
        'x_inter_date':fields.datetime('Interview Date'),         
        'x_inter_skill_rating':fields.selection(Rating,"Skill Rating"),
        'x_inter_comm_rating':fields.selection(COMMUNICATION_RATING,"Communication Rating"),
        'x_inter_comments':fields.text('Comments',size=300),
        'parent_id': fields.many2one('hr.applicant', 'Parent Category'),
        }
hr_applicant_interview()

############################################## To keep Track of Qualification history #########################################
   
class hr_applicant_qualification(osv.osv):
    _name = 'hr.applicant.qualification'
    _rec_name='x_degree'
    _columns = {
        'x_degree': fields.char('Degree(s)'),
        'x_course_name':fields.char("Major Subjects"),
        'x_percentage':fields.char('Percentage / Grade',size=512),
        'x_edu_month': fields.selection(MONTH,"Month of Graduation"),
        'x_edu_year': fields.selection(YEAR,"Year of Graduation"),
#         'x_yr_passing':fields.integer('Year Of passing '),
        'x_university':fields.char("University/ Institution"),
        'parent_id_qual': fields.many2one('hr.candidate', 'Parents Category'),
        }
    
    def create(self, cr, uid, vals, context=None): 
        
        if 'x_percentage' in vals:
            if vals['x_percentage']:
                self.onchange_percentage(cr, uid, [], vals['x_percentage'])
        if 'x_edu_year' in vals:
            if vals['x_edu_year']:
                self.onchange_year(cr, uid, [], vals['x_edu_year'])
        return super(hr_applicant_qualification, self).create(cr,uid,vals,context=context)
    
        
    def write(self, cr, uid, ids, vals, context=None):
        
        if 'x_percentage' in vals:
            if vals['x_percentage']:
                self.onchange_percentage(cr, uid, [], vals['x_percentage'])
        if 'x_edu_year' in vals:
            if vals['x_edu_year']:
                self.onchange_year(cr, uid, [], vals['x_edu_year'])
        return super(hr_applicant_qualification, self).write(cr, uid, ids, vals, context)
    
    def onchange_year(self,cr, uid, ids, x_edu_year): 
        
        #Year = date.today().year
        #if x_edu_year and int(x_edu_year) > Year:
         #   raise osv.except_osv('Invalid Year', 'Please enter a valid Year ')
        return True
    
    def onchange_percentage(self, cr, uid, ids, x_percentage): 
        
        if x_percentage and re.match("^\d{0,2}(\.\d{1,4})? *%?$",x_percentage) == None:
            raise osv.except_osv('Invalid percentage', 'Please enter a valid percentage (EX:75 or 7.5 or A+)')
        return True
    
hr_applicant_qualification()


###################################### Employment Details in hr.candidate one2many fields#########################################

class previous_employment_details(osv.osv):
    
    _name= 'previous.employment.details'
    _description = 'Previous Employment Details'
    _columns={
        'x_emplmt_id':fields.many2one('hr.candidate','Candidate'),
        'x_employeer':fields.char('Employer',size=512, required=True),
        'x_exp_start_date':fields.char('Start Date',),
        'x_exp_end_date':fields.char('End Date', ),
        'x_role':fields.char('Role',size=256),
        'x_tech':fields.char('Technology',size=512),
        'is_last_employer':fields.boolean('Last Employer'),
    }
previous_employment_details()

###################################### Employment Details in hr.candidate one2many fields#######################################

class employment_details(osv.osv):
    _name= 'employment.details'
    _description = 'Employment Details'
    _columns={
        'x_employee_detail_id':fields.many2one('hr.candidate','Candidate'),
        'client': fields.char('Client', size=162),
        'state': fields.char('State', size=162),
        'city': fields.char('City', size=162),
        'roles': fields.char('Roles', size=162),
        'project_name': fields.char('Project Name', size=162),
        'project_desc': fields.char('Project Desc', size=162),
        'responsibilities': fields.char('Responsibilities', size=162),
        'environment': fields.char('Environment', size=162),

    }
employment_details()


###################################candidate skills ##############################################################

class candidate_skills(osv.osv):
    _name= 'candidate.skills'
    _description = 'Candidate Skills'
    _columns={
        'name': fields.char('Name', size=1024),

    }
candidate_skills()


########################################### To Create a Candidate #############################################################


class hr_candidate(osv.osv):
    def _user_currency(self, cr ,uid, context=None):
        users=self.pool.get('res.users').browse(cr,uid,uid,context)
        return users.x_currency or ''
        
    def _get_user_department(self, cr ,uid, context=None):
    #       users=self.pool.get('res.users').browse(cr,uid,uid,context)
        cr.execute("""select x_department_id from res_users where id=%s""",([uid]))
        user_list=cr.fetchall()
        res_dept=self.pool.get('res.dept').browse(cr,uid,user_list[0][0],context)
        return res_dept.id

    def _full_name_search(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        for cand in self.browse(cr, uid, ids, context=context):
            f_name = cand.x_first_name.lower()+' '+(cand.x_last_name.lower() or '')+' '+ (cand.x_email_from or '')
            res[cand.id] = f_name
        return res
            
    def _country_sep(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        for cand in self.browse(cr, uid, ids, context=context):
            country_id = cand.user_id.x_department_id.id
            res[cand.id]=country_id
        return res
    
    _name = 'hr.candidate'
    _rec_name =  'x_candidate_id'
    _description = "hr candidate"
    _order = "is_cand_tagged desc,  write_date desc"    
    _columns = {
                
        'users_dept': fields.many2one('res.dept', 'Dept'),
        'x_skill_technology': fields.many2many('hr.applicant_category',string='Core Skill / Technology'),
        'x_candidate_id':fields.char('Candidate Name/Id', size=512),# Candidate name with id
        'x_candidate_roll_no':fields.char('Candidate ID', size=515),# only id of the candidate
        'x_first_name':fields.char('First Name', size=255,required=True),
        'x_middle_name': fields.char('Middle Name', size=255),
        'x_last_name': fields.char('Last Name', size=255,required=True),
        'x_gender': fields.char('Gender', size=256),
        'x_street1': fields.char('Street1', size=1516),
        'x_street2': fields.char('Street2', size=1516),
        'x_city': fields.char('City', size=256),
        'x_county': fields.char('County', size=256),
        'country_id': fields.many2one('res.country', 'Country'),
        'state_id': fields.many2one('res.country.state', 'State', domain="[('country_id','=',country_id)]"),
        'x_zip_code': fields.char('Zip Code', change_default=True, size=24),
        #~ 'x_nationality': fields.many2one('res.country', 'Nationality'),
        'x_email_from': fields.char('Primary Email', size=255, help="Email address of the contact", select=1,required=True),
        'x_secondary_email': fields.char('Secondary Email', size=255),
        'x_phone': fields.char('Phone (Home)', size=64),
        'x_mobile': fields.char('Mobile', size=64, required=True),
        'x_dob':fields.date('Date of Birth',limit=50),
        'x_pan': fields.char('PAN', size=32, ),
        'x_ssn': fields.char('Last 4 digits of SSN', size=32),
        'x_employee':fields.many2one('hr.employee', 'Reffered Employee'),
        'user_id': fields.many2one('res.users', 'Recruiter', track_visibility='onchange',required=True),  
        'x_sourcename': fields.many2one('res.source.sourcetype', 'Source Name'), 
        'x_sourcetype': fields.many2one('res.source', 'Source Type',required=True),
        'x_job_id': fields.many2one('hr.job', 'Applied Job Name'),
        'x_client_project':fields.char('Client/Project Name', size=264),
        'x_applicant_bool':fields.boolean('Applicant Bool'),
        'x_vendor_id': fields.many2one('client.vendor', 'Vendor', change_default=True, select=True, track_visibility='always'),
        'x_dob_date':fields.date('DOB'),
        'x_date': fields.selection(DATE,"DOB (MM/DD)"),
        'x_month': fields.selection(MONTH,"DOB Month"),
        'x_linkedin_id':fields.char('Linkedin ID', size=164),
        'x_twitter_id':fields.char('Twitter ID', size=164),
        'x_certified':fields.selection(YESORNO,"Certification"),
        
        #fields from recruit-max
        'x_candidate_function':fields.selection(CANDIDATE_FUNCTION,"Function"),
        'x_candidate_status':fields.selection(CANDIDATE_STATUS,"Candidate Status"),
#         'x_background_check':fields.selection(BACKGROUND_CHECK,"Background Check"),
        'x_resident_status':fields.selection(RESIDENT_STATUS,"Resident Status"),
        
        #Educatiion Details
        'child_ids_qual': fields.one2many('hr.applicant.qualification', 'parent_id_qual', 'Qualification' ,store='True'),
        'x_resume':fields.binary('Resume'), 
        'x_file_name':fields.char('File Name', size=264),
        'x_resume_content':fields.text("Resume Content"),
        
        #Employment Details
        'x_exp_in_years': fields.integer('Total (Years/Months)',),
        'x_exp_in_months': fields.integer('Exp.in.Months'),
        'x_relevent_exp_in_years': fields.integer('Relevent (Years/Months)'),
        'x_relevent_exp_in_months': fields.integer('Relevent Exp.in.Months'),
        'x_current_salary': fields.integer('Current Salary', size=10,required=True),
        'x_cur_salary_currency': fields.selection(CURRENCY,"Current Salary Currency",required=True),
        'x_cur_salary_payby': fields.selection(PAYBY,"Current Salary Payby",required=True),
        'x_desired_salary': fields.integer('Desired Salary', size=10),
        'x_des_sal_currency': fields.selection(CURRENCY,"Desired Salary Currency"),
        'x_des_sal_payby': fields.selection(PAYBY,"Desired Salary Payby"),
        
         'x_employment_ids':fields.one2many('previous.employment.details','x_emplmt_id','Employment Information'),

        
        #Work Authorization
        'x_passport_no': fields.char('Passport Number', size=162),
        'x_passport_validity':fields.date('Passport Expired On'),
        'x_passport_country_id': fields.many2one('res.country', 'Passport Country'),
        'x_work_authorization': fields.selection(AVAILABLE_AUTHORIZATION, 'Work Authorization',required=True),
        'x_auth_validity':fields.date('Expired On'),
        'x_country_id': fields.many2one('res.country', 'Work Country'),
        'x_relocate': fields.selection([('YES', 'Yes'),('NO', 'No')], 'Relocation'),
        
        #Remarks
        'x_application_summary': fields.text('Application Summary'),
        'x_status':fields.selection([('client', 'client'),('interview', 'interview')], 'Relocation Status'),
        'create_date':fields.datetime('Created On'),
        'write_date':fields.datetime('Updated On'),
        'create_uid': fields.many2one('res.users', 'Created User'),
        'write_uid': fields.many2one('res.users', 'Updated User'),

        ### Function field for first name, last name combined search######
        'x_combine_name6':fields.function(_full_name_search, string='Full Name', store=True, type='char', size=586),
        #to get candidate belongs to us or row
        'x_country_sep':fields.function(_country_sep, string='Country_separation', method=True, store=True, type='char', size=126),
                
                
         ####   RESUME   ######################
        'x_candidate_role': fields.text('Candidate Role', size=162),
        'x_major_strengths': fields.text('Major Strengths', size=162),
        'x_certifications': fields.text('Certifications', size=162),
        'x_operating_sys': fields.text('Operating System', size=162),
        'x_known_languages': fields.text('Known Languages', size=162),
        'x_version_control': fields.text('Version Control', size=162),
        'x_database': fields.text('Database', size=162),
        'x_scheduler': fields.text('Scheduler', size=162),
        'x_tools_utilities': fields.char('Tools Utilities', size=162),
        'x_employment_details_ids':fields.one2many('employment.details','x_employee_detail_id','Employment Details'),

        #### comment #######
        'x_candidate_chat_comment':fields.text('Comments'),
        'x_title':fields.char('Title/ Role', size=255,required=True),
        'is_cand_tagged':fields.boolean('Is Candidate tagged'),

    }
    _defaults = {
        'x_candidate_id':lambda obj, cr, uid, context: '/',
        'x_cur_salary_currency':_user_currency,
        'x_cur_salary_payby':'Year',
        'x_des_sal_currency':_user_currency,
        'x_des_sal_payby':'Year',
        'users_dept':_get_user_department,
         'user_id': lambda obj, cr, uid, context: uid,
    }
    _sql_constraints = [
       # ('x_ssn', 'UNIQUE (x_ssn)', 'SSN Must be unique.'),
        ('x_email_from', 'UNIQUE (x_email_from)', 'Primary Email Must be unique.'),
        ('x_mobile', 'UNIQUE (x_mobile)', 'Mobile Number Must be unique.'),
        ('x_pan', 'UNIQUE (x_pan)', 'PAN Must be unique.'),
      
    ]
    
    def create(self, cr, uid, vals, context=None): 
        if len(vals['x_employment_ids']) <3:
            raise osv.except_osv(('Last Employer'),('Please Enter Last three Employer Details'))
        if vals.get('x_candidate_id','/')=='/':
            vals.update({'x_applicant_bool':True})
            x_candidate_id = self.pool.get('ir.sequence').get(cr, uid, 'hr.applicant') or '/'
            vals['x_candidate_roll_no'] = x_candidate_id+ ' *'
            if vals['x_last_name']:
                vals['x_last_name']=vals['x_last_name'].title()
                name_id=vals['x_last_name'].title()+', '+vals['x_first_name'].title()+'/'+x_candidate_id+ ' *'
            else:
                vals['x_last_name']=vals['x_last_name'].title()
                name_id=vals['x_first_name']+'/'+x_candidate_id+ ' *'
            vals['x_candidate_id']=name_id
            vals['is_cand_tagged']=True
            
            users = self.pool.get('res.users').browse(cr,uid,uid)
            dept=self.pool.get('res.dept').browse(cr,uid,users.x_department_id.id,context)
            
            #Most of the validations goes here
            if 'x_first_name' in vals:
                if vals['x_first_name']:
                    vals['x_first_name']=vals['x_first_name'].title()
                    self.onchange_firstname(cr, uid, [], vals['x_first_name'])
                    
            if 'x_middle_name' in vals:
                if vals['x_middle_name']:
                    vals['x_middle_name']=vals['x_middle_name'].title()
                    self.onchange_middlename(cr, uid, [], vals['x_middle_name'])   
                    
            if 'x_email_from' in vals:
                if vals['x_email_from']:
                    self.onchange_primary_email(cr,uid,[],vals['x_email_from'])
            
            if 'x_secondary_email' in vals:
                if vals['x_secondary_email']:
                    self.onchange_secondary_email(cr,uid,[],vals['x_secondary_email'])
            
            if 'x_ssn' in vals:
                if vals['x_ssn']:
                    self.validate_ssn(cr, uid, [], vals['x_ssn'])
                
            if 'x_pan' in vals:
                if vals['x_pan']:
                    self.validate_pan(cr,uid,[],vals['x_pan'])

            if 'x_dob_date' in vals:
                if vals['x_dob_date']:
                    self.onchange_dob_date(cr,uid,[],vals['x_dob_date'])
            
            if 'x_passport_validity' in vals:
                if vals['x_passport_validity']:
                    self.onchange_passport_validity(cr,uid,[],vals['x_passport_validity'])
            
            if 'x_auth_validity' in vals:
                if vals['x_auth_validity']:
                    self.onchange_auth_validity(cr,uid,[],vals['x_auth_validity'])
            
            if 'x_gender' in vals:
                if vals['x_gender']:
                    self.onchange_gender(cr,uid,[],vals['x_gender'])
                    
            if 'x_zip_code' in vals:
                if vals['x_zip_code']:
                    self.onchange_zipcode(cr, uid, [], vals['x_zip_code'])
                    
            """if  dept.name == 'HTC_ROW':            
                if 'x_mobile' in vals:
                    if vals['x_mobile']:
                        self.onchange_mobile_india(cr,uid,[],vals['x_mobile'])
                        
            if  dept.name == 'HTC_USA':
                if 'x_mobile' in vals:
                    if vals['x_mobile']:
                        self.onchange_mobile_us(cr,uid,[],vals['x_mobile'])
            if  dept.name == 'HTC_ROW':            
                if 'x_phone' in vals:
                    if vals['x_phone']:
                        self.onchange_phone_india(cr,uid,[],vals['x_phone'])
            
            if  dept.name == 'HTC_USA':
                if 'x_phone' in vals:
                    if vals['x_phone']:
                        self.onchange_phone_us(cr,uid,[],vals['x_phone'])
            if 'x_city' in vals:
                if vals['x_city']:
                    self.onchange_city(cr,uid,[],vals['x_city'])"""
            
        return super(hr_candidate, self).create(cr,uid,vals,context=context)
    
    def write(self, cr, uid, ids, vals, context=None):
        
        #if job id is changed and the same job is applied by the candidate, throw an message that it is already applied
        hr_applicant=self.pool.get('hr.applicant')
        users = self.pool.get('res.users').browse(cr,uid,uid)
        dept=self.pool.get('res.dept').browse(cr,uid,users.x_department_id.id,context)

        
        if context is None:
            context = {}
        index_content=""
        count =0
        if 'x_employment_ids' in vals:
            emp_list= vals['x_employment_ids']
            for i in emp_list:
                if i[0]== 2:
                    count = len(vals['x_employment_ids'])-1
                    if count <3:
                        raise osv.except_osv(('Last Employer'),('Please Enter Last three Employer Details'))
           
            
        
        if 'x_first_name' in vals:
            if vals['x_first_name']:
                self.onchange_firstname(cr, uid, [], vals['x_first_name'])
                
        if 'x_middle_name' in vals:
            if vals['x_middle_name']:
                self.onchange_middlename(cr, uid, [], vals['x_middle_name'])
                
        if 'x_zip_code' in vals:
            if vals['x_zip_code']:
                self.onchange_zipcode(cr, uid, [], vals['x_zip_code'])
                
                
        if 'x_gender' in vals:
            if vals['x_gender']:
                self.onchange_gender(cr,uid,[],vals['x_gender'])
                
        if 'x_email_from' in vals:
            if vals['x_email_from']:
                self.onchange_primary_email(cr,uid,[],vals['x_email_from'])
        
        if 'x_secondary_email' in vals:
            if vals['x_secondary_email']:
                self.onchange_secondary_email(cr,uid,[],vals['x_secondary_email'])
        
        if 'x_ssn' in vals:
            if vals['x_ssn']:
                self.validate_ssn(cr, uid, [], vals['x_ssn'])
            
        if 'x_pan' in vals:
            if vals['x_pan']:
                self.validate_pan(cr,uid,[],vals['x_pan'])

        if 'x_dob_date' in vals:
            if vals['x_dob_date']:
                self.onchange_dob_date(cr,uid,[],vals['x_dob_date'])
        
        if 'x_passport_validity' in vals:
            if vals['x_passport_validity']:
                self.onchange_passport_validity(cr,uid,[],vals['x_passport_validity'])

        if 'x_auth_validity' in vals:
            if vals['x_auth_validity']:
                self.onchange_auth_validity(cr,uid,[],vals['x_auth_validity'])
        """
        if  dept.name == 'HTC_ROW':            
            if 'x_mobile' in vals:
                if vals['x_mobile']:
                    self.onchange_mobile_india(cr,uid,[],vals['x_mobile'])
                        
        if  dept.name == 'HTC_USA':
            if 'x_mobile' in vals:
                if vals['x_mobile']:
                    self.onchange_mobile_us(cr,uid,[],vals['x_mobile'])
                    
        if  dept.name == 'HTC_ROW':            
            if 'x_phone' in vals:
                if vals['x_phone']:
                    self.onchange_phone_india(cr,uid,[],vals['x_phone'])
                        
        if  dept.name == 'HTC_USA':
            if 'x_phone' in vals:
                if vals['x_phone']:
                    self.onchange_phone_us(cr,uid,[],vals['x_phone'])
                       """
        return super(hr_candidate, self).write(cr, uid, ids, vals, context)
    
    def onchange_applied_job(self, cr, uid, ids, x_job_id,context=None):
        if ids:
            applicant=self.pool.get('hr.applicant').search(cr,uid,[('x_candidate_id','=',ids[0]),('job_id','=',x_job_id)])
            if applicant:
                raise osv.except_osv(('Applied Job'),('You have already applied for this job'))
            else:
                return True
        else:
            return True
    def _index(self, cr, uid, data, datas_fname, file_type):
       
        mime, icont = cntIndex.doIndex(data, datas_fname,  file_type or None, None)
        icont_u = ustr(icont)
        return mime, icont_u
       
    
    def onchange_sourcetype(self, cr, uid,ids,x_source_name,context=None):
        if x_source_name:
            return {'value': {'x_sourcename':''}}
        else:
            return True
        
    def applied_jobs(self, cr, uid, ids, context):
        
        candidate=self.pool.get('hr.candidate').browse(cr, uid, ids[0], context=context)
        applicant=self.pool.get('hr.applicant').search(cr,uid,[('x_candidate_id','=',candidate.id)])
        if applicant:
            return {'type': 'ir.actions.act_window',
                'res_model': 'hr.applicant',
                'view_mode': 'tree,form',
                'target': 'current',
                #'view_id':view_id,
                'name':"Applied Jobs",
                'domain':[('x_candidate_id','=',candidate.id)],
                'context':{'group_by':False},
                }
        else:
            raise osv.except_osv(_('No jobs!'), _('No Job found for this user'))
            return True
    
    def onchange_resume(self, cr, uid, ids, x_resume,x_file_name, context):
    
        FILE_TYPES=['.pdf','.doc','.docx','.ods','.rtf']
        fileName, fileExtension = os.path.splitext(str(x_file_name))
        if not fileExtension in FILE_TYPES:
                raise osv.except_osv(_('File Extension'), _('The uploaded file is not supported with openerp'))
            
        else:
        
            userkey = 'JP5R5F31X2X'
            subUserId = 'HTC Globals'
            version = '5.0.0'
            fn ='output_xml.xml'
            #fileName='output.docx'
            
            
            SM_TEMPLATE = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:rch="http://RchilliResumeParser">
              <soapenv:Header/>
              <soapenv:Body>
                 <rch:parseResumeBinary>
                <rch:filedata>"""+x_resume+"""</rch:filedata>
                <rch:fileName>"""+x_file_name+"""</rch:fileName>
                <rch:userkey>"""+userkey+"""</rch:userkey>
                <rch:version>"""+version+"""</rch:version>
                <rch:subUserId>"""+subUserId+"""</rch:subUserId>
                 </rch:parseResumeBinary>
              </soapenv:Body>
            </soapenv:Envelope>"""
            
            values = SM_TEMPLATE%()
            envlen = len(values)
            
              # construct and send the header
            
            try:
                webservice = httplib.HTTP("htcindia.rchilli.com")
                webservice.putrequest("POST", "/RChilliParser/services/RChilliParser?wsdl")
                webservice.putheader("Host", "htcindia.rchilli.com")
                webservice.putheader("User-Agent", "Python post")
                webservice.putheader("Content-type", "text/xml; charset=\"UTF-8\"")
                webservice.putheader("Content-length", str(envlen ))
                webservice.endheaders()
                webservice.send(values )
                
                # get the response
                statuscode, statusmessage, header = webservice.getreply()
                res = webservice.getfile().read().replace("&lt;","<").replace("&gt;",">")
                
                if res:
                    self.pool.get('rchilly').create(cr, uid,
                                       {
                                        'user_id':self.pool.get('res.users').browse(cr,uid,uid,context).id,
                                        'login':self.pool.get('res.users').browse(cr,uid,uid,context).login,
                                        'request_date':str(datetime.now()) or '',
                                        'login_host':socket.gethostname(),
                                'login_ip':"",
                                        #'login_ip':socket.gethostbyname(socket.gethostname()),
                                        })
                    
                    count_num=self.pool.get('rchilly.count').search(cr,uid,[('id','>',0)],context=None)
                    if count_num:
                        rchilly_counts=self.pool.get('rchilly.count').browse(cr,uid,count_num[0]).request_count
                        self.pool.get('rchilly.count').write(cr, uid,count_num[0],
                                                           {
                                            'request_count':int(rchilly_counts)+1 ,
                                            
                                            })
                        
                    else:
                        app_id=self.pool.get('rchilly.count').create(cr, uid,
                                             {
                                            'request_count': 1 ,
                                            
                                            })
                        
                    
                    
                cur_path =os.getcwd()
                cur_path=cur_path+'/output_xml.xml'
                if cur_path:
                    resumefp = open(cur_path, 'wb+')
                    resume = resumefp.write(res)
                    resumefp.close()
                  #~ filedata = base64.encodestring(resume)
                  
                #~ file_path = "/home/likewise-open/HTCINDIA/rajkumars/Documents/openerp/openerp/resumes/rchilly_output_bhanu.xml"
                #~ context = ET.iterparse(file_path, events=('start', 'end'))
                ct = ET.iterparse(cur_path, events=('start','end'))
                res_dict={}
                for event, elem in ct:
                    if event=='end':
                       res_dict[elem.tag.lower()]=elem.text
                
                pr = ET.parse(cur_path)
                ########  Extract Education Info ########
                university = [name.text for name in pr.findall('.//University')]
                degree = [name.text for name in pr.findall('.//Degree')]
                year = [name.text for name in pr.findall('.//Year')]
                ###############################################
                skill_from_rchilly = [name.text for name in pr.findall('.//Skill')]
                #newly added code
                skills=[]
                try:
                    db_skill=self.pool.get('candidate.skills')
                    for skill in skill_from_rchilly:
                         
                        if db_skill.search(cr,uid,[('name','=ilike',str(skill))]):
                            sk=str(skill).title()
                            if not sk in skills:
                                skills.append(str(skill).title())
                except:
                    pass
                ######## Previous Experince extract from SegregatedExperience ##################
                employer = [name.text for name in pr.findall('.//Employer')]
                jobprofile = [name.text for name in pr.findall('.//JobProfile')]
                joblocation = [name.text for name in pr.findall('.//JobLocation')]
                startdate = [name.text for name in pr.findall('.//StartDate')]
                enddate = [name.text for name in pr.findall('.//EndDate')]
                jobdescription = [name.text for name in pr.findall('.//JobDescription')]
                usedskills = [name.text for name in pr.findall('.//UsedSkills')]
                
                Employer = [name.text for name in pr.findall('.//Client')]
                experience = [name.text for name in pr.findall('.//Experience')]
                objectives = [name.text for name in pr.findall('.//Objectives')]
                current_employer = [name.text for name in pr.findall('.//CurrentEmployer')]
                pan_no = [name.text for name in pr.findall('.//PanNo')]
                ph_no = [name.text for name in pr.findall('.//Phone')]
        
                #country_id = self.pool.get('res.country').search(cr, uid, [('name','like',res_dict['country'])])
                #state_id = self.pool.get('res.country.state').search(cr, uid,[('name','ilike',res_dict['state'])])
                emp=[]
                edu=[]
                exp=[]
                
                for i in range(len(employer)):
                    e = self.pool.get('employment.details').create(cr, uid,
                                                       {
                                        'client':employer[i] or '',
                                        'city':joblocation[i] or '',
                                        'roles':jobprofile[i] or '',
                                        'project_desc':jobdescription[i] or '',                                    
                                        'environment':usedskills[i] or '',  
                                        'responsibilities':jobprofile[i] or '',
                                        
                                        })
                    emp.append(e)
                
                for i in range(len(degree)):
                    e = self.pool.get('hr.applicant.qualification').create(cr, uid,
                                                       {
                                        'x_degree':degree[i] or '',
                                        #~ 'x_edu_month': '6' ,
                                        'x_edu_year':year[i],
                                        'x_university':university[i] or '',
                                        #~ 'parent_id_qual':
                                        })
                    edu.append(e)
                for j in range(len(employer)):
                    if current_employer[0] == employer[j]:
                        j_id = self.pool.get('previous.employment.details').create(cr, uid,
                                {
                              #~ 'x_emplmt_id':fields.many2one('hr.candidate','Candidate'),
                            'x_employeer':employer[j] or '',
                            'x_exp_start_date':startdate[j] or '',
                            'x_exp_end_date':enddate[j] or '',                                              
                            'x_role':jobprofile[j] or '',
                            'x_tech':usedskills[j] or '',  
                            'is_last_employer':True,  
                                })
                                
                        exp.append(j_id)
            
                    else:
                        j_id = self.pool.get('previous.employment.details').create(cr, uid,
                                {
                              #~ 'x_emplmt_id':fields.many2one('hr.candidate','Candidate'),
                            'x_employeer':employer[j] or '',
                            'x_exp_start_date':startdate[j] or '',
                            'x_exp_end_date':enddate[j] or '',                                              
                            'x_role':jobprofile[j] or '',
                            'x_tech':usedskills[j] or '',  
                            
                                })
                
                        exp.append(j_id)
                skill_ids=[]
                try:
                    for k in range(len(skills)):
                        applicant_category=self.pool.get('hr.applicant_category')
                        # search if existing else create
                        category_search=applicant_category.search(cr,uid,[('name','=ilike',skills[k])])
                        if category_search:
                            skill_ids.append(category_search[0])
                        else:
                            s_id=applicant_category.create(cr, uid, {'name':skills[k]})
                            skill_ids.append(s_id)
                except:
                    pass
                try:
                    x_current_salary=res_dict['currentsalary'] and int(res_dict['currentsalary']) or 0,
                    x_current_salary=x_current_salary[0]
                except:
                    x_current_salary=0
                
                try:
                    x_desired_salary=res_dict['expectedsalary'] and int(res_dict['expectedsalary']) or 0,
                    x_desired_salary=x_desired_salary[0]
                except:
                    x_desired_salary=0
                
                try:
                    x_exp_in_years=res_dict['totalexperienceinyear'] and int(res_dict['totalexperienceinyear'].split('.')[0])
                    if not x_exp_in_years:
                        x_exp_in_years=0
                except:
                    x_exp_in_years=0
                
                try:
                    x_exp_in_months=res_dict['totalexperienceinyear'] and int(res_dict['totalexperienceinyear'].split('.')[1])
                    if not x_exp_in_months:
                        x_exp_in_months=0
                except:
                    x_exp_in_months=0
                
                try:
                    html_resume=str(res_dict['htmlresume']).replace("&amp;#xa0;"," ")
                except:
                    html_resume=""
                
                val ={'value':
                        {'x_first_name':res_dict['firstname'] or '',
                        'x_middle_name':res_dict['middlename'] or '',
                        'x_last_name':res_dict['lastname'] or '',
                        'x_nationality':res_dict['nationality'] or '',
                        'x_gender':res_dict['gender'] or '',
                        'x_passport_no':res_dict['passportno'] or '',
                        'x_email_from':res_dict['email'] or '',
                        'x_secondary_email':res_dict['alternateemail'],
                        'x_phone':ph_no[0] or '',
                        'x_pan':pan_no[0] or'',
                        'x_street1':res_dict['address'] or '',
                        'x_city':res_dict['city'] or '',
                        'x_zip_code': res_dict['zipcode']  or '',
                        'x_current_salary':x_current_salary,
                        'x_desired_salary':x_desired_salary,
                        'x_mobile': res_dict['phone'] or '',
                        'x_exp_in_years':x_exp_in_years,
                        'x_exp_in_months':x_exp_in_months,
                        'x_resume_content':res_dict['htmlresume'] or '',
                        'child_ids_qual': edu ,
                        'x_employment_ids':exp,
                        'x_employment_details_ids':emp,
                        'x_skill_technology': [(6,0,skill_ids)],
                        
                        ###################     RESUME     #########################
                        'x_major_strengths':res_dict['skills'],
                        'x_candidate_role':res_dict['objectives'],
                        
                        #commented fields
                        #~ 'x_dob':res_dict['dateofbirth'] or None,
                        #'x_pan':res_dict['panno'] or '',
                        #~ 'state_id':res_dict['state'],
                        #~ 'country_id':res_dict['country'],
                        #'x_skill_technology':res_dict['Skills'],
                        #'x_relevent_exp_in_years':int(res_dict['experience']) or '',
                        #~ 'x_resume_content':res_dict['detailresume'] or '',
                        }
                       }
                return val
            except:
                raise osv.except_osv('Invalid Resume','Due to some problem, Rchilly could not parse the uploaded resume.')
                

    def onchange_dob_date(self, cr, uid, ids, x_dob_date):
        today = datetime.now().date()
        if x_dob_date:
            if x_dob_date > str(today):        
                raise osv.except_osv('Invalid DOB', 'Please enter a valid DOB should be less than Current Date')
        return {}
    
    def onchange_passport_validity(self, cr, uid, ids, x_passport_validity):
        today = datetime.now().date()
        if x_passport_validity:
            if x_passport_validity < str(today):        
                raise osv.except_osv('Invalid Passport Validity Date', 'Please enter a valid Date should be Greater than Current Date')
        return {}
    
    def onchange_auth_validity(self, cr, uid, ids, x_auth_validity):
        today = datetime.now().date()
        if x_auth_validity:
            if x_auth_validity < str(today):        
                raise osv.except_osv('Invalid Authorization Date', 'Please enter a valid Date should be Greater than Current Date')
        return {}
    
    def onchange_firstname(self, cr, uid, ids,x_first_name):  
        if x_first_name:
            if re.match("^[A-Z a-z]*$",x_first_name) == None or x_first_name.strip()=='' :
                raise osv.except_osv('Invalid name', 'Please enter a valid name( only characters) ')
            else :
                return {'value' : {'x_first_name' : x_first_name.strip().title()}}
        return True
        
    def onchange_middlename(self, cr, uid, ids,x_middle_name):  
        if x_middle_name:
            if re.match("^[A-Z a-z]*$",x_middle_name) == None or x_middle_name.strip()=='':
                raise osv.except_osv('Invalid name', 'Please enter a valid name( only characters) ')
            else :
                return {'value' : {'x_middle_name' : x_middle_name.strip().title()}}
        return True 
    
    def onchange_lastname(self, cr, uid, ids,x_last_name):  
        if x_last_name:
            if re.match("^[A-Z a-z]*$",x_last_name) == None or x_last_name.strip()=='' :
                raise osv.except_osv('Invalid name', 'Please enter a valid name( only characters) ')
            else :
                return {'value' : {'x_last_name' : x_last_name.strip().title()}}
        return True      
    
    def onchange_city(self, cr, uid, ids, x_city): 
        if x_city:
            if re.match("^[A-Z a-z]*$",x_city) == None or x_city.strip()=='' :
                raise osv.except_osv('Invalid city', 'Please enter a valid city (EX:chennai)')
            else :
                return {'value' : {'x_city' : x_city.strip().title()}}
        return True
         
    def onchange_zipcode(self, cr, uid, ids, x_ssn):
        #if x_ssn and re.match(r"^[0-9]{1,10}$",x_ssn) == None :
         #    raise osv.except_osv('Invalid Zipcode', 'Please enter a valid Zipcode number (EX:600012)')
        return True
        
    def onchange_gender(self, cr, uid, ids, x_gender):
        if x_gender:
            if re.match("^[A-Z a-z]*$",x_gender) == None or x_gender.strip()=='' :
                raise osv.except_osv('Invalid gender', 'Please enter a valid gender  (EX:Male)')
            else :
                return {'value' : {'x_gender' : x_gender.strip().title()}}
        return True
        
    def onchange_phone_us(self, cr, uid, ids, x_phone):
        if x_phone:
            if re.match(r"^[0-9]{1,15}$",x_phone) == None:
                raise osv.except_osv('Invalid phone', 'Please enter a valid phone number (EX:04352418896)')
        return True
        
    def onchange_phone_india(self, cr, uid, ids, x_phone):
        if x_phone:
            if re.match(r"^[0-9]{1,15}$",x_phone) == None:
                raise osv.except_osv('Invalid phone', 'Please enter a valid phone number (EX:04352418896)')
        return True
        
    def onchange_mobile_us(self, cr, uid, ids, x_mobile): 
        if x_mobile:
            if re.match(r"([0-9]{3}[-]{1}[0-9]{3}[-]{1}[0-9]{4})$",x_mobile) == None:
                raise osv.except_osv('Invalid Phone number', 'Please enter a valid Phone Number (EX:999-999-9999)')
        return True 
     
    def onchange_mobile_india(self, cr, uid, ids, x_mobile): 
        if x_mobile:
            if re.match(r"([0-9]{5}[-]{1}[0-9]{5})$",x_mobile) == None:
                raise osv.except_osv('Invalid Phone Number', 'Please enter a valid Phone Number (EX:11111-11111)')
        return True  
        
    def onchange_primary_email(self, cr, uid, ids, email):
        if email:
            if re.match(r"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+\s*?)$",email) == None:
                raise osv.except_osv('Invalid Email', 'Please enter a valid email address (EX:xxxx@xxx.xx)')
        return True
    
    def onchange_secondary_email(self, cr, uid, ids, email):
        if email:
            if re.match(r"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+\s*?)$",email) == None:
                raise osv.except_osv('Invalid Email', 'Please enter a valid email address (EX:xxxx@xxx.xx)')
        return True
    
    def validate_ssn(self, cr, uid, ids, x_ssn):
        if x_ssn:
            if re.match(r"^[0-9]{4}$",x_ssn) == None:
                raise osv.except_osv('Invalid SSN', 'Please enter a valid 4 digit SSN number (EX:1111)')
        return True
    
    def validate_pan(self, cr, uid, ids, x_pan):
        if x_pan:
            if re.match(r"^[A-Z]{5}\d{4}[A-Z]{1}$", x_pan) == None:
                raise osv.except_osv('Invalid PAN', 'Please enter a valid 10 digit PAN number (EX:abcde1111x)')
        return True
    
    
    def link_to_jobs(self, cr, uid, ids, context):
         candidate = self.browse(cr, uid, ids[0], context=context)
         
         if not candidate.x_job_id:
            raise osv.except_osv(_('Applied Job'), _('Fill the Applied Job name to link to Jobs'))
                 
         else:
            applicant=self.pool.get('hr.applicant').search(cr,uid,[('x_candidate_id','=',candidate.id),('job_id','=',candidate.x_job_id.id)])
            if applicant:
                if len(applicant)==1:
                    return {'type': 'ir.actions.act_window',
                   'res_model': 'hr.applicant',
                   'view_mode': 'form',
                   'target': 'current',
                   'res_id': applicant[0] or False,
                   'context':{'group_by':False},
                   }
                else:
                    raise osv.except_osv(_('Input Error!'), _('You have already applied for the Job'))
            else:
               applicant=self.pool.get('hr.applicant')
               vals={
                      'x_candidate_id':candidate.id,
                       'job_id':candidate.x_job_id.id,
                       'x_cli_id':candidate.x_job_id.x_client_id.id or '',
                       'x_cli_req':candidate.x_job_id.x_client_request_id or '',
    
                      }
               
               app_id=applicant.create(cr,uid,vals)
               return {'type': 'ir.actions.act_window',
                       'res_model': 'hr.applicant',
                       'view_mode': 'form',
                       'target': 'current',
                       'res_id': app_id or False,
                       'context':{'group_by':False},
                       } 
         return True
    
    def onchange_check_name(self, cr, uid, ids,x_first_name,x_last_name):
        
        if x_first_name and x_last_name:
            applicant=self.search(cr,uid,[('x_first_name','=',x_first_name.capitalize()),('x_last_name','=',x_last_name.capitalize())])
            if applicant:
                ex_cand = self.browse(cr, uid, applicant[0]).x_candidate_id + " ROW" if self.browse(cr, uid, applicant[0]).x_country_sep=='1' else " US"
            if applicant:
                raise osv.except_osv(('Warning !!!'), ('Candidate Already Exist  \n %s')%(ex_cand))
            
        if x_last_name and re.match("^[A-Z a-z]*$",x_last_name) == None or x_last_name.strip()=='' :
            raise osv.except_osv('Invalid name', 'Please enter a valid name( only characters) ')
        else :
            return {'value' : {'x_last_name' : x_last_name.strip().title()}}
         
        return True
    
    def action_generate_resume(self, cr, uid, ids, context=None):
        
        attachment_obj = self.pool.get('ir.attachment')
        for record in self.browse(cr, uid, ids, context=context):
            ir_actions_report = self.pool.get('ir.actions.report.xml')
            matching_reports = ir_actions_report.search(cr, uid,
                              [('name','=','HTC Raw Resume - .doc')])
            if matching_reports:
                report = ir_actions_report.browse(cr, uid,matching_reports[0])
                report_service = 'report.' + report.report_name
                service = netsvc.LocalService(report_service)
                (result, format) = service.create(cr, uid, [record.id],
                                   {'model': self._name}, context=context)
                eval_context = {'time': time, 'object': record}
                if not report.attachment or not eval(report.attachment,eval_context):
                    # no auto-saving of report as attachment, need to do it manually
                    result = base64.b64encode(result)
                    file_name = re.sub(r'[^a-zA-Z0-9_-]', '_', 'HTC Raw Resume')
                    file_name += ".doc"
                    attachment_id = attachment_obj.create(cr, uid,
                        {
                            'name': file_name,
                            'datas': result,
                            'datas_fname': file_name,
                            'res_model': self._name,
                            'res_id': record.id,
                            'type': 'binary'
                        }, context=context)
            if record.x_resume:
                    attachment_obj.create(cr, uid,
                            {
                                'name': record.x_file_name,
                                'datas': record.x_resume,
                                'datas_fname': record.x_file_name,
                                'res_model': self._name,
                                'res_name':record.x_candidate_id,
                                 'res_id': record.id,
                                'type': 'binary'
                            }, context=context)

        return True

    def cron_removing_highlighted_candidate(self,cr, uid,context=None):
        logging.info('cron_removing_highlighted_candidate starts.................')
        ########################## * removed with in 24 hrs from candidate id #######
        cand_config_id=self.pool.get('removing.highlighted.candidate.config').search(cr, uid, [('id','>',0)])
        config_hrs=self.pool.get('removing.highlighted.candidate.config').browse(cr, uid, cand_config_id[0],context=None)['hrs_to_reset']
        config_hrs_2=config_hrs+2
        past_24hr = datetime.now()-timedelta(hours=config_hrs)
        past_26hr = datetime.now()-timedelta(hours=config_hrs_2)
        str_past24 = format(past_24hr,'%Y-%m-%d %H:%M:%S')
        str_past26 = format(past_26hr,'%Y-%m-%d %H:%M:%S')
        hr_candidate_pool = self.pool.get('hr.candidate')
        #~ hr_candidate_search=hr_candidate_pool.search(cr, uid, [('create_date','>=',str_past26),('create_date','<=',str_past24)])
        hr_candidate_search=hr_candidate_pool.search(cr, uid, [('create_date','<=',str_past24)])

        for i in hr_candidate_search:
            hr_cand=hr_candidate_pool.browse(cr, uid, i, context=None)
            if hr_cand.x_candidate_roll_no.split(' ')[-1] == '*': 
                rm_star_cand = hr_cand.x_candidate_id.split('*')[0].rstrip()
                self.pool.get('hr.candidate').write(cr, uid, hr_cand.id, {'x_candidate_roll_no':hr_cand.x_candidate_roll_no.split(' ')[0],
                                                                            'x_candidate_id':rm_star_cand,
                                                                            'is_cand_tagged':False})
             
        ##################################END#########################
        logging.info('cron_removing_highlighted_candidate ends.................')
        return True

hr_candidate()
######################################link candidate to a job ############################################

class removing_highlighted_candidate_config(osv.osv):
    _name='removing.highlighted.candidate.config'
    _columns={
              'name':fields.char('Name', required=True),
              'hrs_to_reset':fields.integer('Hours to reset (*)', required=True)
              }

removing_highlighted_candidate_config()


class shedule_meeting_lists(osv.osv):
    _name='shedule.meeting.lists'
    _columns={
        'meet_id':fields.many2one('hr.applicant','Meeting'),
        'name':fields.char('Subject',size=512),
        'date':fields.datetime('Date'),
        'user_id':fields.many2one('res.users','Responsible'),
        'location':fields.char('Location',size=512),
        }


html_invitation = """
<html>
<head>
</head>
<body>
<p><i><font color ="blue">Dear Candidate,</font></i></p>
<blink><p align="center"><i><font color ="blue"> Welcome Aboard! </font></i></p></blink>
<p><i><font color ="blue">As you are aware that you have been intimated with the user name and a password to access the URL
 meant for candidate information. By using the credentials kindly access the URL and provide 
all the necessary information (both Personal and Professional) by keying in the relevant screens. 
Also upload all the necessary attachments wherever required.</font></i> </p>
<table cellspacing="0" cellpadding="5" border="0" summary=""
    style="width: 90%%; font-family: Arial, Sans-serif; border: 1px Solid #ccc; background-color: #f6f6f6">
 <tr>
                <td width="21%%">
                <div><b>NAME:%(name)s</b></div>
                </td>
    </tr>
    <tr>           
                <td width="21%%">
                <div><b>LOGIN:%(login)s</b></div>
                </td>
                </tr>
        <tr>
                <td width="15%%">
                <div><b>PASSWORD:%(password)s</b></div>
                </td>
                
            </tr>

</table>
<p><i><font color ="blue">This URL will be active till three days before your expected and agreed date of joining in HTC.</font></i></p>

<p><i><font color ="blue">We appreciate your co-operation in this regard and we thank you in advance.</font></i></p>

<p><i><font color ="blue">Regards,</font></i></p>

<p><i><font color ="blue">Team On-Boarding</font></i></p></br>
<p><i><font color="blue">HTC Global Services</font></i></p>          
</body>
<body>
    <a href="http://erp.htcindia.com">http://erp.htcindia.com</a>
</body>
</html>
"""  

class hr_applicant(osv.osv):
    
    def _initial_screen_created_by(self, cr ,uid, context=None):
         return uid
    
    def _job_status_get(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        job_status = self.browse(cr, uid, ids, context=context)
        if job_status:
            for order in job_status:
                stat_name=order.job_id
                if stat_name:
                    stat_name_status=stat_name.x_requisition_status
                    if stat_name_status:
                        stat_name_status_name=stat_name_status.name
                        res[order.id] = stat_name_status_name
            else:
                res[order.id]=""
        else:
            res[order.id]=""
            
        return res
    
    def _country_sep(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        for app in self.browse(cr, uid, ids, context=context):
            country_id = app.job_id.depart_id.id
            res[app.id]=country_id
        return res

    def _full_name_search(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        for cand in self.browse(cr, uid, ids, context=context):
            if cand.x_candidate_id:
                f_name = cand.x_candidate_id.x_first_name.lower()+' '+(cand.x_candidate_id.x_last_name.lower() or ' ')+' '+ (cand.x_candidate_id.x_email_from or '')
                res[cand.id] = f_name
        return res

    def _get_bu_from_job(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        for cand in self.browse(cr, uid, ids, context=context):
            if cand.job_id:
                res[cand.id]=cand.job_id.x_bu_user.id
        return res

    _inherit = 'hr.applicant'
    _rec_name =  'name'
    _order = "write_date desc"
    _columns = {
        'name': fields.char('Name', size=528, select=True),
        'x_candidate_id': fields.many2one('hr.candidate', 'Candidate Name',required=True),
        'job_id': fields.many2one('hr.job', 'Applied Job'),
        
        #for separation in tree view
        'x_job': fields.char('HTC Job ID'),
        'x_job_title': fields.char('HTC Job Title'),
        'x_first_name':fields.char('First Name'),
        'x_last_name':fields.char('Last Name'),
        'x_candidate_roll_no':fields.char('Candidate ID'),
        
        'x_date_from':fields.function(lambda *a,**k:{}, method=True, type='date',string="date from"),
        'x_date_to':fields.function(lambda *a,**k:{}, method=True, type='date',string="date to"),
        
        #candidate identified
        'x_candidate_identified_date':fields.datetime('Candidate Identified On'),
        'x_candidate_identified_by':fields.many2one('res.users','Candidate Identified By',track_visibility='onchange',readonly=True),
        'x_candidate_identified_comments': fields.text('Candidate Identified Comments'),
         
        #initial screening
        'x_initial_screening_date': fields.datetime('Internal Screening Created On'),
        'x_communication_rating': fields.selection(COMMUNICATION_RATING,"Communication Rating"),
        'x_comments': fields.text('Internal Comments'), 
        'x_initialscreen_created_by': fields.many2one('res.users', 'Internal Screen Done By', track_visibility='onchange',readonly=True),
        
        
        #Submit to TCMG Manager
        'x_tcmg_manager_date': fields.datetime('To Client Partner Created On'),
        'x_tcmg_created_by': fields.many2one('res.users', 'To Client Partner Created By', track_visibility='onchange',readonly=True),
        'x_tcmg_comments': fields.text('To Client Parnter Comments'), 
        
        #submit to client
         'x_submit_to_client_date': fields.datetime('Client Created On'),
         'x_client_created_by': fields.many2one('res.users', 'Client Created By', track_visibility='onchange',readonly=True),
         'x_client_comments': fields.text('To Client Comments'),   
         
        #Interview Process
        'x_interview_date': fields.datetime('Interview Created On'),
        'x_interview_created_by': fields.many2one('res.users', 'Interview Created By', track_visibility='onchange',readonly=True),
        'child_ids': fields.one2many('hr.applicant.interview', 'parent_id', 'interviews' ,store='True'),
        'x_interview_comments': fields.text('Interview Comments'),
        
        #offer status
        'x_offer_recruiter': fields.many2one('res.users', 'Recruiter', track_visibility='onchange'),
        'x_offer_status_date': fields.datetime('Offer Created On'),
        'x_offer_created_by': fields.many2one('res.users', 'Offer Created By', track_visibility='onchange',readonly=True),
        'x_offer_comments': fields.text('Offer Comments'),
        'x_join_status':fields.selection(JOIN_STATUS,"Join Status"),
        #shedule meetings list
        'x_shedule_meeting_link_ids':fields.one2many('crm.meeting','x_hr_app_id',"Shedule Interviews"),
        
        #Hire status
        'x_hire_candidate_report': fields.selection(Candidate_Reported,"Candidate Reported",required=True),
        'x_hire_employee_id': fields.char('Emp ID', size=64),
        'x_hire_start_date': fields.date('Hire Start Date', size=64), 
        'x_hire_created_by': fields.many2one('res.users', 'Hire Created By', track_visibility='onchange',readonly=True),
        'x_hire_comments': fields.text('Join Comments'), 
        
        
        #tracking status
        'x_stage_status':fields.char('Stage Status',size=530),
        'x_offer_status_bool': fields.boolean("offer status bool"),
         'x_app_stages': fields.selection(APP_STATUS,"View"),
        'x_view_status': fields.selection(APP_STATUS,"View status"),  
        'x_stages_status_report':fields.char('Stage Status For report',size=530),
        'x_on_change_view_status':fields.boolean("Change view status bool"),
        
        
        
        #Term Process
        'x_term_created_by': fields.many2one('res.users', 'Term Created By', track_visibility='onchange',readonly=True),
        'x_first_name':fields.char("First Name"),
        'x_middle_name':fields.char("Middle Name"),
        'x_last_name':fields.char("Last Name"),
        'x_city':fields.char("City"),
        'x_candidate':fields.char("Term Candidate ID"),
        'x_hireby_client_technology':fields.boolean("Hireby Better Technology"),
        'x_hireby_client_benefits':fields.boolean("Hireby Improved Benefits"),
        'x_hireby_client_money':fields.boolean("Hireby More Money"),
        'x_hireby_client_long_term_stability':fields.boolean("Hireby Long Term Stability"),
        'x_hireby_client_other':fields.boolean("Hireby Other"),
        
        'x_permanent_pos_technology':fields.boolean("Permanent Better Technology"),
        'x_permanent_pos_benefits':fields.boolean("Permanent Improved Benefits"),
        'x_permanent_pos_money':fields.boolean("Permanent More Money"),
        'x_permanent_pos_long_term_stability':fields.boolean("Permanent Long Term Stability"),
        'x_permanent_pos_other':fields.boolean("Permanent Other"),

        'x_competitor_technology':fields.boolean("Competitor Better Technology"),
        'x_competitor_benefits':fields.boolean("Competitor Improved Benefits"),
        'x_competitor_money':fields.boolean("Competitor More Money"),
        'x_competitor_long_term_stability':fields.boolean("Competitor Long Term Stability"),
        'x_competitor_other':fields.boolean("Competitor Other"),

        'x_marketable_employee':fields.boolean("Marketable Employee-Unable to find new assignment"),
        'x_performance_issue':fields.boolean("Not re-marketing due to performance issue"),
        'x_skillset':fields.boolean("Not re-marketing due to skill set"),
        'x_budgetcuts':fields.boolean("Budget Cuts"),
        'x_personal_reason':fields.boolean("Personal Reason"),
        'x_customer_requested':fields.boolean("Customer Requested"),
        'x_lack_feedback':fields.boolean("Lack of Feedback"),
        'x_reloctor':fields.boolean("Relocator"),
        'x_lack_Training':fields.boolean("Lack Of Training"),
        'x_security_pass':fields.boolean("Security Pass"),
        'x_office_laptop':fields.boolean("Computer(Laptop)"),
        'x_office_key':fields.boolean("Office Keys"),
        'x_desk_key':fields.boolean("File/Desk keys"),
        'x_other_info':fields.boolean("Other Information"),
        'x_state_id':fields.char("State"),
        'x_employee_no':fields.char("Employee No"),
        'x_city_id':fields.char("City"),
        'x_cjo':fields.char("CJO"),
        'x_sjo':fields.char("SJO"),
        'x_street':fields.char("Street"),
        'x_zip_codes':fields.char("Zip-Code"),
        'x_ssn':fields.char("Last 4 digits of SSN", size=128),
        'x_clients':fields.char("Client"),
        'x_term_comments':fields.text("Term Comments"),
        'x_employee_signature':fields.char("Employee Signature(Optional)"),
        'x_term_process_date':fields.date("Term Process Date"),
        'x_planned_end_date': fields.date('Planned End Date'),
        'x_hire_date': fields.date('Hire Date'),
        'x_doj_date': fields.date('DOJ Date', size=64), 
        
        ## client info
        'x_cli_id':fields.many2one('client.vendor','Client'),
        'x_cli_req':fields.char('Client Req Id',size=256),

        #check comment in all stages
        'x_prog_candidate_identified':fields.float('Candidate Identified', group_operator="avg",),
        'x_prog_initial':fields.float('Internal Screening', group_operator="avg",),
        'x_prog_to_cli_part':fields.float('To Client Partner', group_operator="avg",),
        'x_prog_to_cli':fields.float('To Client',group_operator="avg"),
        'x_prog_interview':fields.float('Interview/ Decision', group_operator="avg",),
        'x_prog_off':fields.float('Offered', group_operator="avg",),
        'x_prog_join':fields.float('Joined', group_operator="avg",),
        'x_prog_term':fields.float('Termed', group_operator="avg",),
        
         ##Doc Reports
        'x_doc_reports': fields.selection(DOC_REPORTS,"Offer Documents"),
        'x_doc_reports_ind': fields.selection(DOC_REPORTS_IND,"Offer Documents"),
        
         ## green color in tree view (job status is open) ##
        'x_job_status2':fields.function(_job_status_get, string='Job Staus', type='char', size=256),
        
        #employee to create only once
        'x_is_employee':fields.boolean("Is Employee"),
        'x_is_offer_accepted':fields.boolean("Is Offer Accepted"),
        'x_is_onboard':fields.boolean("Is Onboard"),
        'create_date':fields.datetime('Created On'),
        'create_uid':fields.many2one('res.users', 'Created User'),
        'write_date':fields.datetime('Updated On'),
        'write_uid': fields.many2one('res.users', 'Updated User'),
        'x_country_sep':fields.function(_country_sep, string='Country_separation', method=True, store=True, type='char', size=126),
        ### Function field for first name, last name combined search######
        'x_combine_name3':fields.function(_full_name_search, string='Full Name', store=True, type='char', size=586),
        #### function field for search view group by BU, ######
        'x_group_bu':fields.function(_get_bu_from_job, type='many2one', relation='res.users', store=True, string='Group BU'),
        'is_user':fields.boolean('Is User'),
        'is_offer_accept':fields.boolean('Is Offer Accep'),
        'is_link':fields.boolean('Is link'),
        #### Term Screen ####
        'x_term_date': fields.date('Term Date'),
    }   
    
    
    _defaults = {
        'x_app_stages':5,
        'x_view_status' :5,
        'x_stage_status':'Candidate Identified - New',
        'x_offer_status_bool':False,
        'x_stages_status_report':'New',
        'x_on_change_view_status':False,
        'x_prog_candidate_identified':100.00,
#         'x_join_status':'2',
        'x_candidate_identified_date':lambda *a: datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'x_candidate_identified_by':_initial_screen_created_by,
        'x_is_employee':False,
        'x_is_offer_accepted':False,
        'x_is_onboard':False,
        'x_hire_candidate_report':'No',
        
    }

    def get_history(self, cr, uid, ids, context=None):
        appl = self.browse(cr, uid, ids[0], context)
        his_id = self.pool.get('history.wiz')
        his_line_id = self.pool.get('history.line.wiz')
        h_id = his_id.create(cr, uid, {'appl_id':appl.id, 'name':'HIs'})

        for i in range(appl.stage_id.id):
            if i+5==5 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':05,   
                                        'wiz_comment':appl.x_candidate_identified_comments,                                    
                                        'created_on': appl.x_candidate_identified_date,
                                        'completed_on':appl.x_tcmg_manager_date or None,
                                        'status':'In-Process' if i+5 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_candidate_identified_by.id})
            if i+5==10 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':10,
                                        'wiz_comment':appl.x_comments,
                                        'created_on': appl.x_initial_screening_date,
                                        'completed_on':appl.x_tcmg_manager_date or None,
                                        'status':'In-Process' if i+5 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_initialscreen_created_by.id})
            if i+10==20 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':20,
                                        'wiz_comment':appl.x_tcmg_comments,
                                        'created_on': appl.x_tcmg_manager_date,
                                        'completed_on':appl.x_submit_to_client_date or None,
                                        'status':'In-Process' if i+10 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_tcmg_created_by.id})
            if i+10==30 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':30,
                                        'wiz_comment':appl.x_client_comments,
                                        'created_on': appl.x_submit_to_client_date,
                                        'completed_on':appl.x_interview_date or None,
                                        'status':'In-Process' if i+10 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_client_created_by.id})
            if i+10==40 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':40,
                                        'wiz_comment':appl.x_interview_comments,
                                        'created_on': appl.x_interview_date,
                                        'completed_on':appl.x_offer_status_date or None,
                                        'status':'In-Process' if i+10 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_interview_created_by.id})
            if i+10==50 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':50,
                                        'wiz_comment':appl.x_offer_comments,
                                        'created_on': appl.x_offer_status_date,
                                        'completed_on':appl.x_hire_start_date or None,
                                        'status':appl.x_stage_status if i+10 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_offer_created_by.id})
            if i+10==60 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':60,
                                        'wiz_comment':appl.x_hire_comments,
                                        'created_on': appl.x_hire_start_date,
                                        'completed_on': appl.x_term_process_date,
                                        'status':appl.x_stage_status if i+10 == appl.stage_id.id else "Completed",
                                        'recruiter_name':appl.x_hire_created_by.id})
            if i+10==70 and h_id:
                r_id = his_line_id.create(cr, uid, {'line_id':h_id,
                                        'stage_name':70,
                                        'wiz_comment':appl.x_term_comments,
                                        'created_on': appl.x_term_process_date,
                                        'completed_on': None,
                                        'status': 'Completed',
                                        'recruiter_name':appl.x_hire_created_by.id})
            

        return {'type': 'ir.actions.act_window',
                'res_model': 'history.wiz',
                'name':'View Stages',
                'view_mode': 'form',
                'target': 'new',
                'res_id':h_id,
                }
        
    def go_to_candidate(self, cr, uid, ids, context=None):
        candidate = self.browse(cr, uid, ids[0], context).x_candidate_id.id
        return {'type': 'ir.actions.act_window',
                'scr_model': 'hr.applicant',
                'res_model': 'hr.candidate',
                'view_mode': 'form',
                'target': 'current',
                'res_id':candidate,
                }
    
    def create(self, cr, uid, vals, context=None):   
        candidate=self.pool.get('hr.candidate').browse(cr, uid, vals['x_candidate_id'], context=context)
        vals['name']=candidate.x_candidate_id
        applicant=self.pool.get('hr.applicant').search(cr,uid,[('x_candidate_id','=',vals['x_candidate_id']),('job_id','=',vals['job_id'])])
        
        if 'x_doj_date' in vals:
                if vals['x_doj_date']:
                    self.onchange_doj_date(cr,uid,[],vals['x_doj_date'])

        ########################## * added and removed demo 27 Jan #######
        if candidate.x_candidate_roll_no.split(' ')[-1] == '*': 
            rm_star_cand = candidate.x_candidate_id.split('*')[0].rstrip()
            self.pool.get('hr.candidate').write(cr, uid, candidate.id, {'x_candidate_roll_no':candidate.x_candidate_roll_no.split(' ')[0],
                                                                        'x_candidate_id':rm_star_cand,
                                                                        'is_cand_tagged':False})
            
        ##################################END#########################
        if len(applicant)>0:
            raise osv.except_osv(_('Input Error!'), _('You have already applied for the Job'))
        else:
            job=self.pool.get('hr.job').browse(cr, uid, vals['job_id'], context=context)
            #cli_req_id=job.x_client_request_id.encode('ascii','ignore')
            vals['x_job']=job.x_job_id
            vals['x_job_title']=job.x_job_title
            vals['x_first_name']=candidate.x_first_name
            vals['x_last_name']=candidate.x_last_name
            vals['x_candidate_roll_no']=candidate.x_candidate_roll_no
            #  client id and requistion id data
            vals['x_cli_id']=job.x_client_id.id
            #vals['x_cli_req']=cli_req_id,
            vals['x_cli_req']= job.x_client_request_id and job.x_client_request_id.encode('ascii','ignore') or ''
            
            #to update the no of positions in process in hr_job
            self.pool.get('hr.job').write(cr,uid,vals['job_id'],{'x_no_positions_inprocess':job.x_no_positions_inprocess+1},context)
        return super(hr_applicant, self).create(cr,uid,vals,context=context) 
    
    #~ def write(self, cr, uid, ids, vals, context=None):
        #~ cur_id = self.browse(cr, uid, ids[0])
        #~ offer = cur_id.x_offer_status_date
        #~ if 'x_doj_date' in vals:
            #~ if vals['x_doj_date']:
                #~ self.onchange_doj_date(cr,uid,[],vals['x_doj_date'],offer) 
         #~ 
        #~ return super(hr_applicant, self).write(cr, uid, ids, vals, context)
    
    
    def onchange_doj_date(self, cr, uid, ids, x_doj_date,x_offer_status_date):
        
        if x_doj_date and x_doj_date <= str(x_offer_status_date):
            raise osv.except_osv('Invalid DOJ', 'Please enter a valid DOJ should be greater than or equal to Offer Date')

        return {}
        
    
    def reject_status(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        status_dict=dict(APP_STATUS)
        stage_status=status_dict[applicant.x_app_stages] +': Reject' 
        self.write(cr, uid, ids, {'x_stage_status': stage_status,'x_stages_status_report':'Rejected'},context)
        
        #for sample
        #~ if applicant.x_is_onboard==True:
            #~ emp_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_offer_status':'Draft','x_is_confirmation':False})
            
        return {'value': {'x_stage_status' : stage_status,'x_stages_status_report':'Rejected'}}
    
    def onhold_status(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        status_dict=dict(APP_STATUS)
        stage_status=status_dict[applicant.x_app_stages] +': On Hold' 
        self.write(cr, uid, ids, {'x_stage_status': stage_status,'x_stages_status_report':"On Hold"},context)
        #~ if applicant.x_is_onboard==True:        
            #~ emp_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_offer_status':'Draft','x_is_confirmation':False})
            
        return {'value': {'x_stage_status' : stage_status,'x_stages_status_report':'On Hold'}}
    
    def on_change_join_status(self,cr,uid,ids,x_hire_candidate_report,context=None):
        if x_hire_candidate_report=='Yes':

            stage_status='Joined'
            self.write(cr, uid, ids, {'x_prog_join':100.00,'x_stage_status': stage_status,'x_stages_status_report':"Joined"},context)
            return {'value': {'x_prog_join':100.00,'x_stage_status': stage_status,}}
        else:

            stage_status='Joined: In Process'
            self.write(cr, uid, ids, {'x_prog_join':100.00,'x_stage_status': stage_status,'x_stages_status_report':"In Process"},context)
            return {'value': {'x_prog_join':100.00,'x_stage_status': stage_status,}} 
        return True
        
    def next_stage(self, cr, uid, ids, context=None):
        
        #~ applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)

        applicant1 = self.pool.get('hr.applicant').browse(cr, uid, ids, context=context)
        applicant= applicant1[0] if isinstance(applicant1,list) else applicant1
            
        if applicant.stage_id.id == 05 :
            stage = applicant.stage_id.id + 5
        else :
            stage=applicant.stage_id.id+10
        stage_status_updated=1
        vals={}

        if applicant.job_id.x_requisition_status.name != 'Accepting':
            if not stage == 70:
                raise osv.except_osv(_('Input Error!'), _('The Job is not in accepting stage.Change the job status to Accepting to proceed'))


        if stage ==10:
            if not applicant.x_candidate_identified_comments:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))

            vals={
                  'x_initial_screening_date':datetime.now(),
                  'x_initialscreen_created_by':uid,
                  'x_prog_initial':100.00,
                  }


        if stage ==20:
            ####### Display an alert message when an applicant is processing for multiple jobs at same time.
            app=self.search(cr,uid,[('x_candidate_id','=',applicant.x_candidate_id.id),('stage_id','>',5),('stage_id','<',70)])
            proc_job=[]
            if not applicant.x_comments:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))

            vals={
                  'x_tcmg_manager_date':datetime.now(),
                  'x_tcmg_created_by':uid,
                  'x_prog_to_cli_part':100.00,
                  
                  }
        if stage ==30:
            if not applicant.x_tcmg_comments:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
            vals={
                  'x_submit_to_client_date':datetime.now() ,
                  'x_client_created_by':uid,
                  'x_prog_to_cli':100.00,
                  }
        
        if stage ==40:
            if not applicant.x_client_comments:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
            vals={
                  'x_interview_date': datetime.now(),
                  'x_interview_created_by':uid ,
                  'x_prog_interview':100.00,
        
                  }
        if stage ==50:
            ### Interview one2many must have 1 line item otherwise raise msg and comment is not null ##
            if not applicant.x_shedule_meeting_link_ids:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Schedule Interview'))
            if not applicant.x_interview_comments:
                raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
            vals={
                  'x_offer_status_date': datetime.now(),
                  'x_offer_created_by':uid,
                  'x_prog_off':100.00,
                  'x_stage_status':"Offered",
                  'x_stages_status_report':'Offered',
                  }
        if stage ==60:
            ##### check offer accpeted then proceed otherwise raise a alert#############
            if applicant.x_stage_status =='Decision: Offer Accepted':
                #~ off_sear=self.pool.get('hr.offer.terms').search(cr, uid, [('hr_applicant_id','=',ids[0])])applicant
                off_sear=self.pool.get('hr.offer.terms').search(cr, uid, [('hr_applicant_id','=',applicant.id)])
                plan_st_date_join= self.pool.get('hr.offer.terms').browse(cr, uid, off_sear[0]).x_planned_start_date
                plan_end_date_join= self.pool.get('hr.offer.terms').browse(cr, uid, off_sear[0]).x_planned_end_date
                        
                curr_date = datetime.now()
                today_date = curr_date.strftime('%Y-%m-%d')
                #print"hire11111111111111111111111111111111111111",applicant.x_hire_start_date,today_date,plan_st_date_join
                
                #print"greater +++++++++++++++++++++++++++++++++++++++++++++",plan_st_date_join >= today_date,"Lesser",plan_st_date_join <= today_date
                #~ if applicant.x_hire_start_date <= today_date:
                    #~ print"*******************************************************************************"           
                    #~ raise osv.except_osv(_('Warning !!'),_('Join Date'))
                if (plan_st_date_join <= today_date) == False :
                    raise osv.except_osv(_('Warning !!'),_("Can't Proceed the Candidate Before Joining date"))
                if not applicant.x_offer_comments:
                            raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
                if applicant.x_country_sep == '2':
                    vals={
                      #~ 'x_hire_start_date': datetime.now(),
                      'x_hire_start_date': plan_st_date_join,
                      'x_term_date': plan_end_date_join,
                      'x_hire_created_by':uid,
                      'x_prog_join':100.00,
                    }
                else:
                    vals={
                    #~ 'x_hire_start_date': datetime.now(),
                    'x_hire_start_date': plan_st_date_join,
                    'x_hire_created_by':uid,
                    'x_prog_join':100.00,
                        }
            else:
                raise osv.except_osv(_('Input Error!'), _('The Offer status should be Accepted to proceed to Join Process'))
                
            
        if stage ==70:
            if applicant.x_hire_candidate_report=='No' or applicant.x_hire_candidate_report==False :
                raise osv.except_osv(_('Input Error!'), _('The candidate reported status should be yes to proceed to Term Process'))
            else:
                if applicant.x_is_employee == False:
                    raise osv.except_osv(_('Warning !!'),_('Candidate Should be Hired'))
                if not applicant.x_hire_comments:
                    raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
                curr_date = datetime.now()
                today_date = curr_date.strftime('%Y-%m-%d')
                if applicant.x_country_sep == '2':
                    if applicant.x_term_date == False:
                        raise osv.except_osv(_('Warning !!'),_('Please Enter Term Date'))
                    if (applicant.x_term_date <= today_date) == False :
                            raise osv.except_osv(_('Warning !!'),_("Can't Proceed the Candidate Before Term Date")) 
                vals={
                      'x_term_process_date': applicant.x_term_date,
                      'x_term_created_by':uid,
                      'x_prog_term':100.00,
                      'x_first_name':applicant.x_candidate_id.x_first_name,
                      'x_middle_name':applicant.x_candidate_id.x_middle_name,
                      'x_last_name':applicant.x_candidate_id.x_last_name,
                      'x_ssn':applicant.x_candidate_id.x_ssn,
                      'x_street':applicant.x_candidate_id.x_street1,
                      'x_city': applicant.x_candidate_id.x_city,
                      'x_state_id':applicant.x_candidate_id.state_id.name,
                      'x_zip_codes':applicant.x_candidate_id.x_zip_code,
                      'x_candidate':applicant.x_candidate_id.x_candidate_roll_no,
                      'x_hire_date':applicant.x_hire_start_date,
                       #'x_planned_end_date':applicants.x_planned_end_date,
                      'x_clients':applicant.job_id.x_client_id.name,
                      'a.x_is_employee':False,
                      'x_stages_status_report':"Termed",
                      'x_stage_status':"Termed",
                 }           

        self.write(cr,uid,applicant.id,vals,context)
        
        if stage == 80:
            pass
        else:
            
            #to update the no of positions in process in hr_job
            cr.execute("""select count(*) from hr_applicant 
            where job_id=%s and stage_id in (5,10,20,30,40,50)""",([applicant.job_id.id]))
            counts=cr.fetchall()
            cr.execute("""select count(*) from hr_applicant 
            where job_id=%s and stage_id >= 50""",([applicant.job_id.id]))
            offer_count = cr.fetchall()
            print "IN Process===", counts[0][0], applicant.job_id.id
            print "Offered ======", offer_count[0][0]
            hr_job=self.pool.get('hr.job').write(cr,uid,applicant.job_id.id,{'x_no_positions_inprocess':counts[0][0],
                                        'x_no_positions_offered':offer_count[0][0]},context)
            
            if stage==70:
                stage_status="Termed"
            else:
                stage_status=applicant.stage_id.name +': In Process'
            
            self.write(cr, uid, ids, {'stage_id': stage,'x_app_stages':stage,'x_stages_status_report':stage_status},context)
            app1 = self.pool.get('hr.applicant').browse(cr, uid, ids, context=context)
            app = app1[0] if isinstance(app1,list) else app1
            if stage ==70:
                stage_status_updated= "Termed"
            else:
                stage_status_updated= app.stage_id.name+': In Process'
            self.write(cr, uid, ids, {'x_stages_status_report':stage_status,'x_stage_status' : stage_status_updated,'x_view_status' :stage},context)
        return {'value': {'x_stage_status' : stage_status_updated,
                          'x_view_status' :stage,
                          'x_stages_status_report':stage_status,
                          }}
    
           
    def term_process(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        stage=applicant.stage_id.id+10
        stage_status_updated=1
       
            
        stage_status='Termed' 
       
        self.write(cr, uid, ids, {'stage_id': stage,'x_app_stages':stage,'x_stages_status_report':'In Process'},context)
        app = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        stage_status_updated= app.stage_id.name+': In Process'
        self.write(cr, uid, ids, {'x_stage_status' : stage_status_updated},context)
        return {'value': {'x_stage_status' : stage_status_updated}}
    
    
    def back_to_previous_stage(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        vals={}
        if applicant.stage_id.id ==10:
            vals={'x_prog_initial':0.00}
        elif applicant.stage_id.id ==20:
            vals={'x_prog_to_cli_part':0.00}
        elif applicant.stage_id.id ==30:
            vals={'x_prog_to_cli':0.00}
        elif applicant.stage_id.id ==40:
            vals={'x_prog_interview':0.00}
        elif applicant.stage_id.id ==50:
            vals={'x_prog_off':0.00}
        elif applicant.stage_id.id ==60:
            vals={'x_prog_join':0.00}
        elif applicant.stage_id.id ==70:
            vals={'x_prog_term':0.00, 'x_term_created_by':'','x_term_process_date':False}
        
        self.write(cr, uid, ids,vals,context)
        if applicant.stage_id.id == 10 :
            stage=applicant.stage_id.id-5
        else : 
            stage=applicant.stage_id.id-10
        stage_status_updated=1
        stage_status=applicant.stage_id.name +': In Process' 
        self.write(cr, uid, ids, {'stage_id': stage,'x_app_stages':stage,'x_stages_status_report':'In Process'},context)
        app = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        stage_status_updated= app.stage_id.name+': In Process'
        self.write(cr, uid, ids, {'stage_id': stage,'x_stage_status' : stage_status_updated},context)
        return {'value': {'x_stage_status' : stage_status_updated}}
            
    def offer_decline(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        stage=applicant.stage_id.id+10
        if stage == 80:
            pass
        else:
            status_dict=dict(APP_STATUS)
            stage_status=status_dict[applicant.x_app_stages]  +': Offer Rejected' 
            self.write(cr, uid, ids, {'x_stage_status' : stage_status,'x_offer_status_bool':False,'x_stages_status_report':'Offer Declined'},context)
        #~ if applicant.is_user ==True:
            #~ cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ cr.execute("""update hr_candidate_onboard set x_offer_status='Draft' where id=%s
            #~ """,([cand_obj[0]]))       
        #~ if applicant.x_is_onboard ==True:
           #~ 
             #~ #offer declined -candidate screen
            #~ cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ emp_id_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ cr.execute("""update hr_employee set x_is_onboard ='False' where id=%s
            #~ """,([emp_id_obj[0]]))
            #~ cr.execute("""update hr_applicant set is_offer_accept='False' where id=%s
            #~ """,([applicant.id]))
            #~ cr.execute("""update hr_applicant set x_is_onboard='False' where id=%s
            #~ """,([applicant.id]))
            #~ cr.execute("""update hr_candidate_onboard set x_offer_status='Draft' where id=%s
            #~ """,([cand_obj[0]]))
                   
        return True
    
    def offer_withdrawn(self, cr, uid, ids, context=None):
        
        applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        stage=applicant.stage_id.id+10
        if stage == 80:
            pass
        else:
            status_dict=dict(APP_STATUS)
            stage_status=status_dict[applicant.x_app_stages]  +': Offer Withdrawn' 
            self.write(cr, uid, ids, {'x_stage_status' : stage_status,'x_offer_status_bool':False,'x_stages_status_report':'Offer Withdrawn'},context)
        #~ if applicant.is_user ==True:
            #~ cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ cr.execute("""update hr_candidate_onboard set x_offer_status='Draft' where id=%s
            #~ """,([cand_obj[0]]))
        #~ if applicant.x_is_onboard ==True:
           #~ 
             #~ #offer declined -candidate screen
            #~ cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ emp_id_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
            #~ cr.execute("""update hr_employee set x_is_onboard ='False' where id=%s
            #~ """,([emp_id_obj[0]]))
            #~ cr.execute("""update hr_applicant set is_offer_accept='False' where id=%s
            #~ """,([applicant.id]))
            #~ cr.execute("""update hr_applicant set x_is_onboard='False' where id=%s
            #~ """,([applicant.id]))
            #~ cr.execute("""update hr_candidate_onboard set x_offer_status='Draft' where id=%s
            #~ """,([cand_obj[0]]))
                   
        return True
    
    def onchange_status(self, cr, uid,ids,x_app_stages,context=None):
        if ids:
            if x_app_stages:
                applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
                
                if x_app_stages <= applicant.stage_id.id:
                    if x_app_stages != applicant.stage_id.id:
                        self.write(cr, uid, ids, {'x_app_stages':x_app_stages,'x_on_change_view_status':True},context)
                        return {'value': {'x_app_stages' : x_app_stages,'x_on_change_view_status':True}}
                    else:
                        self.write(cr, uid, ids, {'x_app_stages':x_app_stages},context)
                        return {'value': {'x_app_stages' : x_app_stages,'x_on_change_view_status':False}}
                else:
                    return {'value': {}}
            else:
                return {'value': {}}
        else:
            return {'value': {}}
    
    def onchange_job(self, cr, uid,ids,candidate_id,job_id,context=None):
        if candidate_id:
            candidate = self.pool.get('hr.candidate').browse(cr, uid, candidate_id, context=context)
            job = self.pool.get('hr.job').browse(cr, uid, job_id, context=context)
            applicant=self.pool.get('hr.applicant').search(cr,uid,[('x_candidate_id','=',candidate.x_candidate_id),('job_id','=',job.id)])
            if len(applicant)>0:
                raise osv.except_osv(_('Input Error!'), _('You have already applied for the Job'))
                return {'value': {'job_id':''}}

        return True


    def case_with_emp(self, cr, uid, ids, context=None):
        stage_status="Joined"
        if context is None:
            context = {}
            
            
        candidate=self.pool.get('hr.candidate')
        
        hr_applicant = self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        
        if not hr_applicant.x_hire_candidate_report =='Yes':
            raise osv.except_osv(_('Employee Creation'), _('Candidate reported should be yes to create an employee.'))
        
        if hr_applicant.x_is_employee:
            raise osv.except_osv(_('Employee Creation'), _('The candidate is already become an employee'))
        candidate_obj=candidate.browse(cr,uid,hr_applicant.x_candidate_id.id,context)
        hr_employee = self.pool.get('hr.employee')
        model_data = self.pool.get('ir.model.data')
        act_window = self.pool.get('ir.actions.act_window')
                 
           
        hr_job_obj = self.pool.get('hr.job')
        hr_job = hr_job_obj.browse(cr,uid,hr_applicant.job_id.id,context=context)
        x_no_positions_filled = hr_job.x_no_positions_filled+1
        x_yet_to_hire = hr_job.x_total_positions_open - x_no_positions_filled
        hr_job_obj.write(cr, uid, [hr_job.id],{'x_no_positions_filled': x_no_positions_filled,'x_yet_to_hire': x_yet_to_hire}, context=context)
                
        emp_id = hr_employee.create(cr,uid,{     
                                            'name':candidate_obj.x_first_name,            
                                            'job_id': hr_applicant.job_id.id,                                                    
                                             'x_first_name':candidate_obj.x_first_name,
                                             'x_middle_name':candidate_obj.x_middle_name,
                                             'x_last_name':candidate_obj.x_last_name,                                                     
                                             'x_gender':candidate_obj.x_gender,
                                             'x_dob':candidate_obj.x_dob,
                                             'x_phone':candidate_obj.x_phone,
                                             'x_mobile':candidate_obj.x_mobile,
                                             'x_email_from':candidate_obj.x_email_from,
                                             'x_secondary_email':candidate_obj.x_secondary_email,
                                             'x_permanent_address':candidate_obj.x_street1,
                                             'x_perm_street':candidate_obj.x_street2,
                                             'x_perm_city':candidate_obj.x_city,
                                            'perm_country_id':candidate_obj.country_id.id,
                                            'perm_state_id':candidate_obj.state_id.id,
                                             'x_perm_zip_code':candidate_obj.x_zip_code,                                                   

#                                             'x_master_degree':candidate_obj.x_master_degree.id,
#                                              'x_master_university':candidate_obj.x_master_university,
#                                              'x_master_year_of_passing':candidate_obj.x_master_year_of_passing,
#                                              'x_master_percentage':candidate_obj.x_master_percentage,
#                                             'x_bachelor_degree':candidate_obj.x_bachelor_degree.id,
#                                              'x_bachelor_university':candidate_obj.x_bachelor_university,
#                                              'x_bachelor_year_of_passing':candidate_obj.x_bachelor_year_of_passing,
#                                              'x_bachelor_percentage':candidate_obj.x_bachelor_percentage,
                                             'x_exp_in_years':candidate_obj.x_exp_in_years,
                                             'x_exp_in_months':candidate_obj.x_exp_in_months,
                                             'x_passport_no':candidate_obj.x_passport_no,
                                             'x_passport_validity':candidate_obj.x_passport_validity,
                                             'x_work_authorization':candidate_obj.x_work_authorization,
                                             'x_auth_validity':candidate_obj.x_auth_validity,
                                             'x_relocate':candidate_obj.x_relocate,
                                             'x_application_summary':candidate_obj.x_application_summary,                                               
                                                                                                                                                           
                                             })
        
        self.write(cr, uid, ids[0],{'x_is_employee': True,'x_stages_status_report':"Joined",'x_stage_status' : stage_status})

        return {'type': 'ir.actions.act_window',
                'res_model': 'hr.employee',
                'view_mode': 'form',
                'target': 'current',
                'res_id':emp_id,
                'context':{'group_by':False},
                }
    
    def Offer_accepted(self, cr, uid, ids, context):               
        applicant = self.browse(cr, uid, ids[0], context=context)
        usr = self.pool.get('res.users').browse(cr, uid, uid)
        hr_offers=self.pool.get('hr.offer.terms')
        vals={
                                    'hr_applicant_id':applicant.id,
                                       'x_candidate_id':applicant.x_candidate_id.id,
                                       'job_id':applicant.job_id.id,
                                       #~ 'x_title_offered':'',
                                       #~ 'x_planned_start_date':,
                                       
                    'x_offer_cur_salary_payby':"Year" if usr.x_department_id.name == 'HTC_ROW' else "Month",
                    'x_offer_exp_salary_payby':"Year" if usr.x_department_id.name == 'HTC_ROW' else "Month",
                    'x_offer_base_salary_payby':"Year" if usr.x_department_id.name == 'HTC_ROW' else "Month",
                    
                    'x_offer_cur_salary_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_exp_salary_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_base_salary_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_joining_bonus_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_relocation_payment_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_referral_bonus_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",

                    'x_bill_rate_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_retension_bonus_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_lca_wage_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_utility_bonus_currency':'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_hourly_currency': 'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",
                    'x_offer_special_payment_currency': 'INR' if usr.x_department_id.name == 'HTC_ROW' else "USD",


                     }           
        sear_app = hr_offers.search(cr,uid,[('hr_applicant_id','=',ids[0])])
        view_us_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'custom_hr_applicant', 'view_offer_terms_us_forms')
        view_row_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'custom_hr_applicant', 'view_offer_terms_row_forms')
        view_us_id = view_us_ref and view_us_ref[1] or False,
        view_row_id = view_row_ref and view_row_ref[1] or False,
            
            
        #~ if applicant.x_is_onboard ==True:
            #~ emp_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])               
            #~ self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_offer_status':'New','x_is_confirmation':True}) 
        #~ if applicant.is_user ==True:  
            #~ emp_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])               
            #~ self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_offer_status':'New','x_is_confirmation':True}) 
        if not sear_app:
            offer_ids=hr_offers.create(cr,uid,vals)
            return {'type': 'ir.actions.act_window',
                                        'res_model': 'hr.offer.terms',
                                        'view_mode': 'form',
                                        'target': 'new',
                                        'res_id': offer_ids or False,
                                        'view_id': view_us_id if applicant.x_country_sep == '2' else view_row_id,
                                        'context':{'group_by':False},
                                        }
        else:
            return {'type': 'ir.actions.act_window',
                                        'res_model': 'hr.offer.terms',
                                        'view_mode': 'form',
                                        'target': 'new',
                                        'res_id': sear_app[0] or False,
                                        'view_id': view_us_id if applicant.x_country_sep == '2' else view_row_id,
                                        'context':{'group_by':False},
                                        }
    def cancel_offer(self,cr,uid,ids,context):
        return True
 
    def action_generate_reports(self, cr, uid, ids, context=None):

        cur_id = self.browse(cr, uid, ids[0], context=context)
        
        
        cad_name = "_"+cur_id.x_first_name+"_"+cur_id.x_last_name
        
    
        if cur_id.x_doc_reports:
            if cur_id.x_doc_reports==4:
                rep_name='New Hire Authorization US - .odt'
                fil_name='New Hire Authorization US'
                
            elif cur_id.x_doc_reports==5:
                rep_name='Offer Letter Template For w 2 hourly With No Benefits - .odt'
                fil_name='Offer Letter Template For w 2 hourly With No Benefits'

            elif cur_id.x_doc_reports==6:
                rep_name='Offer Letter Template For w2 Salaried - .odt'
                fil_name='Offer Letter Template For w2 Salaried'

            elif cur_id.x_doc_reports==7:
                rep_name='Offer Letter For H1 To H1 Visa - .odt'
                fil_name='Offer Letter For H1 To H1 Visa'

            elif cur_id.x_doc_reports==8:
                rep_name='Employee Agreement Form For US citizens - .odt'
                fil_name='Employee Agreement Form For US citizens'
                
            elif cur_id.x_doc_reports==9:
                rep_name='Employee Agreement For H1 To H1 Visa And L1 To H1 Visa - .odt'
                fil_name='Employee Agreement For H1 To H1 Visa And L1 To H1 Visa'    
                
            elif cur_id.x_doc_reports==10:
                rep_name='HTC Addendum One Time Bonus - .odt'
                fil_name='HTC Addendum One Time Bonus'
                
            elif cur_id.x_doc_reports==11:
                rep_name='HTC Addendum Relocation Allowance - .odt'
                fil_name='HTC Addendum Relocation Allowance'
        
            elif cur_id.x_doc_reports==12:        
                rep_name='HTC Addendum Relocation Expenses - .odt'
                fil_name='HTC Addendum Relocation Expenses'
        
            elif cur_id.x_doc_reports==13:        
                rep_name='HTC Addendum Sign On Bonus - .odt'
                fil_name='HTC Addendum Sign On Bonus'
                
            elif cur_id.x_doc_reports==14:        
                rep_name='HTC Addendum Utilization Bonus - .odt'
                fil_name='HTC Addendum Utilization Bonus'

            elif cur_id.x_doc_reports==15:        
                rep_name='HTC Addendum SF Notice Period - .odt'
                fil_name='HTC Addendum SF Notice Period'
                    
            elif cur_id.x_doc_reports==16:
                rep_name='Separation/Exit US - .odt'
                fil_name='Separation/Exit US'

            elif cur_id.x_doc_reports==17:
                rep_name='Employee Agreement For EAD - .odt'
                fil_name='Employee Agreement For EAD'
                
            elif cur_id.x_doc_reports==18:
                rep_name='Offer Letter For EAD - .odt'
                fil_name='Offer Letter For EAD'   
    #######################  DOCUMENT  ATTACHMENTS   ###############################
            
            else:
                rep_name='Separation/Exit US - .odt'
                fil_name='Separation/Exit US'    
        
        elif cur_id.x_stage_status == 'Termed':
                rep_name='Separation/Exit US - .odt'
                fil_name='Separation/Exit US'       

        else:
            rep_name='New Hire Authorization US - .odt'
            fil_name='New Hire Authorization US'
        
        att_id=''  
        attachment_obj = self.pool.get('ir.attachment')
        for record in self.browse(cr, uid, ids, context=context):
            ir_actions_report = self.pool.get('ir.actions.report.xml')
        
            matching_reports = ir_actions_report.search(cr, uid,
                               [('name','=',rep_name)])
            if matching_reports:
                report = ir_actions_report.browse(cr, uid,matching_reports[0])
                report_service = 'report.' + report.report_name
                service = netsvc.LocalService(report_service)
                (result, format) = service.create(cr, uid, [record.id],
                {'model': self._name}, context=context)
                eval_context = {'time': time, 'object': record}
                
                if not report.attachment or not eval(report.attachment,eval_context):
                    # no auto-saving of report as attachment, need to do it manually
                    result = base64.b64encode(result)
                    file_name = re.sub(r'[^a-zA-Z0-9_-]', '_', fil_name)
                    file_name +=cad_name
                    file_name += ".doc"
                    attachment_id = attachment_obj.create(cr, uid,
                        {
                            'name': file_name,
                            'datas': result,
                            'datas_fname': file_name,
                            'res_model': self._name,
                            'res_id': record.id,
                            'type': 'binary'
                        }, context=context)
                    att_id=attachment_id   
            #~ self.write(cr, uid, ids, {'state':'get','data':attachment_id.datas, 'advice':advice, 'name':this.name}, context=context)            
        return { 'type': 'ir.actions.act_url', 'url': '/hr_data_download/download_attachment?id='+ str(att_id) + '&db='+ str(cr.dbname) + '&uid=' + str(uid), 'nodestroy': True, 'target': 'new'}
               
            #~ return self.pool.get('warning_box').info(cr, uid, title='ERP ALERTS', message= file_name +' Report has been successfully generated and is saved under Attachements')
                
    def action_generate_reports_ind(self, cr, uid, ids, context=None):
        
        cur_id = self.browse(cr, uid, ids[0], context=context)
        

        if cur_id.x_doc_reports_ind==1:
            rep_name='Preliminary Interview - .odt'
            fil_name='Preliminary Interview'
            
        elif cur_id.x_doc_reports_ind==2:
            rep_name='Technical Evaluation - .odt'
            fil_name='Technical Evaluation'

        elif cur_id.x_doc_reports_ind==3:
            rep_name='New Hire Authorization - .odt'
            fil_name='New Hire Authorization'

        elif cur_id.x_doc_reports_ind==4:
            rep_name='Separation/Exit - .odt'
            fil_name='Separation/Exit'
    
        else:
            rep_name='Separation/Exit - .odt'
            fil_name='Separation/Exit'
            
        attachment_obj = self.pool.get('ir.attachment')
        for record in self.browse(cr, uid, ids, context=context):
            ir_actions_report = self.pool.get('ir.actions.report.xml')
            matching_reports = ir_actions_report.search(cr, uid,
                               [('name','=',rep_name)])
            if matching_reports:
                report = ir_actions_report.browse(cr, uid,matching_reports[0])
                report_service = 'report.' + report.report_name
                service = netsvc.LocalService(report_service)
                (result, format) = service.create(cr, uid, [record.id],
                {'model': self._name}, context=context)
                eval_context = {'time': time, 'object': record}
                if not report.attachment or not eval(report.attachment,eval_context):
                    # no auto-saving of report as attachment, need to do it manually
                    result = base64.b64encode(result)
                    file_name = re.sub(r'[^a-zA-Z0-9_-]', '_', fil_name)
                    file_name += ".odt"
                    attachment_id = attachment_obj.create(cr, uid,
                        {
                            'name': file_name,
                            'datas': result,
                            'datas_fname': file_name,
                            'res_model': self._name,
                            'res_id': record.id,
                            'type': 'binary'
                        }, context=context)
            return self.pool.get('warning_box').info(cr, uid, title='ERP ALERTS', message= file_name +' Report has been successfully generated and is saved under Attachements')
######################################################################################


    def action_auto_generate_reports(self, cr, uid, value, context=None):

            users=self.pool.get('hr.applicant').browse(cr,uid,uid,context)
            #~ tcmg_1 = vals.get('x_recru_team')
            app_id = value['ids']
            app_obj=self.pool.get('hr.applicant')
            first_name = app_obj.browse(cr, uid, app_id).x_first_name
            last_name = app_obj.browse(cr, uid, app_id).x_last_name
            app_id = value['ids']
#           cur_id = self.browse(cr, uid, app_id, context=context)
            cad_name = "_"+first_name+"_"+last_name
            #print"nameeeeeeeeeeeeeeeee",cad_name,app_id.x_first_name,app_id.x_last_name
            
            for i in value['data']:
                if i:
                    if i==4:
                        rep_name='New Hire Authorization US - .odt'
                        fil_name='New Hire Authorization US'
                        
                    elif i==5:
                        rep_name='Offer Letter Template For w 2 hourly With No Benefits - .odt'
                        fil_name='Offer Letter Template For w 2 hourly With No Benefits'

                    elif i==6:
                        rep_name='Offer Letter Template For w2 Salaried - .odt'
                        fil_name='Offer Letter Template For w2 Salaried'

                    elif i==7:
                        rep_name='Offer Letter For H1 To H1 Visa - .odt'
                        fil_name='Offer Letter For H1 To H1 Visa'

                    elif i==8:
                        rep_name='Employee Agreement Form For US citizens - .odt'
                        fil_name='Employee Agreement Form For US citizens'
                        
                    elif i==9:
                        rep_name='Employee Agreement For H1 To H1 Visa And L1 To H1 Visa - .odt'
                        fil_name='Employee Agreement For H1 To H1 Visa And L1 To H1 Visa'    
                        
                    elif i==10:
                        rep_name='HTC Addendum One Time Bonus - .odt'
                        fil_name='HTC Addendum One Time Bonus'
                        
                    elif i==11:
                        rep_name='HTC Addendum Relocation Allowance - .odt'
                        fil_name='HTC Addendum Relocation Allowance'

                    elif i==12:        
                        rep_name='HTC Addendum Relocation Expenses - .odt'
                        fil_name='HTC Addendum Relocation Expenses'

                    elif i==13:        
                        rep_name='HTC Addendum Sign On Bonus - .odt'
                        fil_name='HTC Addendum Sign On Bonus'
                        
                    elif i==14:        
                        rep_name='HTC Addendum Utilization Bonus - .odt'
                        fil_name='HTC Addendum Utilization Bonus'

                    elif i==15:        
                        rep_name='HTC Addendum SF Notice Period - .odt'
                        fil_name='HTC Addendum SF Notice Period'
                            
                    elif i==16:
                        rep_name='Separation/Exit US - .odt'
                        fil_name='Separation/Exit US'

                    elif i==17:
                        rep_name='Employee Agreement For EAD - .odt'
                        fil_name='Employee Agreement For EAD'
                        
                    elif i==18:
                        rep_name='Offer Letter For EAD - .odt'
                        fil_name='Offer Letter For EAD'   
                #######################  DOCUMENT  ATTACHMENTS   ###############################
                
                
                attachment_obj = self.pool.get('ir.attachment')
                for record in self.browse(cr, uid, [app_id], context=context):
                    ir_actions_report = self.pool.get('ir.actions.report.xml')
                    matching_reports = ir_actions_report.search(cr, uid,[('name','=',rep_name)])
                    if matching_reports:
                        report = ir_actions_report.browse(cr, uid,matching_reports[0])
                        report_service = 'report.' + report.report_name
                        service = netsvc.LocalService(report_service)
                        (result, format) = service.create(cr, uid, [record.id],
                        {'model': self._name}, context=context)
                        eval_context = {'time': time, 'object': record}
                        if not report.attachment or not eval(report.attachment,eval_context):
                            # no auto-saving of report as attachment, need to do it manually
                            result = base64.b64encode(result)
                            file_name = re.sub(r'[^a-zA-Z0-9_-]', '_', fil_name)
                            file_name +=cad_name
                            file_name += ".odt"
                            attachment_id = attachment_obj.create(cr, uid,
                                {
                                    'name': file_name,
                                    'datas': result,
                                    'datas_fname': file_name,
                                    'res_model': self._name,
                                    'res_id': record.id,
                                    'type': 'binary'
                                }, context=context)
                            att_id=attachment_id   
        #~ print'testing data @@@@@@%s' ,att_id    
            return True





    def action_makeMeeting(self, cr, uid, ids, context=None):
        """ This opens Meeting's calendar view to schedule meeting on current applicant
            @return: Dictionary value for created Meeting view
        """
        applicant = self.browse(cr, uid, ids[0], context)
        category = self.pool.get('ir.model.data').get_object(cr, uid, 'hr_recruitment', 'categ_meet_interview', context)
        res = self.pool.get('ir.actions.act_window').for_xml_id(cr, uid, 'base_calendar', 'action_crm_meeting', context)
        res['context'] = {
            'default_partner_ids': applicant.partner_id and [applicant.partner_id.id] or False,
            'default_user_id': uid,
            'default_name': applicant.name,
            'default_categ_ids': category and [category.id] or False,
        }
        return res

    def onboard(self, cr, uid, ids, context=None):
       
        if context is None:
            context = {}
        hr_applicant = self.browse(cr, uid, ids[0], context=context)    
        if not hr_applicant.x_offer_comments:
            raise osv.except_osv(_('Warning !!'),_('Please Enter Your Comments'))
        if hr_applicant.x_is_onboard:
            raise osv.except_osv(_('Onboard'), _('The candidate is already in onboard stage'))
        if not hr_applicant.x_stage_status== 'Offered: Offer Accepted': 
            raise osv.except_osv(_('Offer'), _('The Offer status should be Accepted to proceed to Join Process'))
   
        
        candidate=self.pool.get('hr.candidate')       
        candidate_obj=candidate.browse(cr,uid,hr_applicant.x_candidate_id.id,context)
        
        hr_offer = self.pool.get('hr.offer.terms')
        hr_offer_id=hr_offer.search(cr,uid,[('hr_applicant_id','=',ids[0])])
        offer_obj = hr_offer.browse(cr,uid,hr_offer_id,context=context)
        qual_br = self.pool.get('hr.applicant.qualification')
        qual=qual_br.search(cr, uid, [('parent_id_qual','=',candidate_obj.id)])
        exp_br = self.pool.get('previous.employment.details')
        exp_obj = exp_br.search(cr,uid,[('x_emplmt_id','=',candidate_obj.id)])
        
        passport = self.pool.get('hr.passport')
        hr_employee = self.pool.get('hr.employee')
        model_data = self.pool.get('ir.model.data')
        act_window = self.pool.get('ir.actions.act_window')
        ##########

        hr_job_obj = self.pool.get('hr.job')
        hr_job = hr_job_obj.browse(cr,uid,hr_applicant.job_id.id,context=context)
        x_no_positions_filled = hr_job.x_no_positions_filled+1
        x_yet_to_hire = hr_job.x_total_positions_open - x_no_positions_filled
        hr_job_obj.write(cr, uid, [hr_job.id],{'x_no_positions_filled': x_no_positions_filled,'x_yet_to_hire': x_yet_to_hire}, context=context)
        #############################
         
        emp_obj=self.pool.get('hr.employee').search(cr,uid,[('x_candidate_roll_no','=',hr_applicant.x_candidate_roll_no)])
        hr_emp=self.pool.get('hr.employee').browse(cr,uid,emp_obj[0],context).is_experienced
        
        if offer_obj[0].is_experienced=='FRESHER':
            self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_is_onboard':True,'x_is_confirmation':True,'is_experienced':False})
        else:
            self.pool.get('hr.employee').write(cr,uid,emp_obj[0],{'x_is_onboard':True,'x_is_confirmation':True,'is_experienced':True})
        
        self.write(cr, uid, ids[0],{'x_is_employee': False,'x_is_onboard':True,
                            'x_hire_start_date':offer_obj[0].x_planned_start_date,
                  'x_hire_created_by':uid,
                  #~ 'x_prog_join':100.00,
                  'x_stage_status' : 'Onboard: In Process',
                  'x_stages_status_report':"Onboard: In Process",  })

        
        return self.pool.get('warning_box').info(cr, uid, title='Onboard Stage', message='Candidate on Onboarding Stage')
        return True 

    def link_to_candidate(self,cr,uid,ids,context=None):
        applicant=self.pool.get('hr.applicant').browse(cr, uid, ids[0], context=context)
        hr_cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)])
        if hr_cand_obj:
            return {'type': 'ir.actions.act_window',
                'res_model': 'hr.candidate.onboard',
                'view_mode': 'tree,form',
                'target': 'current',
                #'view_id':view_id,
                'name':"Candidate",
                'domain':[('x_candidate_roll_no','=',applicant.x_candidate_roll_no)],
                'context':{'group_by':False},
                }
    def generate_login(self,cr,uid,ids,context=None):
        hr_applicant = self.pool.get('hr.applicant').browse(cr,uid,ids[0],context)
        candidate_obj = self.pool.get('hr.candidate').browse(cr,uid,hr_applicant.x_candidate_id.id,context) 
        usr_obj = self.pool.get('user.credential').create(cr,uid,{'x_login':hr_applicant.x_candidate_roll_no,'x_password':candidate_obj.x_mobile})
        hr_offer = self.pool.get('hr.offer.terms')
        hr_offer_id=hr_offer.search(cr,uid,[('hr_applicant_id','=',ids[0])])
        offer_obj = hr_offer.browse(cr,uid,hr_offer_id,context=context)
        qual_br = self.pool.get('hr.applicant.qualification')
        qual=qual_br.search(cr, uid, [('parent_id_qual','=',candidate_obj.id)])
        exp_br = self.pool.get('previous.employment.details')
        exp_obj = exp_br.search(cr,uid,[('x_emplmt_id','=',candidate_obj.id)])
        
        passport = self.pool.get('hr.passport')
        hr_employee = self.pool.get('hr.employee')
        model_data = self.pool.get('ir.model.data')
        act_window = self.pool.get('ir.actions.act_window')
        ##########

        hr_job_obj = self.pool.get('hr.job')
        hr_job = hr_job_obj.browse(cr,uid,hr_applicant.job_id.id,context=context) 
        des_obj= self.pool.get('designation').search(cr,uid,[('designation_name','=',offer_obj[0].x_title_offered.lower().strip())])

           
        if hr_applicant.is_user == False:                                     
            ###user creation
            user_obj = self.pool.get('res.users')
            usr_br=user_obj.create(cr, uid, {'name':hr_applicant.x_first_name,'login':hr_applicant.x_candidate_roll_no,'password':candidate_obj.x_mobile}, context)          
            usr_grp_list = self.pool.get('res.groups').search(cr,uid,[('id','>',0)])            
            for i in usr_grp_list:
                usr_list_id=self.pool.get('res.groups').browse(cr,uid,i,context)

                if usr_list_id.name == "Candidate Link":
                   
                    cr.execute('''
                    INSERT INTO res_groups_users_rel values(%s,%s)

                             ''',(usr_br,usr_list_id.id))   

                            
            self.write(cr,uid,hr_applicant.id,{'is_user':True},context)
            emp_id = hr_employee.create(cr,uid,{     
                                            'name':candidate_obj.x_first_name,            
                                            'job_id': hr_applicant.job_id.id, 
                                             'x_candidate_id':hr_applicant.x_candidate_id.id,
                                             'x_first_name':candidate_obj.x_first_name,
                                             'x_middle_name':candidate_obj.x_middle_name,
                                             'x_last_name':candidate_obj.x_last_name,      
                                             'x_gender':candidate_obj.x_gender,
                                             'x_dob':candidate_obj.x_dob_date,
                                             'x_doj':offer_obj[0].x_planned_start_date,
            #                                 'date_of_join':offer_obj[0].x_planned_start_date,
                                              'x_designation':offer_obj[0].x_title_offered,
                                             'x_phone':candidate_obj.x_phone,
                                             'x_mobile':candidate_obj.x_mobile,
                                             'x_email_from':candidate_obj.x_email_from,
                                             'x_permanent_address':candidate_obj.x_street1,
                                             'x_perm_street':candidate_obj.x_street2,
                                             'x_perm_city':candidate_obj.x_city,
                                             'perm_country_id':candidate_obj.country_id.id,
                                             'perm_state_id':candidate_obj.state_id.id,                                                     
                                             'x_zip_code':candidate_obj.x_zip_code,                                              
                                             'x_pan':candidate_obj.x_pan,
                                             'x_relocate':candidate_obj.x_relocate,
                                             #######R####
                                             'x_hr_applicant_from_id':hr_applicant.id,
                                             'x_candidate_roll_no':hr_applicant.x_candidate_roll_no,
                                             'x_client':hr_job.x_client_id.name,
                                             'x_location':hr_job.x_work_location,
                                             'x_is_onboard':False,
                                             # 'x_user_id':cand_usr_id,
                                             'x_designation_id':des_obj[0],
                                             
                                         })
        
            
            
               
            #~ if qual:
                #~ for i in qual:
                    #~ self.pool.get('hr.applicant.qual').create(cr, uid, { 'x_degree':qual_br.browse(cr,uid,i).x_degree,
                                                                         #~ 'x_course_name':qual_br.browse(cr,uid,i).x_course_name,
                                                                         #~ 'x_percentage':qual_br.browse(cr,uid,i).x_percentage,
                                                                         #~ 'x_edu_month':qual_br.browse(cr,uid,i).x_edu_month,
                                                                         #~ 'x_edu_year':qual_br.browse(cr,uid,i).x_edu_year,
                                                                         #~ 'x_university':qual_br.browse(cr,uid,i).x_university,
                                                                         #~ 'parent_id_qual':emp_id})

            
           

            onb_obj=self.pool.get('hr.candidate.onboard').create(cr,uid,{'x_candidate_user':usr_br,
                                                                     'x_first_name':candidate_obj.x_first_name,
                                                                    'x_candidate_roll_no':hr_applicant.x_candidate_roll_no,
                                                                 'x_middle_name':candidate_obj.x_middle_name,
                                                                 'x_last_name':candidate_obj.x_last_name,      
                                                                 'x_gender':candidate_obj.x_gender,
                                                                 'x_dob':candidate_obj.x_dob_date,
                                                                 'x_doj':offer_obj[0].x_planned_start_date,
                                                                 'x_designation':offer_obj[0].x_title_offered,
                    #                                              'date_of_join':offer_obj[0].x_planned_start_date,
                                                                 'x_phone':candidate_obj.x_phone,
                                                                 'x_mobile':candidate_obj.x_mobile,
                                                                 'x_email_from':candidate_obj.x_email_from,
                                                                 'x_permanent_address':candidate_obj.x_street1,
                                                                 'x_perm_street':candidate_obj.x_street2,
                                                                 'x_perm_city':candidate_obj.x_city,
                                                                 'perm_country_id':candidate_obj.country_id.id,
                                                                 'perm_state_id':candidate_obj.state_id.id,                                                     
                                                                 'x_zip_code':candidate_obj.x_zip_code,                                              
                                                                 'x_pan':candidate_obj.x_pan,
                                                                 'x_client':hr_job.x_client_id.id,
                                                                 'x_location':hr_job.x_work_location,
                                                                 'x_candidate_id':candidate_obj.x_candidate_id,
                                                                 'is_link':True,
                                                                 'x_recruiter':hr_applicant.x_offer_created_by.id,
                                                                 #'x_user_id':cand_usr_id,
                                                                 },context)

            #~ if exp_obj:
                #~ for i in exp_obj:
                    #~ self.pool.get('cand.working.experience').create(cr, uid, {'x_employer':exp_br.browse(cr,uid,i).x_employeer,
                                                         #~ 'x_start_date':exp_br.browse(cr,uid,i).x_exp_start_date,
                                                         #~ 'x_end_date':exp_br.browse(cr,uid,i).x_exp_end_date,
                                                         #~ 'x_role':exp_br.browse(cr,uid,i).x_role,
                                                         #~ 'x_technology':exp_br.browse(cr,uid,i).x_tech,
                                                         #~ 'parent_id_cand_experience':onb_obj})

                    #~ self.pool.get('cand.background.verification').create(cr, uid, {'bgv_employer':exp_br.browse(cr,uid,i).x_employeer,
                                                         #~ 'bgv_start_date':exp_br.browse(cr,uid,i).x_exp_start_date,
                                                         #~ 'bgv_end_date':exp_br.browse(cr,uid,i).x_exp_end_date,
                                                         #~ 'bgv_role':exp_br.browse(cr,uid,i).x_role,
                                                         #~ 'bgv_technology':exp_br.browse(cr,uid,i).x_tech,
                                                         #~ 'parent_id_cand_bgv':onb_obj})

            #~ if qual:
                #~ for i in qual:
                    #~ self.pool.get('hr.applicant.qualifications').create(cr, uid, { 'x_degree':qual_br.browse(cr,uid,i).x_degree,
                                                         #~ 'x_course_name':qual_br.browse(cr,uid,i).x_course_name,
                                                         #~ 'x_percentage':qual_br.browse(cr,uid,i).x_percentage,
                                                         #~ 'x_edu_month':qual_br.browse(cr,uid,i).x_edu_month,
                                                         #~ 'x_edu_year':qual_br.browse(cr,uid,i).x_edu_year,
                                                         #~ 'x_university':qual_br.browse(cr,uid,i).x_university,
                                                                     #~ 'parent_id_qualification':onb_obj})

        
                   

        cand_obj=self.pool.get('hr.candidate.onboard').search(cr,uid,[('x_candidate_roll_no','=',hr_applicant.x_candidate_roll_no)])
        if offer_obj[0].is_experienced=='FRESHER':   
            cr.execute("""update hr_candidate_onboard set is_experienced='False' where id=%s
                """,([cand_obj[0]]))
        
        else:
            cr.execute("""update hr_candidate_onboard set is_experienced='True' where id=%s
                """,([cand_obj[0]]))

        return {'type': 'ir.actions.act_window',

                        'scr_model': 'hr.applicant',  
                        'res_model': 'user.credential',              
                        'view_mode': 'form',
                        'target': 'new',
                        'res_id':usr_obj,
               
                }



hr_applicant()

class crm_meeting_type(osv.Model):
    _inherit = 'crm.meeting.type' 
    
crm_meeting_type()  
  
class crm_meeting(osv.Model):
    """ Model for CRM meetings """
    _inherit = 'crm.meeting' 
    _columns = {
        
        'x_hr_app_id':fields.many2one('hr.applicant',"HR Applicant"),
        'panel_employees':fields.many2many('hr.employee', 'crm_meeting_employee_rel', 'meeting_id', 'employee_id',
            string='Panel Members', states={'done': [('readonly', True)]}),
    }
        
crm_meeting()

class user_credential(osv.osv):
     _name = 'user.credential'
     _description ='User Credential'
     _columns ={
             'x_login':fields.char('Login'),
             'x_password':fields.char('Password'),
             }
user_credential()

class hr_recruitment_stage(osv.osv):
    _inherit='hr.recruitment.stage'

hr_recruitment_stage()

class res_country(osv.osv):
    _inherit= 'res.country'
res_country()

class res_country_state(osv.osv):
    _inherit='res.country.state'
res_country_state()

###########################################################33  hr_recruitment_ext.xml #########################################

<?xml version="1.0"?>
<openerp>
    <data>
    	
			

		 <menuitem id="menu_hr_main_reportin" parent="hr.menu_hr_root" name="Reports" sequence="5"/> 
 <!-- #################################################################################################-->  
		 <!-- hr.candidate view -->
		
	 <record model="ir.ui.view" id="candidate_source_form">
        <field name="name">hr.candidate</field>
        <field name="model">hr.candidate</field>
        <field name="type">form</field>
        <field name="arch" type="xml">
        	<form string="Applicant Creation Form" version="7.0">
	            <sheet>
	            		<group>
	            		<div class="oe_title">
		                            <label for="x_first_name"  invisible="1" class="oe_edit_only"/>
		                            <h1><field name="x_first_name" class="oe_inline" invisible="1"/></h1>
									<h3><font color="Blue"><field name="x_candidate_id" readonly="True" attrs="{'invisible':[('x_applicant_bool','=',False)]}"/></font></h3>
									<field name="x_applicant_bool" invisible='1'/>
		             	</div>
						<div class="oe_right oe_button_box">
                   			<button name="action_generate_resume" type="object"  groups="base.group_row_user"
                        			string="Generate / Attach Resume" />
        				</div>
						</group>
						<group col="4">
							<field name="x_skill_technology" widget="many2many_tags"/>
							<field name="users_dept" invisible="1"/>
						</group>
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
						<font size="2">General Information</font>
						
						</a>
						</div>
						<div id="collapseOne" class="accordion-body collapse in ">
						<div class="accordion-inner">
		                   <group col="4" colspan="2">
					   <field name="x_resume" filename="x_file_name" /><newline/>
			                   <field name="x_first_name" on_change="onchange_firstname(x_first_name)"/>
			                   <field name="x_middle_name" on_change="onchange_middlename(x_middle_name)"/>
							   <field name="x_last_name" on_change="onchange_check_name(x_first_name,x_last_name)"/>
							   <field name="x_gender" on_change="onchange_gender(x_gender)"/>
							   <field name="x_dob_date" on_change="onchange_dob_date(x_dob_date)"/>
							   <field name="x_street1"/>
							   <field name="x_street2"/>
							   <field name="country_id"/>
							    <field name="state_id"/>
							   <field name="x_city" />
							   <field name="x_zip_code" on_change="onchange_zipcode(x_zip_code)"/>
							   <field name="x_email_from" on_change="onchange_primary_email(x_email_from)"/>
                               <field name="x_secondary_email" on_change="onchange_secondary_email(x_secondary_email)"/>
							   <field name="x_mobile" placeholder="e.g XXXXX XXXXX" />
							   <field name="x_phone" />
							   <field name="user_id" readonly="1"/>
							   <field name="x_job_id" domain="[('x_requisition_status','=',1),('depart_id','=',1)]" on_change="onchange_applied_job(x_job_id,context)"/>
						       <field name="x_sourcetype" on_change="onchange_sourcetype(x_sourcename,context)" />
							   <field name="x_sourcename" domain="[('source_id','=',x_sourcetype)]" attrs="{'invisible':[('x_sourcetype','in',[2,3])],'required':[('x_sourcetype','not in',[2,3])]}"/>
							   <field name="x_vendor_id" attrs="{'invisible':[('x_sourcetype','!=',3)],'required':[('x_sourcetype','=',3)]}"/>
							   <field name="x_employee" attrs="{'invisible':[('x_sourcetype','!=',2)],'required':[('x_sourcetype','=',2)]}"/>
							    <field name="x_pan" on_change="validate_pan(x_pan)"/>
								<field name="x_candidate_function" />
<!--                                <field name="x_background_check" />-->
                                <field name="x_resident_status"  />
                                <field name="x_candidate_status" attrs="{'invisible':[('x_applicant_bool','=',False)]}"/>
								<field name="x_relocate" class="date_field_size" />
								<field name="x_linkedin_id"/>
								<field name="x_twitter_id"/>
								<field name="x_certified"/>
								<field name="write_date" invisible="1" />
								<field name="write_uid" invisible="1" />
								<field name="x_file_name" invisible="1" on_change="onchange_resume(x_resume,x_file_name,context)"/>
								
							</group>
					  </div>
					  </div>
					  </div>
					  </div>
					  
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsetwo">
						<font size="2">Education Information</font>
						</a>
						</div>
						<div id="collapsetwo" class="accordion-body collapse  ">
						<div class="accordion-inner">
                           	
                        <field name = "child_ids_qual" widget = "one2many">
                          <tree editable ="bottom">
                            <field name='x_degree'/>
                            <field name='x_course_name'/>
                            <field name='x_university'/>
                            <field name='x_edu_month'/>
							<field name='x_edu_year' on_change = "onchange_year(x_edu_year)"/>
                            <field name='x_percentage'/>
                        </tree>
					   </field>
						</div>
						</div>
						</div>
						</div>
						
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
						<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsethree">
						<font size="2" >Employment Information</font>
						</a>
						</div>
						<div id="collapsethree" class="accordion-body collapse  ">
						<div class="accordion-inner">
						
		                   <group col="4" colspan="2" string="Years of Experience">
		                   		<label for="x_exp_in_years"/>
								<div>
								        <field name="x_exp_in_years" placeholder="Years" class="oe_inline"/>
										 . 
								        <span class="oe_inline" attrs="{'invisible':[('x_exp_in_months','=',False)]}">  </span>
								        <field name="x_exp_in_months" class="oe_inline"/>
								</div>
								<label for="x_relevent_exp_in_years"/>
								<div>
										 <field name="x_relevent_exp_in_years" placeholder="Years"  class="oe_inline"/>
										 .
										 <span class="oe_inline" attrs="{'invisible':[('x_relevent_exp_in_months','=',False)]}">  </span>
								         <field name="x_relevent_exp_in_months" class="oe_inline"/>
								</div>
							</group>
							
							<group>
                                <field name="x_employment_ids">
                                    <tree editable='top'>
                                        <field name="x_employeer"/>
                                        <field name="x_exp_start_date"/>
                                        <field name="x_exp_end_date"/>
                                        <field name="x_role"/>
                                        <field name="x_tech"/>
                                        <field name="is_last_employer"/>
                                    </tree>
                                </field>
                            </group>
							<group string="Salary" col="4" colspan="4">
								<label for="x_current_salary"/>
								<div>
								        <field name="x_cur_salary_currency"  class="oe_inline"/>
								        <span class="oe_inline" >  </span>
								        <field name="x_current_salary" class="oe_inline"/>
										<span class="oe_inline"> </span>
								        <field name="x_cur_salary_payby" class="oe_inline"/>
								</div>
								<newline/>
								<label for="x_desired_salary"/>
								<div>
								    <field name="x_des_sal_currency" class="oe_inline"/>
								    <span class="oe_inline"> </span>
								    <field name="x_desired_salary" class="oe_inline" />
									<span class="oe_inline" > </span>
								    <field name="x_des_sal_payby" class="oe_inline" />
								</div>
							   
							</group>
					    </div>
						</div>
						</div>
						</div>
				<div class="accordion" id="accordion2">
				<div class="accordion-group">
				<div class="accordion-heading">
				<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsefour">
				<font size="2">Work Authorization</font></a>
				</div>
				<div id="collapsefour" class="accordion-body collapse  ">
				<div class="accordion-inner">
		                   <group col="6" colspan="2">
			                   <field name="x_passport_no" />
							   <field name="x_passport_validity" string="Date of Expiry" on_change="onchange_passport_validity(x_passport_validity)"/>
							   <field name="x_passport_country_id" />
							   <field name="x_work_authorization"/>
							   <field name="x_auth_validity" string="Date of Expiry" on_change="onchange_auth_validity(x_auth_validity)"/>
							   <field name="x_country_id"/>
					</group>
					
				  </div>
				  </div>
				  </div>
				  </div>
					<div class="accordion" id="accordion2">
				<div class="accordion-group">
				<div class="accordion-heading">
				<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsefive">
				<font size="2">Resume Summary</font></a>
				</div>
				<div id="collapsefive" class="accordion-body collapse  ">
				<div class="accordion-inner">
                   <group string="Resume Content" >
					   <div class="oe_title">
                       <fieldset>
            				<div class="scroll_style" >
            					
                            <field name="x_resume_content" widget="html"/>
								   <field name="create_date" invisible="1"/>
								   <field name="create_uid" invisible="1" />
								   <field name="x_candidate_role" invisible="1"/>
								   <field name="x_major_strengths" invisible="1"/>
								   <field name="x_certifications" invisible="1"/>
								   <field name="x_operating_sys" invisible="1"/>
								   <field name="x_known_languages" invisible="1"/>
								   <field name="x_version_control" invisible="1"/>
								   <field name="x_database" invisible="1"/>
								   <field name="x_scheduler" invisible="1"/>
								   <field name="x_tools_utilities" invisible="1"/>
								   <field name="x_employment_details_ids" invisible="1">
	                                    <tree editable='top'>
	                                        <field name="client"/>
	                                        <field name="city"/>
	                                        <field name="roles"/>
	                                        <field name="project_name"/>
											<field name="project_desc"/>
						   					<field name="responsibilities" />
						   					<field name="environment"/>
						  
	                                    </tree>
	                                </field>
                            </div>
                            </fieldset>
                 </div>
					</group>
               <!-- <label for="x_candidate_chat_comment" string="Comments" />
				 	
				<field name="x_candidate_chat_comment"   class="comments_width"  readonly="1" />
                
                <group>
                   <button name="%(action_candidate_chat_comment_wiz)d" string="Add Comment" type="action" />
                </group>			 -->
				  </div>
				  </div>
				  </div>
				  </div>
				  
				<!--<div class="accordion" id="accordion2">
				<div class="accordion-group">
				<div class="accordion-heading">
				<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsesix">
				<font size="2">Candidate Resume</font></a>
				</div>
				<div id="collapsesix" class="accordion-body collapse  ">
				<div class="accordion-inner">
					<group col="6" colspan="2">				
	                   <field name="x_candidate_role" />
					   <field name="x_major_strengths" />
					   <field name="x_certifications" />
					</group>
					<group col="6" colspan="2" string="Techinical Summary">
					   <field name="x_operating_sys" />
					   <field name="x_known_languages" />
					   <field name="x_version_control" />
					   <field name="x_database" />
					   <field name="x_scheduler" />
					   <field name="x_tools_utilities" />
					 </group>
					  <group>
                                <field name="x_employment_details_ids">
                                    <tree editable='top'>
                                        <field name="client"/>
                                        <field name="city"/>
                                        <field name="roles"/>
                                        <field name="project_name"/>
										<field name="project_desc"/>
					   					<field name="responsibilities" />
					   					<field name="environment"/>
					  
                                    </tree>
                                </field>
                      </group>
				  </div>
				  </div>
				  </div>
				  </div>				  
-->
				  
				  
	            </sheet>
				
				<header attrs="{'invisible':[('x_applicant_bool','=',False)]}">
					<button name="link_to_jobs" type="object" string="Attach a job" icon="STOCK_CONNECT" class="mt-left" />
					<button name="applied_jobs" type="object" string="Applied Jobs" class="mt-left_candidate" />
				</header>
				</form>
			</field>
	</record>

<!-- Candidate Tree View -->	
	<record model="ir.ui.view" id="candidate_tree">
        <field name="name">hr.candidate</field>
        <field name="model">hr.candidate</field>
        <field name="type">tree</field>
        <field name="arch" type="xml">
        	<tree string="Resource">
        	   <field name="users_dept" invisible="1"/>
               <field name="x_combine_name6" invisible="1"/>
               <field name="create_date" />
			   <field name="x_first_name"/>
			   <field name="x_last_name"/>
			   <field name="x_candidate_roll_no"/>
			   <field name="x_city"/>
			   <field name="state_id"/>
			   <field name="country_id"  />
			   <field name="x_email_from"/>
			   <field name="x_mobile"/>
			   <!-- <field name="x_skill_technology"/> -->
			   <field name="x_sourcetype" invisible="1"/>
			   <field name="x_sourcename" domain="[('source_id','=',x_sourcetype)]" />
                <field name="user_id"/>
               <field name="write_uid" />
               <field name="write_date"/>
               <field name="is_cand_tagged" invisible="1"/>
        	</tree>
		</field>
	</record>
	
	
<!-- Candidate search View -->
	<record id="view_hr_applicant_creation_search" model="ir.ui.view">
        <field name="name">Applicant Search</field>
        <field name="model">hr.candidate</field>
        <field name="arch" type="xml">
            <search string="Search Candidate">
            	<filter string="Created by Me" name="candidate_creator" icon="terp-personal" 
			domain="['|',('create_uid','=',uid),('write_uid','=',uid)]"/>
                <field name="user_id"/>
                <field name="x_job_id" filter_domain="[('x_job_id','ilike',self)]"/>
                <field name="x_combine_name6" filter_domain="[('x_combine_name6','ilike',self)]"/>
                <field name="x_first_name"/>
			    <field name="x_last_name"/>
				<field name="x_candidate_roll_no"/>
                <field name="x_mobile"/>
                <field name="x_phone"/>
				<field name="x_city"/>
                <field name="x_pan"/>
                <field name="x_email_from"/>
                <field name="x_secondary_email"/>
			    <field name="country_id"/>
				<field name="user_id" string="TCMG Member" />
				<field name="x_sourcetype"/>
			    <field name="x_sourcename" />
                <!-- <field name="x_skill_technology"/> -->
				<field name="create_uid" />
				<field name="write_uid" />
                <field name="create_date" string="Creation Date (From)" filter_domain="[('create_date','&gt;=',self)]" widget="calendar"/>
                <field name="create_date" string="Created Date (To)" filter_domain="[('create_date','&lt;=',self)]" widget="calendar"/>

                <separator/>
                
                <group expand="0" string="Group By...">
                    <filter string="Recruiter" domain="[]"   context="{'group_by':'user_id'}" groups='base.group_hr_manager'/>
                    <filter string="Job" domain="[]" context="{'group_by':'x_job_id'}"/>
                    <filter string="Source Name" domain="[]" context="{'group_by':'x_sourcetype'}"/>
                    <filter string="Source Type" invisible="1" domain="[]" context="{'group_by':'x_sourcename'}"/>
					<filter string="Creation Date" domain="[]" context="{'group_by':'create_date'}"/>
                </group>
           </search>
        </field>
    </record>
	
<!--candidate act window -->
	 <record id="candidate_source" model="ir.actions.act_window">
        <field name="name">Candidate Profile</field>
        <field name="res_model">hr.candidate</field>
        <field name="view_type">form</field>
		 <field name="view_mode">tree,form</field>
		 <field name="view_id" ref="candidate_tree"/>
		 <field name="domain">[('x_country_sep','=','1')]</field>
		 <field name="search_view_id" ref="view_hr_applicant_creation_search"/>
		 <field name="context">{'search_default_candidate_creator': 1}</field>
            <field name="help" type="html">
              <p class="oe_view_nocontent_create">
                Click to link a candidate to job.
              </p><p>
                You can create and edit the applicants here.
              </p>
            </field>
    </record>
	
    <record model="ir.actions.act_window.view" id="action_view_applicant_row_tree">
        <field name="act_window_id" ref="candidate_source"/>
        <field name="sequence" eval="1"/>
        <field name="view_mode">tree</field>
        <field name="view_id" ref="candidate_tree"/>
    </record>

    <record model="ir.actions.act_window.view" id="action_view_applicant_ow_form">
        <field name="act_window_id" ref="candidate_source"/>
        <field name="sequence" eval="2"/>
        <field name="view_mode">form</field>
        <field name="view_id" ref="candidate_source_form"/>
    </record>
	
	<menuitem
        id="menu_hr_candidate_source"
        name="Add New Candidate"
        parent="base.menu_crm_case_job_req_main"
        action="candidate_source"
        groups="base.group_row_user"
        sequence="1"/>
<!-- #################################################################################################-->
	<!-- Hr applicant Form view -->
    <record model="ir.ui.view" id="hr_recruitment.crm_case_form_view_job">
        <field name="name">hr.applicant</field>
        <field name="model">hr.applicant</field>
        <field name="type">form</field>
		<field name="view_mode">tree,form</field>
        <field name="arch" type="xml">
        	<form string="Jobs - Recruitment Form" version="7.0">
            	<header>
	            	<field name="x_app_stages" invisible="1"/>
                    <field name ="is_user" invisible ="1"/>
                    <field name ="is_offer_accept" invisible ="1"/>
					<field name ="is_link" invisible ="1"/>
                    <field name="x_country_sep" invisible="1"/>
					<field name="x_on_change_view_status" invisible="1"/>
				<group>
				<field name="x_view_status" attrs="{'invisible': [('x_app_stages','=',10)]}" class="view_field" string="View Stages" on_change="onchange_status(x_view_status,context)" invisible='1' />
				<field name="x_stage_status" readonly="True"  class="view_field" />
				<field name="x_candidate_id" class="view_field" attrs="{'required':[('x_app_stages','=',5)],'readonly':[('|'),('x_app_stages','in',[10,20,30,40,50,60,70,80]),('x_on_change_view_status','=',True)]}"
                        context="{'form_view_ref':'custom_hr_applicant.candidate_source_form'}"/>
				<field name="job_id" on_change="onchange_job(x_candidate_id,job_id,context)" class="view_field" attrs="{'required':[('x_app_stages','=',5)],'readonly':[('|'),('x_app_stages','in',[10,20,30,40,50,60,70]),('x_on_change_view_status','=',True)]}" domain="[('depart_id','=',1),('x_requisition_status','=',1)]" />
				<field name="write_date" invisible="1" />
				<field name="write_uid" invisible="1" />
				</group>
				<group col="4" colspan="2">  
					<field name="x_doc_reports" attrs="{'invisible':['|',('x_is_offer_accepted','=',False),('x_app_stages','in',[5,10,20,30,40])]}" 
									class="view_field" groups="base.group_us_user"/>
								
					<button name="action_generate_reports" type="object"  groups="base.group_us_user"
                        			class="mt-left-200"  string="Generate / Attach" attrs="{'invisible':['|',('x_doc_reports','&lt;','1'),('x_app_stages','in',[5,10,20,30,40])]}"/>
				</group>
				<group col="4" colspan="2">
					<field name="x_doc_reports_ind" attrs="{'invisible':['|',('x_is_offer_accepted','=',False),('x_app_stages','in',[5,10,20,30,40])]}" 
									class="view_field" groups="base.group_row_user"/>			
					<button name="action_generate_reports_ind" type="object"  groups="base.group_row_user"
                        			class="mt-left-200" string="Generate / Attach" attrs="{'invisible':['|',('x_doc_reports_ind','&lt;','1'),('x_app_stages','in',[5,10,20,30,40])]}"/>				
				</group>
                <button name="case_cancel" string="Refuse" type="object" invisible="1"
                        states="draft,open,pending" class="oe_highlight"/>
                <field name="emp_id" invisible="1"/>
				<field name="state" invisible="1"/>
				<field name="department_id" invisible="1"/>
				<field name="x_offer_status_bool" invisible="1"/>
               
				<field name="stage_id" widget="statusbar" statusbar_colors='{"draft":"red"}' attrs="{'readonly':True}"/>
				<!--<button name="open_url_function" type="object" string="Applied Jobs" icon="{something}" help="Visit this URL in your browser"/>-->
            </header>
			<sheet attrs="{'invisible': [('x_app_stages','!=',05)]}" >
				<div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="Candidate Identified" col="4" colspan="2">
            		<field name="x_candidate_roll_no" invisible="1"/>
					<field name="x_first_name" invisible="1"/>
					<field name="x_last_name" invisible="1"/>
					
					
					<field name="x_candidate_identified_date" attrs="{'required':[('x_app_stages','=',05)]}" /><newline/>
					<field name="x_candidate_identified_by" class="view_field" attrs="{'required':[('x_app_stages','=',05)]}"/><newline/>					
				</group>
				<label for="x_candidate_identified_comments" string="Comments" />
				 	
				<field name="x_candidate_identified_comments"   class="comments_width"  readonly="1" />
                
                <group>
                   <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                </group>			 
				
			</sheet>
            
			<sheet attrs="{'invisible': [('x_app_stages','!=',10)]}" >
				<div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="Internal Screening" col="4" colspan="2">
            		<field name="x_candidate_roll_no" invisible="1"/>
					<field name="x_first_name" invisible="1"/>
					<field name="x_last_name" invisible="1"/>
					
					<field name="x_initial_screening_date" attrs="{'required':[('x_app_stages','=',10)]}" /><newline/>
					<field name="x_initialscreen_created_by" class="view_field" attrs="{'required':[('x_app_stages','=',10)]}"/><newline/>
					<field name="x_communication_rating" class="full_field_width" />
				</group>
				 <label for="x_comments" string="Comments" />
				 	
					<field name="x_comments"   class="comments_width"  readonly="1" />
                 
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
				
			</sheet>
			<sheet attrs="{'invisible': [('x_app_stages','!=',20)]}" col="4" colspan="2" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="To Client Partner">
            		
					<field name="x_tcmg_manager_date" attrs="{'required':[('x_app_stages','=',20)]}" /><newline/>
					<field name="x_tcmg_created_by" class="view_field" attrs="{'required':[('x_app_stages','=',20)]}" />
					
				</group>
				<label for="x_tcmg_comments" string="Comments" />
				<field name="x_tcmg_comments"  class="comments_width"   readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
			</sheet>
			<sheet attrs="{'invisible': [('x_app_stages','!=',30)]}" >
				<div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="To Client">
					<field name="x_submit_to_client_date" attrs="{'required':[('x_app_stages','=',30)]}"/><newline/>
					<field name="x_client_created_by"  class="view_field" attrs="{'required':[('x_app_stages','=',30)]}"/>
					
				</group>
				<label for="x_client_comments" string="Comments" />
				<field name="x_client_comments"   class="comments_width" readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
				
			</sheet>
			<sheet attrs="{'invisible': [('x_app_stages','!=',40)]}" >
				<div class="oe_right oe_button_box">
					<button name="action_makeMeeting" type="object"
                        string="View Schedule Meeting" help="Schedule interview with this applicant"/>
                    <button name="get_history" string="View Stages" type="object"/>

				</div>
            	<group string="Interview/Decision">
            		
            		<field name="x_interview_date" attrs="{'required':[('x_app_stages','=',40)]}" />
					<field name="x_interview_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',40)]}" />
            		<field name = "child_ids" widget = "one2many" invisible="1"/>
                    <field name="x_shedule_meeting_link_ids"/>
                    
				</group>
				<label for="x_interview_comments" string="Comments" />
				<field name="x_interview_comments"  class="comments_width" readonly="1" />
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
			</sheet>
			<sheet attrs="{'invisible': [('x_app_stages','!=',50)]}" >
				<div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="Offered">
					<field name="x_offer_status_date" attrs="{'required':[('x_app_stages','=',50)]}"/>
					<field name="x_offer_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',50)]}"/><newline/>
					<field name="x_is_offer_accepted" invisible="1"/>
				</group>
				<label for="x_offer_comments" string="Comments" />
				<field name="x_offer_comments"   class="comments_width" readonly="1" />
                <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />

                </group>
				
			</sheet>
			<sheet attrs="{'invisible': [('x_app_stages','!=',60)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
            	<group string="Joined">
					<field name="x_hire_candidate_report" class="field_width" on_change="on_change_join_status(x_hire_candidate_report)" />
					<field name="x_hire_employee_id" class="field_width" />
					<field name="x_hire_start_date" attrs="{'required':[('x_app_stages','=',60)]}" /><newline/>
					<field name="x_hire_created_by" class="field_width" attrs="{'required':[('x_app_stages','=',60)]}" />
<!--
					<field name="x_doj_date" on_change="onchange_doj_date(x_doj_date,x_offer_status_date)"/>
-->
					<field name="x_join_status" class="view_field" invisible="1" />
                    <field name='x_is_employee' invisible="1"/>
				</group>
				<label for="x_hire_comments" string="Comments" />
				<field name="x_hire_comments"   class="comments_width" readonly="1"/>
                    <group>
                    <button name="%(action_applicant_comment_wiz)d" string="Add Comment" type="action" />
                    </group>
			</sheet>
			
			<!-- exit term process-->
			<sheet attrs="{'invisible': [('x_app_stages','!=',70)]}" >
                <div class="oe_right oe_button_box">
                    <button name="get_history" string="View Stages" type="object"/>
                </div>
			<group string="Term Process">
                <group string="Personal Info" col="6" colspan="3">
                    <field name = "x_first_name" string="First Name"/>
                    <field name = "x_middle_name" string="Middle Name"/>
                    <field name = "x_last_name" string="Last Name" />
                </group>
                <group  col="6" colspan="3">
                    <field name = "x_employee_no"/>
                    <field name = "x_ssn"/>
                    <field name = "x_clients"/>
                </group>
                <group col="6" colspan="3">
                    <field name = "x_candidate"/>
                    <field name = "x_cjo"/>
                    <field name = "x_sjo"/>
                </group>
                    <field name = "x_street"/>
                <group  col="6" colspan="3">
                    <field name = "x_city_id"/>
                    <field name = "x_state_id"/>
                    <field name = "x_zip_codes"/>
                </group>
                <group  col="4" colspan="2">
                    <field name = "x_planned_end_date"/>
                    <field name = "x_hire_date"/>
                </group>
				<group col="4" colspan="2" string = "Work Authorization: Each of the following items (as applicable) must be returned upon separation and before issuance of final check, as allowed by law:" >
               
                    <field name ="x_desk_key"/>
                    <field name ="x_office_key"/>                                       
                    <field name ="x_office_laptop"/>
                    <field name ="x_security_pass"/>
                    <field name ="x_other_info"/>
                </group>
                <label string = "Reason for Termination" />
                    <label string="Reason for Termination: Select the types and reason for termination"/>
        
                <group string="Hired By Client:" col="4" colspan="2">
                    <field name = "x_hireby_client_technology"/>
                    <field name = "x_hireby_client_benefits"/>
                    <field name = "x_hireby_client_money"/>
                    <field name = "x_hireby_client_long_term_stability"/>
                    <field name = "x_hireby_client_other"/>
                </group>
                <group string="Permanent Position(non-contract, not as client)" col="4" colspan="2">
                    <field name = "x_permanent_pos_technology"/>
                    <field name = "x_permanent_pos_benefits"/>
                    <field name = "x_permanent_pos_money"/>
                    <field name = "x_permanent_pos_long_term_stability"/>
                    <field name = "x_permanent_pos_other"/>
                </group>
                <group string="Assignment Ended" col="4" colspan="2">
                    <field name = "x_marketable_employee"/>
                    <field name = "x_performance_issue"/>
                    <field name = "x_skillset"/>
                    <field name = "x_budgetcuts"/>
                </group>
                <group string="Competitor" col="4" colspan="2">
                    <field name = "x_competitor_technology"/>
                    <field name = "x_competitor_benefits"/>
                    <field name = "x_competitor_money"/>
                    <field name = "x_competitor_other"/>
                </group>
                <group string="other" col="4" colspan="2">
                    <field name = "x_personal_reason"/>
                    <field name = "x_customer_requested"/>
                    <field name = "x_lack_feedback"/>
                    <field name = "x_reloctor"/>
                    <field name = "x_lack_Training"/>
                </group>
                    <field name = "x_term_comments"/>
                <group col="4" colspan="2">
                    <field name = "x_employee_signature"/>
                    <field name = "x_term_process_date"/>
                </group>
           </group>
		   </sheet>
			
			<!-- bottom buttons-->
			<group  attrs="{'invisible': [('x_app_stages','=',50)]}">
						<header>
							<button name="reject_status" string="Reject" type="object" class="oe_highlight mt-left" attrs="{'invisible' :[('x_is_employee','=',True)]}" />
							<button name="onhold_status" string="On Hold" type="object" class="oe_highlight"  attrs="{'invisible' :[('x_is_employee','=',True)]}"/>
			            	<button name="next_stage" string="Proceed" type="object" class="oe_highlight" />
			            	<button name="case_with_emp" string="Hire And Create Employee" type="object" class="oe_highlight" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,70])]}" />
							<button name="back_to_previous_stage" string="Back to Previous Stage" type="object" class="oe_highlight" attrs="{'invisible': [('x_app_stages','in',[05,70])]}"/>
						    <button name="action_generate_reports" type="object" string="Seperate/Exit Report" class="oe_highlight"  groups="base.group_us_user" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,60,80])]}"/>
                            <button name="action_generate_reports_ind" type="object" string="Seperate / Exit Report" class="oe_highlight"  groups="base.group_row_user" attrs="{'invisible': [('x_app_stages','in',[05,10,20,30,40,50,60,80])]}"/>
						</header>
			</group>
			<group attrs="{'invisible': [('x_app_stages','in',[5,10,20,30,40,60,70,80])]}">
						<header>
							<button name="offer_decline" string="Offer Rejected" type="object" class="oe_highlight mt-left" />
                            <button name="Offer_accepted" string="Offer Accepted " type="object" class="oe_highlight " />
                            <button name="offer_withdrawn" string="Offer Withdrawn" type="object" class="oe_highlight" />
                            <button name="next_stage" string="Proceed" type="object" class="oe_highlight" />
                            <button name="back_to_previous_stage" string="Back to Previous Stage" type="object" class="oe_highlight" />
							<!-- <button name="offer_decline" string="Offer Rejected" type="object" class="oe_highlight mt-left" />
							<button name="Offer_accepted" string="Offer Accepted " type="object" class="oe_highlight " />
			            	<button name="offer_withdrawn" string="Offer Withdrawn" type="object" class="oe_highlight" />
                            <button name ="generate_login" string ="Generate Login" type="object" class="oe_highlight" attrs="{'invisible':[('is_offer_accept','=',False)]}" />
                            <button name="onboard" string ="On board" type = "object" class="oe_highlight" attrs="{'invisible':[('is_user','=',False)]}"/>
							<button name="next_stage" string="Proceed" type="object" class="oe_highlight" attrs="{'invisible': [('x_app_stages','in',[50,70])]}"/>
							<button name="back_to_previous_stage" string="Back to Stage" type="object" class="oe_highlight" />
							<button string = "Link To Candidate" name ="link_to_candidate" type ="object" class="oe_highlight mt-left" attrs="{'invisible':[('is_user','=',False)]}"/>  -->
							<!--<button name="cron_job" string="cron job" type="object" class="oe_highlight" />-->
						</header>
			</group>
			
            <div class="oe_chatter">
                <field name="message_follower_ids" widget="mail_followers"/>
                <field name="message_ids" widget="mail_thread"/>
            </div>
          </form>
			
        </field>
    </record>
	
	<!-- tree view of applicant creation -->
	<record model="ir.ui.view" id="hr_recruitment.crm_case_tree_view_job">
        <field name="name">Applicants</field>
        <field name="model">hr.applicant</field>
        <field name="arch" type="xml">
            <tree string="Applicants"  fonts="bold:message_unread==True"
            colors="green:x_stages_status_report=='Offer Accepted';purple:x_stages_status_report=='On Hold';red:x_stages_status_report=='Offer Declined';red:x_stages_status_report=='Rejected'" >
            	<button string="View Candidate" icon="terp-personal+" name="go_to_candidate" type="object"/>
                <field name="x_job_status2" invisible="1"/>
                <field name="x_combine_name3" invisible="1"/>
                <field name="x_first_name" />
                <field name="x_last_name" />
				<field name="x_candidate_roll_no" />
				<field name="x_cli_id"/>
                <field name="x_cli_req"/>
				<field name="x_job" string="HTC Job Id"/>
				<field name="x_job_title" string="HTC Job Title"/>
				
            	<field name="stage_id" invisible="1"/>
				<field name="x_stages_status_report" invisible="1" string="Stage status"/>
                <field name="message_unread" invisible="1"/>
                <field name="partner_name" invisible="1"/>
                <field name="title_action" invisible="context.get('invisible_next_action', True)"/>
                <field name="date_action" invisible="context.get('invisible_next_date', True)"/>
                <field name="response" invisible="1"/>
                <field name="availability" invisible="1"/>
                <field name="department_id" invisible="context.get('invisible_department', True)"/>
                <field name="state" invisible="1"/>
                
				<field name="x_prog_candidate_identified" widget="progressbar" />
                <field name= "x_prog_initial" widget="progressbar"/>
                <field name= "x_prog_to_cli_part" widget="progressbar"/>
                <field name= "x_prog_to_cli" widget="progressbar"/>
                <field name= "x_prog_interview" widget="progressbar"/>
                <field name= "x_prog_off" widget="progressbar"/>
                <field name= "x_prog_join" widget="progressbar"/>
				<field name= "x_prog_term" widget="progressbar"/>
				<field name="create_date"/>
                <field name="create_uid"/>
				<field name="write_date"/>
				<field name="write_uid"/>
				
            </tree>
        </field>
    </record>
	
	<!-- applicant search filter -->
	
	<record id="hr_recruitment.view_crm_case_jobs_filter" model="ir.ui.view">
        <field name="name">Jobs - Recruitment Search</field>
        <field name="model">hr.applicant</field>
        <field name="arch" type="xml">
            <search string="Search Jobs">
                <field name="partner_name" filter_domain="['|','|',('name','ilike',self),('partner_name','ilike',self),('email_from','ilike',self)]" string="Subject / Applicant"/>
                <filter string="Unread Messages" name="message_unread" domain="[('message_unread','=',True)]"/>
                <separator/>
				<field name="x_date_from" string="From Date" filter_domain="[('create_date','&gt;=',self)]"/>
				<field name="x_date_to" string="To Date" filter_domain="[('create_date','&lt;=',self)]"/>

                <filter string="Candidates in Open Jobs" domain="[('job_id.x_requisition_status','=',1)]" help="Open jobs candidate list"/>
				<filter string="In Process" domain="[('stage_id','in',[05,10,20,30,40])]" help="Applicants In Process"/>
				<filter string="Candidate Identified" domain="[('stage_id','=',05)]" help="Candidate Identified"/>
                <filter string="Internal Screening" domain="[('stage_id','=',10)]" help="Internal Screening Status "/>
                <filter string="To Client Partner" domain="[('stage_id','=',20)]" help="To Client Partner Status"/>
                <filter string="To Client" domain="[('stage_id','=',30)]" help="To Client Status"/>
				<filter string="Interview/Decision" domain="[('stage_id','=',40)]" help="Interview/Decision Status"/>
				<filter string="Offered" domain="[('stage_id','=',50)]" help="Offered Status"/>
				<filter string="Joined" domain="[('stage_id','=',60)]" help="Joined Status"/>
                <filter string="Termed" domain="[('stage_id','=',70)]" help="Termed Status"/>
                <separator/>
                <filter string="Unassigned Recruitments" invisible="1" domain="[('user_id','=',False)]" help="Unassigned Recruitments"/>
                <separator/>
                <filter string="Next Actions" context="{'invisible_next_action':False, 'invisible_next_date':False}"
                    domain="[('date_action','&lt;&gt;',False)]" help="Filter and view on next actions and date" invisible="1"/>
                <field name="job_id"/>
                <field name="x_combine_name3" filter_domain="[('x_combine_name3','ilike',self)]"/>
				<field name="x_candidate_id" filter_domain="[('x_candidate_id','ilike',self)]"/>
                <field name="x_candidate_id" filter_domain="[('x_candidate_id.x_email_from','ilike',self)]" string="E-mail"/>
                <field name="x_candidate_id" filter_domain="[('x_candidate_id.x_mobile','ilike',self)]" string="Mobile"/>
                <field name="department_id"/>
                <field name="user_id"/>
                <field name="x_first_name" />
                <field name="x_last_name" />
				<field name="x_candidate_roll_no" />
				<field name="x_cli_id"/>
                <field name="x_cli_req"/>
                <field name="x_job"/>
				<field name="x_job_title"/>
                <field name="create_date" string="Created Date (From)" filter_domain="[('create_date','&gt;=',self)]" widget="calendar"/>
                <field name="create_date" string="Created Date (To)" filter_domain="[('create_date','&lt;=',self)]" widget="calendar"/>
			
				<filter string="Created by Me" name="type_person" icon="terp-personal" domain="['|',('create_uid','=',uid),('write_uid','=',uid)]"/>
                <separator/>
                <field name="categ_ids"/>
                <group expand="0" string="Group By...">
					<filter string="Candidate" domain="[]"  context="{'group_by':'x_candidate_id'}"/>
                    <filter string="Responsible" domain="[]" invisible="1"  context="{'group_by':'user_id'}"/>
                    <filter string="Department" domain="[]" invisible="1" context="{'group_by':'department_id'}"/>
                    <filter string="Job ID" domain="[]" context="{'group_by':'x_job'}"/>
					<filter string="Job Title" domain="[]" context="{'group_by':'x_job_title'}"/>
                    <filter string="BU" domain="[]" context="{'group_by':'x_group_bu'}"/>
                    <filter string="Recruiter" domain="[]" context="{'group_by':'x_candidate_identified_by'}" groups='base.group_hr_manager'/>
					<filter string="Client" domain="[]" context="{'group_by':'x_cli_id'}"/>
					<filter string="Client Request ID" domain="[]" context="{'group_by':'x_cli_req'}"/>
                    <filter string="Availability" invisible="1" domain="[]" context="{'group_by':'availability'}"/>
                    <filter string="Stage" domain="[]" context="{'group_by':'stage_id'}"/>
                    <filter string="Source" invisible="1" domain="[]" context="{'group_by':'source_id'}"/>
                    <filter string="Creation Date" domain="[]" context="{'group_by':'create_date'}"/>
                    <!-- filter: last three months -->
<!--
                    <filter icon="terp-personal" name="last_three_month"
                            string="Last 3 Months"
                            domain="[('create_date','&lt;=',time.strftime('%%m/%%d/%%Y')),
                            ('create_date','&gt;=', ((context_today()-relativedelta(months=3)).strftime('%%m/%%d/%%Y'))) ]"/>
                    <filter icon="terp-personal" name="last_one_month"
                            string="Last 1 Months"
                            domain="[('create_date','&lt;=',time.strftime('%%m/%%d/%%Y')),
                            ('create_date','&gt;=', ((context_today()-relativedelta(months=1)).strftime('%%m/%%d/%%Y'))) ]"/>
                    <filter icon="terp-personal" name="last_week"
                            string="Last Week"
                            domain="[('create_date','&lt;=',time.strftime('%%m/%%d/%%Y')),
                            ('create_date','&gt;=', ((context_today()-relativedelta(days=7)).strftime('%%m/%%d/%%Y'))) ]"/>
-->
                </group>
           </search>
        </field>
    </record>
	
	<!-- search filter end -->
	
	<!-- Applicant kanban  -->
	<record model="ir.ui.view" id="hr_recruitment.hr_kanban_view_applicant">
        <field name="name">Hr Applicants kanban</field>
        <field name="model">hr.applicant</field>
        <field name="arch" type="xml">
            <kanban default_group_by="stage_id" create="false" edit="false" quick_create="false">
                <field name="stage_id"/>
                <field name="color"/>
                <field name="priority"/>
                <field name="survey"/>
                <field name="user_id"/>
                <field name="partner_name"/>
				<field name="x_candidate_id"/>
				<field name="job_id"/>
				<field name="type_id"/>
                <field name="title_action"/>
                <field name="department_id"/>
                <field name="categ_ids"/>
                <field name="message_summary"/>
                <templates>
                    <t t-name="kanban-tooltip">
                        <ul class="oe_kanban_tooltip">
                            <li t-if="record.type_id.raw_value"><b>Degree:</b> <field name="type_id"/></li>
                            <li t-if="record.partner_id.raw_value"><b>Contact:</b> <field name="partner_id"/></li>
                            <li t-if="record.department_id.raw_value"><b>Departement:</b> <field name="department_id"/></li>
                        </ul>
                    </t>
                    <t t-name="kanban-box">
                        <div t-attf-class="oe_kanban_color_#{kanban_getcolor(record.color.raw_value)} oe_kanban_card oe_kanban_global_click oe_semantic_html_override">
                            <div class="oe_dropdown_toggle oe_dropdown_kanban">
                                <span class="oe_e">i</span>
                                <ul class="oe_dropdown_menu">
                                    <t t-if="widget.view.is_action_enabled('delete')"><li><a type="delete">Delete</a></li></t>
                                    <li><a name="action_makeMeeting" type="object">Schedule Interview</a></li>
                                    <li><ul class="oe_kanban_colorpicker" data-field="color"/></li>
                                </ul>
                            </div>
                            <div class="oe_kanban_content" tooltip="kanban-tooltip">
                            	
                                <div>
                                	<t t-if="record.x_candidate_id.raw_value"><b><span color="blue"><field name="x_candidate_id" class="blue_color"/></span></b></t>
                                    <br/>
                                    <field name="job_id"/><br/>
									
                                    <t t-if="record.title_action.raw_value"><field name="title_action"/><br/></t>
                                    <field name="date_action"/>
									
                                </div>
                                <div class="oe_kanban_right">
                                	<field name="create_date" help="Created date" />
                                    <t t-set="priority" t-value="record.priority.raw_value || 5"/>
                                    <a type="object" name="set_priority" args="['3']" t-if="priority gt 3">
                                        <img src="/web/static/src/img/icons/star-off.png" width="16" height="16" title="Good"/>
                                    </a>
                                    <a type="object" name="set_priority" args="['5']" t-if="priority lte 3">
                                        <img t-attf-src="/web/static/src/img/icons/star-#{priority lte 3 ? 'on' : 'off'}.png" width="16" height="16" title="Good"/>
                                    </a>
                                    <a type="object" name="set_priority" args="['2']">
                                        <img t-attf-src="/web/static/src/img/icons/star-#{priority lte 2 ? 'on' : 'off'}.png" width="16" height="16" title="Very Good"/>
                                    </a>
                                    <a type="object" name="set_priority" args="['1']">
                                        <img t-attf-src="/web/static/src/img/icons/star-#{priority == 1 ? 'on' : 'off'}.png" width="16" height="16" title="Excellent"/>
                                    </a>
                                    <img t-att-src="kanban_image('res.users', 'image_small', record.user_id.raw_value)" t-att-title="record.user_id.value" width="24" height="24" class="oe_kanban_avatar"/>

                                </div>
                                <div class="oe_kanban_footer_left" style="margin-top:5px;">
                                    <t t-raw="record.message_summary.raw_value"/>
                                    <field name="categ_ids"/>
                                </div>
                            </div>
                            <div class="oe_clear"></div>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>
	<!-- applicant act window -->
	<menuitem
            name="Candidate Pipeline"
            parent="base.menu_crm_case_job_req_main"
			groups="base.group_row_user"
            id="hr_recruitment.menu_crm_case_categ0_act_job" action="hr_recruitment.crm_case_categ0_act_job"
            sequence="3"/>
            
    <record model="ir.actions.act_window" id="hr_recruitment.crm_case_categ0_act_job">
            <field name="name">Candidate Pipeline</field>
            <field name="res_model">hr.applicant</field>
            <field name="view_mode">tree,form,graph</field>
            <field name="view_id" eval="False"/>
			<field name="domain">[('x_country_sep','=','1')]</field>
            <field name="search_view_id" ref="hr_recruitment.view_crm_case_jobs_filter"/>
            <field name="context">{'search_default_type_person': 1}</field>
            <field name="help" type="html">
              <p class="oe_view_nocontent_create">
                Click to add a new job applicant.
              </p><p>
                OpenERP helps you track applicants in the recruitment
                process and follow up all operations: meetings, interviews, etc.
              </p><p>
                If you setup the email gateway, applicants and their attached
                CV are created automatically when an email is sent to
                jobs@yourcompany.com. If you install the document management
                modules, all resumes are indexed automatically, so that you can
                easily search through their content.
              </p>
            </field>
        </record>

        <record model="ir.actions.act_window.view" id="hr_recruitment.action_hr_sec_kanban_view_act_job">
            <field name="sequence" eval="4"/>
            <field name="view_mode">kanban</field>
            <field name="view_id" ref="hr_recruitment.hr_kanban_view_applicant"/>
            <field name="act_window_id" ref="hr_recruitment.crm_case_categ0_act_job"/>
        </record>


        <record model="ir.actions.act_window.view" id="hr_recruitment.action_hr_sec_tree_view_act_job">
            <field name="sequence" eval="1"/>
            <field name="view_mode">tree</field>
            <field name="view_id" ref="hr_recruitment.crm_case_tree_view_job"/>
            <field name="act_window_id" ref="hr_recruitment.crm_case_categ0_act_job"/>
        </record>

        <record model="ir.actions.act_window.view" id="hr_recruitment.action_hr_sec_form_view_act_job">
            <field name="sequence" eval="2"/>
            <field name="view_mode">form</field>
            <field name="view_id" ref="hr_recruitment.crm_case_form_view_job"/>
            <field name="act_window_id" ref="hr_recruitment.crm_case_categ0_act_job"/>
        </record>

        <record model="ir.actions.act_window.view" id="hr_recruitment.action_hr_sec_graph_view_act_job">
            <field name="sequence" eval="3"/>
            <field name="view_mode">graph</field>
            <field name="view_id" ref="hr_recruitment.crm_case_graph_view_job"/>
            <field name="act_window_id" ref="hr_recruitment.crm_case_categ0_act_job"/>
        </record>

<!-- #################################################################################################-->	
	<!-- source form,tree and menu -->
	<record model="ir.ui.view" id="source_form">
        <field name="name">res.source</field>
        <field name="model">res.source</field>
        <field name="type">form</field>
        <field name="arch" type="xml">
        	<form string="Resource">
        		<field name="name"/>
				<field name="code"/>
        	</form>
		</field>
	</record>
	<record model="ir.ui.view" id="source_tree">
        <field name="name">res.source</field>
        <field name="model">res.source</field>
        <field name="type">tree</field>
        <field name="arch" type="xml">
        	<tree string="Resource">
        		<field name="name"/>
				<field name="code"/>
        	</tree>
		</field>
	</record>
	 <record id="action_source" model="ir.actions.act_window">
        <field name="name">Source</field>
        <field name="res_model">res.source</field>
        <field name="view_type">form</field>
    </record>
	<menuitem
        id="menu_hr_recruitment_source"
        parent="hr_recruitment.menu_hr_recruitment_recruitment"
        action="action_source"
        groups="base.group_no_one"
        sequence="10"/>

<!-- #################################################################################################-->
	<!-- sourcetype form,tree and menu -->
	
	<record model="ir.ui.view" id="sourcetype_form">
        <field name="name">res.source.sourcetype</field>
        <field name="model">res.source.sourcetype</field>
        <field name="type">form</field>
        <field name="arch" type="xml">
        	<form string="Source Type">
        		<field name="source_id"/>
				<field name="name"/>
        	</form>
		</field>
	</record>
	<record model="ir.ui.view" id="sourcetype_tree">
        <field name="name">res.source.sourcetype</field>
        <field name="model">res.source.sourcetype</field>
        <field name="type">tree</field>
        <field name="arch" type="xml">
        	<tree string="Source Type">
        		<field name="source_id"/>
				<field name="name"/>
        	</tree>
		</field>
	</record>
	
	 <record id="action_sourcetype" model="ir.actions.act_window">
        <field name="name">Source Type</field>
        <field name="res_model">res.source.sourcetype</field>
        <field name="view_type">form</field>
    </record>
	
	<menuitem
        id="menu_sourcetype"
        parent="hr_recruitment.menu_hr_recruitment_recruitment"
        action="action_sourcetype"
        groups="base.group_no_one"
        sequence="18"/>
		
<!-- #################################################################################################-->	
	<!-- Hr Applicant Interview form -->
	<record id="view_employee_category_form" model="ir.ui.view">
            <field name="name">hr.applicant.interview.form</field>
            <field name="model">hr.applicant.interview</field>
            <field name="arch" type="xml">
                <form string="interview" version="7.0">
                    <group>
                    	<field name ="x_inter_number" class="field_width"/>
						<field name="x_partner_ids"/>
                        <field name="x_inter_date" class="field_width"/>
                        <field name="x_inter_skill_rating" class="field_width"/>
                        <field name="x_inter_comm_rating" class="field_width"/>
                        <field name = "x_inter_comments" class="field_width"/>
                    </group>
                </form>
            </field>
        </record>
      
       <record id="view_employee_category_tree" model="ir.ui.view">
            <field name="name">hr.applicant.interview.tree</field>
           
            <field name="model">hr.applicant.interview</field>
            <field name="field_parent">child_ids</field>
            <field name="arch" type="xml">
                <tree string="interview Categories" >
                		<field name ="x_inter_number" />
						<field name="x_partner_ids"/>
                        <field name="x_inter_date" />
                        <field name="x_inter_skill_rating" />
                        <field name="x_inter_comm_rating" />
                </tree>
            </field>
        </record>
<!-- #################################################################################################-->
       <!-- Hr Applicant Qualification form -->
	
		<record id="view_employee_qual_form" model="ir.ui.view">
            <field name="name">hr.applicant.qualification.form</field>
            <field name="model">hr.applicant.qualification</field>
            <field name="arch" type="xml">
                <form string="interview" version="7.0">
                    <group>
                         <field name="x_degree"/>
						 <field name="x_course_name"/>
						 <field name="x_university"/>
                         <field name="x_edu_month" />
						 <field name="x_edu_year"/>
                         <field name="x_percentage" />
                    </group>
                </form>
            </field>
        </record>
       
       <record id="view_employee_qual_tree" model="ir.ui.view">
         <field name="name">hr.applicant.qualification.tree</field>
            <field name="model">hr.applicant.qualification</field>
            <field name="field_parent">child_ids_qual</field>
            <field name="arch" type="xml">
                <tree string="interview Categories" editable="bottom">
                    <field name="x_degree"/>
					 <field name="x_course_name"/>
					 <field name="x_university"/>
                     <field name="x_edu_month" />
					 <field name="x_edu_year"/>
                     <field name="x_percentage"/>
                </tree>
            </field>
        </record>
 
<!-- #################################################################################################-->       
		<!-- hr offer form view -->
    <record id="view_offer_terms_row_forms" model="ir.ui.view">
            <field name="name">hr.offer.row.form</field>
            <field name="model">hr.offer.terms</field>
            <field name="arch" type="xml">
                <form string="Offer Term " version="7.0">
                        
                    <sheet>
                        <div class="oe_right oe_button_box">
                            <button name="act_back_to_offer_term" type="object" string="Save"  class= "oe_button oe_form_button oe_highlight"/>
                            <button special="cancel"  type="object" class= "oe_button oe_form_button oe_highlight" string="Discard" name="cancel_offer"/>                   
                        </div>
						<group col ="4" colspan ="2">
						<field name ="is_experienced" required ="True"/>
						</group>
                        
                        <group string="Offer terms" col="4" colspan="2"  >
                            <field name="x_planned_start_date" required="1"/>
                            <field name="x_planned_end_date" />
                            <field name="x_req_type" required="1" />
                            <field name="x_title_offered" required="1" />
						</group>
						<group string="Salary" col="6" colspan="2">
                            <field name="x_offer_current_salary" required="1"/>
                            <field name="x_offer_cur_salary_currency" class="nolabel_2" nolabel="1" required="1"/>
                            <field name="x_offer_cur_salary_payby" nolabel="1" class="nolabel_3" required="1"/><newline/>
                            <field name="x_offer_expected_salary" required="1"/>
                            <field name="x_offer_exp_salary_currency" nolabel="1" class="nolabel_2" required="1" />
                            <field name="x_offer_exp_salary_payby" nolabel="1" class="nolabel_3" required="1"/><newline/>
                            <field name="x_offer_base_salary" required="1"/>
                            <field name="x_offer_base_salary_currency" nolabel="1"  class="nolabel_2" required="1" />
                            <field name="x_offer_base_salary_payby" class="nolabel_3" nolabel="1" required="1" />
							
						</group>
						<group string="Bonus" col="6" colspan="2">
                            <field name="x_offer_percentage_hike"  required="1"/><newline/>
                            <field name="x_offer_joining_bonus" />
                            <field name="x_offer_joining_bonus_currency"  nolabel="1"  class="nolabel_new" /> <newline/>
                            <field name="x_offer_relocation_payment" />
                            <field name="x_offer_relocation_payment_currency" class="nolabel_new"  nolabel="1"  /><newline/>
                            <field name="x_offer_referral_bonus" />
                            <field name="x_offer_referral_bonus_currency"  nolabel="1" class="nolabel_new" /><newline/>
                            <field name="x_offer_special_payment" />
                            <field name="x_offer_special_payment_currency"  nolabel="1" class="nolabel_new" /><newline/>
                            <field name="x_offer_special_payment_desc" />
                            <newline/>
			    			<field name="x_current_salary_char" />
                            <field name="x_desired_salary_char"/> <newline/>
							
							
						</group>
						<group>
							<field name="x_offer_comments" class="comments_width"/><newline/>
						</group>
                    </sheet>
                </form>
            </field>
        </record>
		
		
		<!--############################################################for us#############################-->
		<record id="view_offer_terms_us_forms" model="ir.ui.view">
            <field name="name">hr.offer.us.form</field>
            <field name="model">hr.offer.terms</field>
            <field name="arch" type="xml">
                <form string="Offer Term " version="7.0">
                        
                    <sheet>
                        <div class="oe_right oe_button_box">
                            <button name="act_back_to_offer_term" type="object" string="Save"  class= "oe_button oe_form_button oe_highlight"/>
                            <button special="cancel"  type="object" class= "oe_button oe_form_button oe_highlight" string="Discard" name="cancel_offer"/>                   
                        </div>
                        <group string="Offer terms" col="4" colspan="2"  >
                            <field name="x_planned_start_date" required="1"/>
                            <field name="x_planned_end_date" />
                            <field name="x_hire_type" />
                            <field name="x_title_offered" required="1" />
                            <field name="x_sign_on_date" required="1"/>
						</group>
						<group string="Salary" col="6" colspan="2">
							<field name="x_bill_rate" />
                            <field name="x_bill_rate_currency" class="nolabel_2" nolabel="1"/><newline/>
                            <field name="x_offer_current_salary" required="1"/>
                            <field name="x_offer_cur_salary_currency" class="nolabel_2" nolabel="1" required="1"/>
                            <field name="x_offer_cur_salary_payby" nolabel="1" class="nolabel_3" required="1"/><newline/>
                            <field name="x_offer_expected_salary" required="1"/>
                            <field name="x_offer_exp_salary_currency" nolabel="1" class="nolabel_2" required="1" />
                            <field name="x_offer_exp_salary_payby" nolabel="1" class="nolabel_3" required="1"/><newline/>
                            <field name="x_offer_base_salary" required="1" on_change="onchange_offer_base_sal(x_offer_base_salary_payby,x_offer_base_salary)"/>
                            <field name="x_offer_base_salary_currency" nolabel="1"  class="nolabel_2" required="1" />
                            <field name="x_offer_base_salary_payby" class="nolabel_3" nolabel="1" required="1" on_change="onchange_offer_sal_pay_by(x_offer_base_salary_payby,x_offer_base_salary)"/>
							
						</group>
						<group string="Bonus" col="6" colspan="2">
                            <field name="x_semi_monthly" required="1"/>
                            <field name="x_offer_percentage_hike"  required="1"/><newline/>
                            <field name="x_offer_joining_bonus" />
                            <field name="x_offer_joining_bonus_currency"  nolabel="1"  class="nolable_bonus" /> <newline/>
                            <field name="x_offer_relocation_payment" />
                            <field name="x_offer_relocation_payment_currency" class="nolable_bonus"  nolabel="1"  /><newline/>
                            <field name="x_offer_referral_bonus" />
                            <field name="x_offer_referral_bonus_currency"  nolabel="1" class="nolable_bonus" /><newline/>
                            <field name="x_offer_special_payment" />
                            <field name="x_offer_special_payment_currency"  nolabel="1" class="nolable_bonus" /><newline/>
                            <field name="x_offer_special_payment_desc" />
                            <newline/>
                            <field name="x_retension_bonus" />
                            <field name="x_retension_bonus_currency"  nolabel="1" class="nolable_bonus" /><newline/>
							<field name="x_lca_wage" />
                            <field name="x_lca_wage_currency"  nolabel="1" class="nolable_bonus" /><newline/>
							<field name="x_utility_bonus" />
                            <field name="x_utility_bonus_currency"  nolabel="1" class="nolable_bonus" /><newline/>
							<field name="x_hourly" />
                            <field name="x_hourly_currency"  nolabel="1" class="nolable_bonus" /><newline/>
							<field name="x_benefits" />
							<field name="x_proof_of_insurance" />
							<field name="x_tax" />
			    			<field name="x_current_salary_char" />
                            <field name="x_desired_salary_char"/> <newline/>
							
							
						</group>
						<group>
							<field name="x_offer_comments" class="comments_width"/><newline/>
						</group>
                    </sheet>
                </form>
            </field>
        </record>
		<!-- ################################################################################3-->
		
     <record model="ir.ui.view" id="view_crm_meeting_inherit_form">
        <field name="name">CRM - Meetings Form</field>
        <field name="model">crm.meeting</field>
        <field name="inherit_id" ref="base_calendar.view_crm_meeting_form"/>
        <field name="arch" type="xml">
            <xpath expr="//field[@name='name']" position='after'>
                <field name='x_hr_app_id' readonly="1"/>
            </xpath>
        </field>
    </record>


<!-- #################################################################################################-->	
	<!-- skill form,tree and menu -->
	<record model="ir.ui.view" id="skill_form">
        <field name="name">Candidate Skill</field>
        <field name="model">candidate.skills</field>
        <field name="arch" type="xml">
        	<form string="Skills" version="7.0">
        		<group>
        			<field name="name"/>
				</group>
        	</form>
		</field>
	</record>
	<record model="ir.ui.view" id="skill_tree">
        <field name="name">Candidate Skill</field>
        <field name="model">candidate.skills</field>
        <field name="arch" type="xml">
        	<tree string="Skills">
        		<field name="name"/>
        	</tree>
		</field>
	</record>
	 <record id="skill_action" model="ir.actions.act_window">
        <field name="name">Candidate Skill</field>
        <field name="res_model">candidate.skills</field>
        <field name="view_type">form</field>
    </record>
	<menuitem
        id="menu_hr_recruitment_skills"
        parent="hr_recruitment.menu_hr_recruitment_recruitment"
        action="skill_action"
        groups="base.group_no_one"
        sequence="11"/>
    

    <record id="user_credential_forms" model="ir.ui.view">
             <field name="name">user.credential</field>
             <field name="model">user.credential</field>
             <field name="arch" type="xml">
                 <form string="User Credential " version="7.0">

                     <sheet>
                         <h1><i><font size="3">
                         Dear Candidate,

                            Welcome Aboard!<br/>

                            Kindly access the following URL with the credentials supplied and provide all the necessary information (both Personal 
                            and Professional) by keying in the relevant screens. Also upload all the necessary attachments wherever required.<br/>
                            This URL will be active for three days.We appreciate your co-operation in this regard and we thank you in advance.<br/>
                            <a href="http://erp.htcindia.com">http://erp.htcindia.com</a>
                     Regards,<br/>

                                     Team TCMG<br/>
                                     </font></i></h1>
                         <group col ="4" colspan ="2">
                         <h3>Login<field name ="x_login" readonly = "True"/></h3>
						 <h3>Password<field name ="x_password" readonly = "True"/></h3>
                     </group>
                     </sheet>
                 </form>
             </field>
         </record>

<!-- #################################################################################################-->

     <record model="ir.ui.view" id="removing_highlighted_candidate_config_id">
        <field name="name">Candidate Highlights</field>
        <field name="model">removing.highlighted.candidate.config</field>
        <field name="arch" type="xml">
            <tree string="Configuration Removing highlighted candidate" editable="bottom" delete="false">
					<field name="name" readonly="1" options="{'create': false, 'create_edit': false,'no_open': True}"/>
					<field name="hrs_to_reset"/>
			</tree>
            
        </field>
    </record>

	<record id="action_removing_highlighted_candidate_config_id" model="ir.actions.act_window">
	        <field name="name">Candidate Highlights</field>
	        <field name="res_model">removing.highlighted.candidate.config</field>
	        <field name="view_type">form</field>
	    </record>
	<menuitem
        id="menu_removing_highlighted_candidate_config_id"
        parent="hr_recruitment.menu_hr_recruitment_recruitment"
        action="action_removing_highlighted_candidate_config_id"
        sequence="22"/>
	
	<!-- #############################3   CRM Meeting - Interview Stage - Shedule Interview - panel member res_partner to hr_employee changed #####  -->
	
	    <record id="view_crm_meeting_form1_inherited" model="ir.ui.view">
            <field name="name">crm.lead.view.crm.meeting.form.herited</field>
            <field name="model">crm.meeting</field>
			<field name="inherit_id" ref="base_calendar.view_crm_meeting_form"/>
			<field name="arch" type="xml">
                
                <xpath expr="//field[@name='partner_ids']" position="after">
                    <field name="panel_employees" widget="many2many_tags"
                                options="{'create': false, 'create_edit': false,'no_open': True}"/>
                </xpath>
                <xpath expr="//field[@name='partner_ids']" position="attributes">
                        <attribute name="invisible">True</attribute>
                </xpath>
                <xpath expr="//field[@name='user_id']" position="replace">
                    <field name="user_id" groups="base.group_no_one" options="{'create': false, 'create_edit': false,'no_open': True}"/>
                </xpath>
                <xpath expr="//field[@name='categ_ids']" position="replace">
                    <field name="categ_ids" widget="many2many_tags" options="{'create': false, 'create_edit': false,'no_open': True}"/>
                </xpath>
                
            </field>
    </record>
	
	
    </data>
</openerp>
################################################  sheduler_view.xml ###############################################
<?xml version="1.0" ?>
<openerp>
	<data>

        <record model="ir.cron" id="ir_cron_candidate_id_star_notification_id">
            <field name="name">Highlighted Candidate removal(24hrs) </field>
            <field name="interval_number">1</field>
            <field name="interval_type">hours</field>
            <field name="numbercall">-1</field>
            <field name="doall" eval="False" />
            <field name="model" eval="'hr.candidate'" />
            <field name="function" eval="'cron_removing_highlighted_candidate'" />
            <field eval="'()'" name="args" />
        </record>   
        
	</data>
</openerp>

################################ resume_reprt.xml#############################3

<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data>

        <report auto="False" 
		        id="htc_resume"
		        model="hr.candidate" 
				name="htc.resume"
                rml="custom_hr_applicant/report/pdf/htc_resume.rml"
				string="HTC Raw Resume - .doc"
                usage="default"
				report_type="odt"
				header="False"/>
    </data>
</openerp>


############################################### openerp.py ######################################################################
{
    'name': 'HR Recruitment Extensions',
    'version': '1.1',
    'category': 'HR Recruitment',
    'description': """
    Added new fields for our own use.
       """,
    'author': 'Raimond Raja',
    'depends': ['base','hr','hr_recruitment','customize_job'],
    'update_xml': [
                'security/candidate_security.xml',
                'security/crm_meeting_security.xml',
                'security/ir.model.access.csv',
				'wizard/wizard_comment_view.xml',
                'wizard/wizard_history_view.xml',
                'wizard/wizard_comment_candidate_view.xml',
                'resume_report.xml',
				'hr_recruitment_ext.xml',
                'cand_pipeline_for_us.xml',
                'candidate_view_for_us.xml',
                'candidate_statistics_view.xml',
                'candidate_statistics_view_for_shyam.xml',
                   'report/xls/hr_applicant_list_xls.xml',
                   'report/xls/hr_stages_info_xls.xml',
                   'applicant_sequence.xml',
                   'source_demo.xml',
                   'source_type_demo.xml',
		   'recruiter_metrics_view.xml',
           'recruiter_metrics_view_for_shyam.xml',
           'scheduler_view.xml'
                   ],
    'installable': True,
    'active': False,
    'css': ['static/src/css/recruitment.css',
            'static/src/css/bootstrap.css'],
    'js': [
        'static/src/js/recruitment.js',
        'static/src/js/bootstrap.js',
    ],
} 

