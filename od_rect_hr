################################# hr_recruitment_htc ###############################
######################################  init.py ################################
import models
import reports
import controllers
################################################ openerp.py #######################################
{
    'name': 'Recruitment HTC',
    'version': '1.0',
    "author" : "HTC",
    'category': 'Human Resources',
    'summary': 'Jobs, Recruitment, Applications, Job Interviews',
    'description': """
        Master Tables
================================

This module manages Master screens
""",
    'depends' : ['base','hr_admin_htc','share'],
    'data' : ['view/recruitment_htc_view.xml','security/recruitment_htc_security.xml','security/ir.model.access.csv','reports/new_requisistion_report_view.xml','reports/open_positions_report_view.xml'],
    'js': ['static/src/js/home_page.js'],
    'qweb': ['static/src/xml/*.xml',],
    'css' : ['static/src/css/*.css',],
    'images': [],
    'demo': [],
    'installable' : True,
    'application': True,
}


################################################ controller ##########################################
#################################################### init.py ##########################################

import hr_recruitment_controllers
import open_positions_controllers
import cStringIO

###################################################### hr_recruitment_controllers.py ###############################
import openerp
from openerp.addons.web.controllers.main import manifest_list, module_boot
import openerp.addons.web.http as http
import logging
from openerp.addons.web.controllers.main import content_disposition
from openerp import pooler
import base64



class new_requisistion_report(http.Controller):
   _cp_path = '/hr_recruitment_htc'
   
#new requisistion report
   @http.httprequest
   def requisistion_report_xls(self, req, id, db, uid, s_action=None, **kw):
            logging.info(' Inside export xls method')
            logging.info(id)
            path = req.httprequest.path[1:].split('/')
            cr = pooler.get_db(db).cursor()
            pool = pooler.get_pool(db)
            model = pool.get('new.requisistion.report')
            
            filename='requisistion_report.xls'
            obj=model.browse(cr, uid,  int(id))
            logging.info(' Inside export xls method****%s' %obj)
            if obj:
                filecontent = base64.b64decode(obj.data)
                #logging.info(' Inside export xls method**11**%s' %filecontent)
                filename = obj.name
                logging.info(' Inside export xls method*222***%s' %filename)
                if filecontent and filename:
                    logging.info(' Inside export xls method*222333***%s' %filename)
                    return req.make_response(filecontent,
                        headers=[('Content-Type', 'application/octet-stream'),
                                ('Content-Disposition', content_disposition(filename))])
            return req.not_found()

######################################################  open_positions_controllers.py ############################################

import openerp
from openerp.addons.web.controllers.main import manifest_list, module_boot
import openerp.addons.web.http as http
import logging
from openerp.addons.web.controllers.main import content_disposition
from openerp import pooler
import base64



class open_positions_report(http.Controller):
   _cp_path = '/hr_recruitment_htc'
   
#open positions report
   @http.httprequest
   def open_positions_report_xls(self, req, id, db, uid, s_action=None, **kw):
            logging.info(' Inside export xls method')
            logging.info(id)
            path = req.httprequest.path[1:].split('/')
            cr = pooler.get_db(db).cursor()
            pool = pooler.get_pool(db)
            model = pool.get('open.positions.report')
            
            filename='open_positions_report.xls'
            obj=model.browse(cr, uid,  int(id))
            logging.info(' Inside export xls method****%s' %obj)
            if obj:
                filecontent = base64.b64decode(obj.data)
                #logging.info(' Inside export xls method**11**%s' %filecontent)
                filename = obj.name
                logging.info(' Inside export xls method*222***%s' %filename)
                if filecontent and filename:
                    logging.info(' Inside export xls method*222333***%s' %filename)
                    return req.make_response(filecontent,
                        headers=[('Content-Type', 'application/octet-stream'),
                                ('Content-Disposition', content_disposition(filename))])
            return req.not_found()


########################################3 models ###################################
################################## init.py ####################################33
import recruitment_htc

####################################### recruitment_htc.py #############################3
from openerp import models, fields,api
import datetime
import logging
import itertools
from openerp import models, fields, api, osv, tools
from openerp.exceptions import ValidationError
from openerp.osv.orm import MetaModel, Model, TransientModel, AbstractModel 
 

ADD_REPLACE=[
          ('add','Add'),
          ('replace','Replace')
          ]
REQUISITION_STATUS=[
          ('draft','Draft'),
          ('submit','Submitted'),
          ('approved','Approved'),
          ('refused','Refused')
          ]

APPROVAL_STATE_SELECTION = [
        ('Approved', 'Approved'),
        ('Refuse', 'Refused'),
        ('Review Required', 'Review Required'),
        ('Info Required', 'Info Required')
    ]

JOB_POSTING_STATUS_SELECTION=[
          ('not_posted','Not Posted'),
          ('internal','Posted Internal'),
          ('external','Posted External'),
          ('internal_external','Posted Internal/External')
          ]
JOB_POST_STATUS_SELECTION = [
          ('not_posted','Not Posted'),
          ('internal','Posted Internal'),
          ('external','Posted External'),
          ('internal_external','Posted Internal/External')
          ]

INTERVIEW_RATING_SELECTION = [
          (1,'1'),
          (2,'2'),
          (3,'3'),
          (4,'4'),
          (5,'5')
          ]

candidate_type=[('Internal','Internal'),
		('External','External')
		]
relocate=[('Limited','Limited'),
	    ('Yes','Yes'),
		('No','No'),
		
		]
		
authorized = [('1','I am authorized to work in this country for any employer'),
		('2','I am authorized to work in this country for my present employer only'),
		('3',' I require sponsorship to work in this country'),
		('4','My status to work in this country is unknown'),
		]	
travel_interest=[('Yes','Yes'),
		('No','No')
		]
expectation=[('0% - No Travel','0% - No Travel'),
		('1 - 25%','1 - 25%'),
		('26 - 50%','26 - 50%'),
		('51 - 75%','51 - 75%'),
		('76 - 100%','76 - 100%')
	    ]
proficiency=[('Beginner','Beginner'),('Intermediate','Intermediate'),('Fluent','Fluent'),]
hour_index = 1
INTERVIEW_HOUR_SELECTION=[]
while hour_index<=12:
    INTERVIEW_HOUR_SELECTION.append((hour_index,hour_index))
    hour_index += 1
INTERVIEW_MINUTE_SELECTION=[]
minute_index = 1
while minute_index<=60:
    INTERVIEW_MINUTE_SELECTION.append((minute_index,minute_index))
    minute_index += 1
    
CANDIDATE_PIPELINE_STATUS_SELECTION=[
                                     ('In Progress','In Progress'),
                                     ('Yet to Start','Yet to Start'),
                                     ('Completed','Completed')]

candidate_status = [('Yes','Yes'),('No','No'),]

gender = [('Male','Male'),('Female','Female')]
class hr_recruitment_candidate(models.Model):
    _name ='hr.recruitment.candidate'
    _rec_name = 'name'
    candidate_id = fields.Char(string = 'Candidate ID',)
    name = fields.Char(string = '',)
    candidate_id = fields.Char(string = '',)
    first_name = fields.Char(string = 'First Name',required = True)
    middle_name = fields.Char(string='Middle Name',)
    last_name = fields.Char(string = 'Last Name',required = True)
    email = fields.Char(string = 'Email',required = True)
    title = fields.Char(string = 'Title')
    mobile = fields.Char(string = 'Mobile Number',required = True)
    country = fields.Many2one('res.country', 'Country',)
    candidate_type = fields.Selection(candidate_type,string = 'Candidate Type')
    relocate =  fields.Selection(relocate,string = 'Relocate')
    location =  fields.Many2one('hr.adm.geo.location',string = 'Location Desired')
    comments =  fields.Text(string = 'Comments')
    travel_interest = fields.Selection(travel_interest,string = 'Willing To Travel')
    travel_expectation= fields.Selection(expectation,string = 'Travel Expectations')
    alternate_phone = fields.Char(string = 'Alternate Phone')
    address_line1 = fields.Char(string = 'Address Line 1 ')
    address_line2 = fields.Char(string = 'Address Line  2')
    city = fields.Char(string = 'City')
    zipcode = fields.Char(string = 'ZipCode')
    state = fields.Many2one('res.country.state', 'State')
    #################
    previous_employer = fields.One2many('hr.recruitment.candidate.employer', 'previous_employer_id','Previous Employers')
    education_details = fields.One2many('hr.recruitment.candidate.education', 'education_id','Education')
    certification= fields.One2many('hr.recruitment.candidate.certifications', 'certification_id','Certification')
    language_known= fields.One2many('hr.recruitment.candidate.language', 'language_id','Language')
    document_id = fields.One2many('hr.recruitment.candidate.documents', 'document_id','Document')
    applied_job_id = fields.One2many('hr.recruitment.job.applied', 'applied_job_ids','Job')
    ###################
    
    #### boolean^###
    profile_created= fields.Boolean(string = 'Is Profile Created',default = False)
    is_application_created = fields.Boolean(string = 'Application')

    ### Candidate Screen
    
    resume = fields.Binary(string = 'Attach Resume')
    resume_content = fields.Text(string = 'Resume Content')
    cover_letter = fields.Binary(string = 'Cover Letter')
    resume_filename=fields.Char(string = 'Filename')
    cover_letter_fielname=fields.Char(string = 'Filename')
    #######
   
    gender = fields.Selection(gender,string = 'Gender')
    ethnicity = fields.Char(string = 'Ethnicity')
    veteran_status = fields.Char(string = 'Veteran Status')
    
#     def write(self, cr, uid, ids, vals, context=None):
#         cand_obj = self.pool.get('hr.recruitment.candidate').browse(cr,uid,ids,context)
#         res_content = cand_obj.resume
#         vals ={'resume':res_content}
#         #~ data= res_content.read()
#         #~ encode=base64.b64decode(res_content)
#         return super(hr_recruitment_candidate, self).write(cr, uid, ids, vals, context)
    
    def create_candidate_profile(self, cr, uid, ids,vals, context=None):
        candidate_id = self.pool.get('hr.recruitment.candidate').browse(cr,uid,ids,context)
        name = candidate_id.first_name + ' ' + candidate_id.last_name
        candidate_obj = self.generate_candidate_id(cr,uid,ids)
        vals['candidate_id'] = candidate_obj
        full_name=self.write(cr,uid,ids,{'name':name,'profile_created':True,'candidate_id':vals['candidate_id']},context)
        return True
	
    def generate_candidate_id(self, cr, uid, context=None):
        candidate_id = self.pool.get('ir.sequence').get(cr, uid,'hr.recruitment.candidate')
        return candidate_id 
	
    def next(self, cr, uid,ids,vals, context=None):
	
		candidate_obj = self.pool.get('hr.recruitment.candidate').browse(cr,uid,ids,context)
		first_name = fields.Char(string = 'First Name')
		vals = {'name':candidate_obj.name,'first_name':candidate_obj.first_name,'middle_name':candidate_obj.middle_name,'last_name':candidate_obj.last_name,'mobile':candidate_obj.mobile,'alternate_phone':candidate_obj.alternate_phone,'email':candidate_obj.email,'address_line1':candidate_obj.address_line1,'address_line2':candidate_obj.address_line1,'city':candidate_obj.city,'zipcode':candidate_obj.zipcode,'state':candidate_obj.state.id,'resume':candidate_obj.resume,'cover_letter':candidate_obj.cover_letter,'country':candidate_obj.country,'candidate_id':candidate_obj.candidate_id, 
				}
	
		if candidate_obj.is_application_created:

			pass
		else:
			app_id = self.pool.get('hr.candidate.pipeline.application').create(cr,uid,vals,context)
		res_ids = self.pool.get('hr.candidate.pipeline.application').search(cr,uid,[('candidate_id','=',candidate_obj.candidate_id)],context)
		res_obj = self.pool.get('hr.recruitment.candidate').browse(cr,uid,res_ids,context)
		res_id = res_obj.id
		view_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'hr_recruitment_htc', 'candidate_application_form')
		view_id = view_ref and view_ref[1] or False,
		self.write(cr,uid,ids,{'is_application_created':True},context)
		return {
			'type': 'ir.actions.act_window',
			'name': "Attachments",
			'view_type': 'form',
			'view_mode': 'form',
			'view_id':view_id,
			'res_model': 'hr.candidate.pipeline.application',
			'nodestroy': True,
			'context': context,
			'target': 'curent',
			'res_id': res_id,
			}

class hr_recruitment_candidate_employer(models.Model):
    _name = 'hr.recruitment.candidate.employer'	
    previous_employer_id = fields.Many2one('hr.recruitment.candidate','Employer')
    title = fields.Char(string = 'Title',)
    company_name = fields.Char(string = 'Company Name',)
    business_type = fields.Many2one('hr.type.business',string = 'Type Of Business',)
    start_date = fields.Date(string = 'Start Date',)
    end_date = fields.Date(string = 'End Date',)

class hr_recruitment_candidate_education(models.Model):
    _name = 'hr.recruitment.candidate.education'	
    education_id = fields.Many2one('hr.recruitment.candidate','education')
    school = fields.Char(string = 'School',)
    major = fields.Many2one('hr.major',string = 'Major',)
    degree = fields.Many2one('hr.degree',string = 'Degree',)
    graduation_date = fields.Date(string = 'Graduation Date',)
    
class hr_recruitment_candidate_certifications(models.Model):
    _name = 'hr.recruitment.candidate.certifications'	
    certification_id = fields.Many2one('hr.recruitment.candidate','Certificate')
    certification = fields.Char(string = 'Certification',)
    description = fields.Text(string = 'Description',)
    institution = fields.Char(string = 'Institution',)
    effective_date = fields.Date(string = 'Effective Date',)
    expiration_date = fields.Date(string = 'Expiration Date',)

class hr_recruitment_candidate_language(models.Model):
    _name = 'hr.recruitment.candidate.language'	
    language_id = fields.Many2one('hr.recruitment.candidate','Language')
    language_known = fields.Many2one('hr.language',string = 'Language',)
    speaking_proficiency = fields.Selection(proficiency,string = 'Speaking Proficiency',)
    reading_proficiency = fields.Selection(proficiency,string = 'Reading Proficiency',)
    writing_proficiency = fields.Selection(proficiency,string = 'Writing Proficiency',)
    
class hr_recruitment_candidate_documents(models.Model):
    _name = 'hr.recruitment.candidate.documents'
    document_id = fields.Many2one('hr.recruitment.candidate','Document')
    document_name = fields.Char(string = 'Document Name',)
    document_attach = fields.Binary(string = 'Attachment',)
    
    def action_candidate_attachment(self, cr, uid, ids, context=None):
    	print "fdsfsd"*100
    	    #~ res_id = False
    	#~ 
        res_ids = self.pool.get("hr.recruitment.candidate.documents").browse(cr,uid,ids,context)
        res_id = res_ids.id
        view_ref = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'hr_recruitment_htc', 'Attachment')
        view_id = view_ref and view_ref[1] or False,
    	
        return {
            'type': 'ir.actions.act_window',
            'name': "Attachments",
            'view_type': 'form',
            'view_mode': 'form',
        'view_id':view_id,
            'res_model': 'hr.recruitment.candidate.documents',
            'nodestroy': True,
            'context': context,
            'target': 'new',
            'res_id': res_id,
        }
	
	
    def act_attachment(self, cr, uid, ids, context):
	   return super(hr_recruitment_candidate_documents, self).write(cr, uid, ids, context)
    
    def cancel_attachment(self,cr,uid,ids,context):
	   return True
	
class hr_candidate_audit_trial(models.Model):
    _name = 'hr.candidate.audit.trial'
    audit_trial_id = fields.Many2one('hr.candidate.pipeline.application',string = 'Candidate Status')
    audit_trial_date = fields.Date(string = 'Date')
    application_used = fields.Char(string = 'Application')
    candidate_status_audit = fields.Many2one('hr.candidate.pipeline.history'  ,string = 'Candidate Status')
    
class hr_recruitment_job_applied(models.Model):
    _name = 'hr.recruitment.job.applied'
    applied_job_ids = fields.Many2one('hr.recruitment.candidate','Applied Job')
    job_id = fields.Many2one('hr.job.code', 'Job')
    primary_recruiter = fields.Many2one('res.users', 'Primary Recruiter')   
    comments = fields.Char( string='Comments')
    applied_date = fields.Date( string='Date')
    
class hr_candidate_pipeline_application(models.Model):
    _name = 'hr.candidate.pipeline.application'
    _rec_name = 'name'
    name = fields.Char(string = ' Name')
    candidate_id= fields.Char(string = 'Candidate_id')
    first_name = fields.Char(string = 'First Name')
    middle_name = fields.Char(string='Middle Name',)
    last_name = fields.Char(string = 'Last Name',)
    suffix =  fields.Char(string = 'Suffix',)
    preferred_name =  fields.Char(string = 'Preferred Name',)
    mobile = fields.Char(string = 'Mobile Number')
    alternate_phone = fields.Char(string = 'Alternate Number')
    email = fields.Char(string = 'Email')
    address_line1 = fields.Char(string = 'Address Line 1 ')
    address_line2 = fields.Char(string = 'Address Line  2')
    city = fields.Char(string = 'City')
    zipcode = fields.Char(string = 'ZipCode')
    state = fields.Many2one('res.country.state', 'State')
    resume = fields.Binary(string = 'Attach Resume')
    cover_letter = fields.Binary(string = 'Cover Letter')
    resume_filename=fields.Char(string = 'Filename')
    cover_letter_fielname=fields.Char(string = 'Filename')
    current_position_period = fields.Selection([('Yes','Yes'),('No','No'),],string = 'Have You been in your position in last 12 month?')
    current_position_manager= fields.Selection([('Yes','Yes'),('No','No'),],string = 'Have You spoken with your current manager abour your dersire to apply for this position?')
    signature = fields.Char(string = 'Typed Signature')
    age_code = fields.Selection([('Yes','Yes'),('No','No'),],string = 'Are You Atleast 18 Years Of Age?')
    citizenship = fields.Selection(authorized,string = 'Are you authorized to work in the US?')
    is_convicted = fields.Selection([('Yes','Yes'),('No','No'),],string = 'Have you ever been convicted of a felony that was not judicially dismissed or ordered sealed? ')
    candidate_status = fields.Many2one('hr.candidate.pipeline.history'  ,string = 'Candidate Status')
    application_date = fields.Date(string = 'Application Date')
    position_applied = fields.Many2one('hr.recruitment.job',string = 'Position Applied')
    other_application = fields.Char(string = 'Other Application')
    last_modifed = fields.Date(string = 'Last Modified')
    recruiter_comment=fields.Char(string = 'Recruiter Comments For Hiring Manager')
    resume_review = fields.Char(string = 'Resume Review Comments')
    interview_comment = fields.Char(string = 'Interview Comments')
    employee_no = fields.Char(string = 'Employee Number')
    #######
    suffix = fields.Char(string = 'Suffix')
    preffered_name = fields.Char(string = 'Preferred Name')
    referral = fields.Char(string = 'How Did You Hear About This Position?')
    emp_referral = fields.Char(string = 'If Employee Referral,Provide Name')
    pre_employer = fields.Selection([('Yes','Yes'),('No','No'),],string = 'Have You Ever Been Employed By CareTech?')
    current_employer = fields.Char(string = 'Current Employer')
    current_title =fields.Char(string = 'Current Title')
    current_salary = fields.Char(string = 'Current Salary')
    education = fields.Char(string = 'Highest Level Of Education')
    desired_salary = fields.Char(string = 'Desired Salary')
    gender = fields.Selection(gender,string = 'Gender')
    ethnicity = fields.Char(string = 'Ethnicity')
    veteran_status = fields.Char(string = 'Veteran Status')
    relation_employee = fields.Char(string = 'Are You Related To Anyone Who Works For CareTech Solution')
    hire_date = fields.Date(string = 'Hire date')
    salary = fields.Char(string = 'Salary')
    rehire = fields.Char(string = 'Rehire')
    hour_per_week = fields.Char(string = 'Hours Per Week') 
    pto_hours = fields.Char(string = 'PTO Hours')
    leader = fields.Char(string = 'Leader')
    primary_time_approver = fields.Char(string = 'Primary Time Approver')
    secondary_time_approver = fields.Char(string = 'Secondary Time Approver')
    buddy = fields.Char(string = 'Buddy')
    comments =fields.Char(string = 'Comments')
    interview_result = fields.Char(string = 'Interview Results')
    overdue_interview = fields.Char(string = 'Overdue Interviews')
    audit_trial_date = fields.Date(string = 'Date')
    application_used = fields.Char(string = 'Application', default = "OpenERP" ,readonly = True)
    candidate_status_audit = fields.One2many('hr.candidate.audit.trial','audit_trial_id',string = 'Candidate Status')
class hr_recruitment_job(models.Model):
    _name      = 'hr.recruitment.job'

    def _default_employee(self):
        return self.env.uid  or False
    
    def _default_status(self):
        status_obj = self.env['hr.adm.job.status'].search([('name','=','Open')])
        return status_obj.id  or False
    
    name = fields.Char(string = 'Display Name', default= 'Draft')
    family_id = fields.Many2one('hr.adm.family', 'Position Group', required=True)
    role_id = fields.Many2one('hr.adm.family.role', 'Position', required=True)
    job_id = fields.Many2one('hr.job.code', 'Job Code', required=True)
    requisition_number       = fields.Char(string = 'Job Requisition Number',readonly = True)
    status     = fields.Many2one('hr.adm.job.status', 'Status',default = _default_status)
    state     = fields.Selection(REQUISITION_STATUS,string = 'Status',default = 'draft')
    currency_id = fields.Char(compute='_get_currency', string='Currency')
    internal_title = fields.Char(string = 'CareTech Title',)
    internal_description = fields.Text(string = 'CareTech Job Description')
    external_title = fields.Char(string = 'External Title',)
    external_description = fields.Text(string = 'External Job Description')

    hiring_manager = fields.Many2one('res.users', 'Hiring Manager',default = _default_employee)
    primary_recruiter = fields.Many2one('res.users', 'Primary Recruiter')   
 
    employment_category     = fields.Many2one('hr.adm.emp.category', 'Employment Category',)
    no_of_openings = fields.Integer('No. Of Openings',)
    no_of_positions_filled = fields.Integer('No. Of Positions Filled',)
    department = fields.Many2one('hr.department', 'Department')
    geographic_location = fields.Many2one('hr.adm.geo.location', 'Geographic Location') 
    location_description = fields.Many2one('hr.adm.location.details', 'Location Description',)
    
    budget_compensation = fields.Float('Budgeted Compensation', )
    offer_min = fields.Float('Offer Min', )
    offer_max = fields.Float('Offer Max', )
    add_or_replace  = fields.Selection(ADD_REPLACE,string = 'Add or Replace',)
    replacement_for = fields.Char(string = 'Replacement For')
    travel = fields.Many2one('hr.adm.travel', 'Travel')
    hiring_mgr_remarks = fields.Text(string = 'Hiring Manager Comments')
    competency_details =  fields.One2many('hr.recruitment.job.competency','hr_recruitment_job_id','Competency Details')
    questions_details =  fields.One2many('hr.recruitment.job.questions','hr_recruitment_job_id','Questions')
    display_sheet = fields.Char(string = 'Display Sheet',default = 'SHEET_1')
    job_code = fields.Char('Job Code', related = 'job_id.name', store=False)
    caretech_offer_min = fields.Float('Caretech Offer Min', related= 'job_id.min_salary', store=False)
    caretech_offer_mid = fields.Float('Caretech Offer Mid', related= 'job_id.mid_salary', store=False)
    caretech_offer_max = fields.Float('Caretech Offer Max', related= 'job_id.max_salary', store=False)
    workflow_history_id=fields.One2many('hr.job.requisition.workflow.history', 'job_requisition_id', 'Workflow History', domain=[('is_active','=',True)])
    approval_status= fields.Selection(APPROVAL_STATE_SELECTION, 'Approval Status',)
    job_posting_status= fields.Selection(JOB_POSTING_STATUS_SELECTION, 'Job Posting Status', default = 'not_posted')
    submitted_by = fields.Many2one('res.users', 'Submitted by')
    submitted_date =  fields.Date(string = 'Submitted Date',)

    def _get_currency(self):
        for record in self:
            record.currency_id = str(3)
    
    @api.onchange('geographic_location')
    def _onchange_geographic_location(self):
        self.location_description = False
        
    @api.onchange('family_id')
    def _onchange_family_id(self):
        self.role_id = False    
        self.job_id = False
        return {'domain': {'job_id': [('id', '=', -1)],}}
    
    @api.onchange('role_id')
    def _onchange_role_id(self):
        self.job_id = False    
        if self.role_id:
            jobs = []
            self.env.cr.execute(" select hr_job_code_id from hr_adm_family_role_hr_job_code_rel where hr_adm_family_role_id = %s", (self.role_id.id,))
            for job  in self.env.cr.fetchall():
                jobs.append(job)
            return {'domain': {'job_id': [('id', 'in', jobs)],}}
        return False
    
    
    @api.one    
    def validate_form1(self):
        if self.family_id.id == False:
            raise ValidationError('Please select a Position Group.')
        if self.role_id.id == False:
            raise ValidationError('Please select a Position.')
        if self.job_id.id == False:
            raise ValidationError('Please select a Job Code.')
        return True
    
    @api.one    
    def validate_form2(self):
        if self.status.id == False:
            raise ValidationError('Please select a Status.')
        if self.hiring_manager.id == False:
            raise ValidationError('Please select a Hiring Manager.')
        if self.internal_title == '':
            raise ValidationError('Please enter the CareTech Title.')
        if self.external_title == '':
            raise ValidationError('Please enter the External Title.')
        if self.employment_category.id == False:
            raise ValidationError('Please select a Employment Category.')
        if self.no_of_openings <= 0:
            raise ValidationError('No. Of Openings must be greater then 0.')
        if self.offer_min <= 0:
            raise ValidationError('Minimum Offer must be greater then 0.')
        if self.offer_max <= 0:
            raise ValidationError('Maximum Offer must be greater then 0.')
        if self.offer_max < self.offer_min:
            raise ValidationError('Maximum Offer must be greater then Minimum Offer.')
        for competency_line in itertools.chain(self.competency_details):
            if competency_line.expected_rating < 0 or competency_line.expected_rating > 100:
                raise ValidationError('Expected Rating must be between 0 to 100.')
            if competency_line.weight < 0 or competency_line.weight > 100:
                raise ValidationError('Weight must be between 0 to 100.')
        return True
    
    
    @api.multi    
    def submit(self):
        self.validate_form2()
        vals = {}
        vals['state'] = 'submit'
        requisition_number = self.generate_code()
        vals['requisition_number'] = requisition_number
        vals['name'] = requisition_number
        document_type_obj = self.env['workflow.document.type'].search([('name','=','Job Requisition'),('status','=','Active')])
        
        workflow_params = {
                  'workflow_obj' : self,
                  'document_model' : 'hr.job.requisition',
                  'history_model' : 'hr.job.requisition.workflow.history',
                  'object_id' : 'job_requisition_id',
                  'document_type' : 'Job Requisition',
                  'document_type_id' : document_type_obj.id,
                  'document_sub_type_id' : False,
                  'document_number' : requisition_number,
                  'description' : self.internal_title,
                  }

        self.env['approval.details'].create_workflow(self, workflow_params)
        self.write(vals)
        return True
    
    @api.model    
    def updatePostingStatus(self, job_id, posting_status):
        post_status =  ''
        job_req_obj = self.search([('id', '=', job_id)])
        for req in job_req_obj:
            post_status =  req.job_posting_status
        if(post_status == '' or post_status=='not_posted'):
            posting_status = posting_status
        elif(post_status == 'internal_external'):
            posting_status = 'internal_external'
        elif(post_status == 'internal' and posting_status == 'external'):
            posting_status = 'internal_external'
        elif(post_status == 'external' and posting_status == 'internal'):
            posting_status = 'internal_external'       
        job_request_obj = self.browse(job_id) 
        job_request_obj.write({'job_posting_status': posting_status,})     
    
    def generate_code(self, cr, uid, context=None):
        requisition_number = self.pool.get('ir.sequence').get(cr, uid,'hr.recruitment.job')
        return requisition_number 
     
    @api.multi    
    def create_job_requistion(self):
        self.validate_form1()
        self.internal_title= self.role_id.name
        self.external_title  = self.role_id.name
        self.internal_description = self.role_id.description
        self.external_description = self.role_id.description
        self.caretech_offer_min = self.job_id.min_salary
        self.caretech_offer_mid = self.job_id.mid_salary
        self.caretech_offer_max = self.job_id.max_salary
        
        self.display_sheet = 'SHEET_2'
        for line in itertools.chain(self.role_id.competencies):
            curr_line_id = [{
                    'library_id': line.competency_id.id or False,
                    'category_id': line.category.id or False,
                    'competency_id': line.id or False,
                    'expected_rating': 0.00,
                    'weight': 0.00,
                    'hr_recruitment_job_id': self.id,
                    'is_active' : True,
                    'is_editable' : False
                    }]
            self.competency_details = curr_line_id
        self.env.cr.execute(" select id as question_id, question_id as q_lib_id from  hr_adm_question where is_default  = TRUE",)
        for question_id,q_lib_id  in self.env.cr.fetchall():    
            curr_qLine_id = [{
                    'question_library_id': q_lib_id or False,
                    'question_id': question_id or False,
                    'weight': 0.00,
                    'hr_recruitment_job_id': self.id,
                    'is_active' : True,
                    'is_required' : False,
                    'is_disqualifier' : False,
                    'is_score' : False
                    }]
            self.questions_details = curr_qLine_id
            
                
class hr_recruitment_job_competency(models.Model):
    _name = 'hr.recruitment.job.competency'
    
    hr_recruitment_job_id = fields.Many2one('hr.recruitment.job', 'Job Id')
    library_id = fields.Many2one('hr.adm.competency.library', 'Library')
    category_id = fields.Many2one('hr.adm.competency.category', 'Category')
    competency_id = fields.Many2one('hr.adm.competency', 'Competency')
    expected_rating = fields.Float('Expected Rating %',required = True)
    weight = fields.Float('Weight %',required = True)
    is_active =  fields.Boolean('Active',default=True)
    is_editable =  fields.Boolean('Editable',default=True)
    
    @api.onchange('competency_id')
    def _onchange_competency(self):
        if self.competency_id:
            categories = []
            libraries = []
            self.env.cr.execute(" select category as category_id,competency_id as library_id from hr_adm_competency where id = %s", (self.competency_id.id,))
            for category,library  in self.env.cr.fetchall():
                categories.append(category)
                libraries.append(library)
                self.category_id = category
                self.library_id  = library
                return {'domain': {
                      'category_id': [('id', 'in', categories)],
                      'library_id': [('id', 'in', libraries)],
                        }} 
        return False
        
    
class hr_recruitment_job_questions(models.Model):
    _name = 'hr.recruitment.job.questions'
    
    hr_recruitment_job_id = fields.Many2one('hr.recruitment.job', 'Job Id')
    question_library_id = fields.Many2one('hr.adm.question.library', 'Questions Library')
    question_id = fields.Many2one('hr.adm.question', 'Questions')
    is_active =  fields.Boolean('Active',default=True)
    is_required =  fields.Boolean('Required')
    is_disqualifier =  fields.Boolean('Disqualifier')
    is_score =  fields.Boolean('Score')
    weight = fields.Float('Weight %',required = True)

class hr_job_requisitions(models.Model):
    _name = 'hr.job.requisitions'
    logging.info('****** in class')     
    
    @api.model
    def get_job_requisitions_list(self):
        status_selection = {
          '0' :'Open',
          '1' :'Closed',
          '2' :'Pre Approved',
          }
        status=[]
        dynamic_query = ""
        state_id=False
        vals=self.env.context
        
        if 'status_id' in vals :
            status=vals['status_id']
            if not status == '2' :
                logging.info('in22222%s'%status)
                state=status_selection[status]
                self._cr.execute('select id from hr_adm_job_status where name=%s',(state,))
                res = self._cr.fetchall()            
                for ids in res :
                    state_id=ids[0]
        else :
            self._cr.execute(''' select id from hr_adm_job_status where name='Open' ''',())
            res = self._cr.fetchall()            
            for ids in res :
                state_id=ids[0]     
        
          
        query ="""select hr_job.id as id,
                            internal_title , requisition_number ,  res.name as hiring_manager, res1.name as primary_recruiter,status.name as Status,hr_job.no_of_openings as openings,
                            null as Job_Posting,
                            null as age,
                            null as candidates, 
                            null as progress
                            from 
                            hr_recruitment_job hr_job
                            LEFT JOIN res_users usr on usr.id =hr_job.hiring_manager
                            LEFT JOIN res_users usr1 on usr1.id =hr_job.primary_recruiter 
                            LEFT JOIN res_partner  res on  res.id = usr.partner_id
                            LEFT JOIN res_partner  res1 on  res1.id = usr1.partner_id    
                            LEFT JOIN hr_adm_job_status status on status.id = hr_job.status 
                            """
                         
        if state_id :
            
            dynamic_query +=" where hr_job.status="+str(state_id)
        query += dynamic_query    
        self._cr.execute(query,())     
        data=self._cr.dictfetchall()
        
        logging.info('query %s'%query)  
        logging.info('dataa %s'%data)       
        return data  


class hr_job_postings(models.Model):
    _name = 'hr.job.postings'
    
    def _default_employee(self):
        return self.env.uid  or False
    
    hr_recruitment_job_id = fields.Many2one('hr.recruitment.job', 'Job Id')
    posting_start_date =  fields.Date(string = 'Posting Start Date', required=True)
    posting_end_date =  fields.Date(string = 'Posting End Date', required=True)
    posted_date =  fields.Date(string = 'Posted Date',default = lambda *a: datetime.datetime.now().strftime('%Y-%m-%d'))
    posted_by = fields.Many2one('res.users', 'Posted By', default = _default_employee)
    job_posting_status= fields.Selection(JOB_POST_STATUS_SELECTION, 'Job Posting Status',)
    is_active =  fields.Boolean('Active',default=True)
    
    @api.model
    def get_todo_tasks(self):
        self._cr.execute("""
                    select 
                        hr_job.id as id,internal_title, requisition_number ,  res.name as hiring_manager,
                        res1.name as primary_recruiter,status.name as Status,hr_job.no_of_openings as openings,
                        job_posting_status as Job_Posting
                    from 
                        hr_recruitment_job hr_job
                        LEFT JOIN res_users usr on usr.id =hr_job.hiring_manager
                        LEFT JOIN res_users usr1 on usr1.id =hr_job.primary_recruiter 
                        LEFT JOIN res_partner  res on  res.id = usr.partner_id
                        LEFT JOIN res_partner  res1 on  res1.id = usr1.partner_id    
                        LEFT JOIN hr_adm_job_status status on status.id = hr_job.status
                    where
                       state in ('approved')  
                       and hr_job.job_posting_status = 'not_posted'      
                """)
        res=self._cr.dictfetchall()
        return res    
        
        
        
    @api.model
    def get_job_postings_list(self):
        status=''
        dynamic_query = ""
        vals=self.env.context
        if 'status_id' in vals :
            status=vals['status_id']
        query ="""
                    select 
                        hr_job.id as id,internal_title, requisition_number ,  res.name as hiring_manager,
                        res1.name as primary_recruiter,status.name as Status,hr_job.no_of_openings as openings,
                        job_posting_status as Job_Posting
                    from 
                        hr_recruitment_job hr_job
                        LEFT JOIN res_users usr on usr.id =hr_job.hiring_manager
                        LEFT JOIN res_users usr1 on usr1.id =hr_job.primary_recruiter 
                        LEFT JOIN res_partner  res on  res.id = usr.partner_id
                        LEFT JOIN res_partner  res1 on  res1.id = usr1.partner_id    
                        LEFT JOIN hr_adm_job_status status on status.id = hr_job.status
                    where
                        state in ('approved') 
                """                    
        if status  :
            dynamic_query +="  and hr_job.job_posting_status = '" +str(status) + "'"
        else  :
            dynamic_query +=" and hr_job.job_posting_status = 'not_posted'"
         
        query += dynamic_query
        logging.info(query)    
        self._cr.execute(query,())     
        data=self._cr.dictfetchall()
        return data           
    
    @api.model
    def post_job(self):
        vals=self.env.context
        job_request_ids = vals['job_request_ids']
        posting_status =  vals['posting_status']
        start_date = vals['start_date']
        end_date = vals['end_date']
        count = 1
        for job_id in job_request_ids:
            job_id = int(job_id)
            val = {}
            val['hr_recruitment_job_id'] = job_id
            val['job_posting_status'] = posting_status
            val['posting_start_date'] = datetime.datetime.strptime(start_date, "%m/%d/%Y").date() 
            val['posting_end_date'] = datetime.datetime.strptime(end_date, "%m/%d/%Y").date() 
            self.create(val)
            self.env['hr.recruitment.job'].updatePostingStatus(job_id, posting_status)				
        return True


''' JOb reuisitions Recruiter Allocation Screen'''    
class hr_recruiter_allocations(models.Model):
    _name = 'hr.recruiter.allocation'
    _order = 'job_id asc' 
    _auto = False
    _description = "Recruiter Allocation" 
    logging.info('****** in class') 
    def _default_recruiter(self):
        result={}
        for rec_name in self:
            #result[rec_name.recruiter_name] = rec_name.recruiter_id.primary_recruiter.id
            logging.info('****************')
            logging.info(rec_name)
            logging.info(result)
                
        return result
    
    job_requisition_id = fields.Many2one('hr.recruitment.job','Job Requisition Number', readonly=True)
    job_id = fields.Char(string = 'Job Requisition Number',readonly=True)
    job_title = fields.Char(string = 'Job Requisition Title',readonly=True) 
    hiring_manager = fields.Char(string = 'Hiring Manager',readonly=True) 
    positions = fields.Char(string = '# Positions',readonly=True)
    recruiter_id = fields.Many2one('res.users', 'Recruiter',default = _default_recruiter)
    
    #recruiter_name = fields.Integer(compute='_recruiter',string='Recruiter')
    
#     @api.one
#     @api.depends('recruiter_id')
#     
#     
    def init(self, cr):
        tools.drop_view_if_exists(cr, 'hr_recruiter_allocation')
        cr.execute("""
            CREATE OR REPLACE VIEW hr_recruiter_allocation AS (
                SELECT
                      
                      hr_job.id as job_requisition_id,
                      hr_job.id as id,
                      hr_job.requisition_number as job_id,
                      hr_job.internal_title as job_title, 
                      res.name  as hiring_manager,
                      hr_job.no_of_openings as  positions,
                      usr1.id as recruiter_id
                      
                    
                FROM
                    hr_recruitment_job hr_job
                    LEFT JOIN res_users usr on usr.id =hr_job.hiring_manager
                    LEFT JOIN res_partner  res on  res.id = usr.partner_id
                    LEFT JOIN res_users usr1 on usr1.id =hr_job.primary_recruiter 
                    LEFT JOIN res_partner  res1 on  res1.id = usr1.partner_id 
               
            )
        """) 
    def unlink(self, cr, uid, ids, context=None):
        raise ValidationError('Recruiter Allocation Records cannot be deleted.')
        return super(hr_recruiter_allocations, self).unlink(cr, uid, ids, context=context)       
    
    @api.multi
    def write(self, vals):
        hr_job = self.env['hr.recruitment.job']
        
        if 'recruiter_id' in vals :
            recruiter=vals['recruiter_id']
            object_value = self.job_requisition_id.id
            hr_job_obj = hr_job.browse(object_value)
            
            hr_job_obj.write({'primary_recruiter': recruiter})
        return  True    
     
class hr_candidate_pipeline(models.Model):
    _name = 'hr.candidate.pipeline'    
    job_id = fields.Many2one('hr.recruitment.job','Job ID')
    candidate_id = fields.Many2one('hr.recruitment.candidate','Candidate ID')
    candidate_type = fields.Selection(candidate_type,string = 'Candidate Type')
    status = fields.Selection(CANDIDATE_PIPELINE_STATUS_SELECTION,string = 'Status',)
    stage = fields.Many2one('hr.candidate.status','Stage',domain="[('status_group_id.code', '=', 'In-Progress')]")
    candidate_pipeline_history = fields.One2many('hr.candidate.pipeline.history', 'candidate_pipeline_id','Pipeline History')
    remarks = fields.Text(string = 'Remarks',)
    
    def setup_candidate_interview(self, cr, uid, ids, context=None):
        res_id = False
        if isinstance(ids, (int, long, float, complex)):
            candidate_pipeline_obj = self.browse(cr,uid,ids,context)
        elif isinstance(ids, (tuple, list, dict, set)):
            candidate_pipeline_obj = self.browse(cr,uid,ids[0],context)
        interview = self.pool.get('hr.candidate.interview')
        interview_ids = interview.search(cr, uid, [('candidate_pipeline_id','=',candidate_pipeline_obj.id)],context=context)
        if len(interview_ids)>0:
            res_id = interview_ids[0]
        context.update({'default_job_id':candidate_pipeline_obj.job_id.id })
        context.update({'default_candidate_id':candidate_pipeline_obj.candidate_id.id })
        context.update({'default_candidate_type':candidate_pipeline_obj.candidate_type })
        context.update({'default_candidate_pipeline_id':candidate_pipeline_obj.id })
        title = candidate_pipeline_obj.job_id.internal_title or candidate_pipeline_obj.job_id.external_title
        return {
            'type': 'ir.actions.act_window',
            'name': "Set up Interviews for "+title,
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'hr.candidate.interview',
            'nodestroy': True,
            'context': context,
            'target': 'new',
            'res_id': res_id,
        }
        
    @api.model
    def setup_interview(self):
        res_id = False
        context_dict=self.env.context
        if context_dict.get('pipeline_id'):
            candidate_pipeline_obj = self.browse(int(context_dict['pipeline_id']))
        interview = self.env['hr.candidate.interview']
        interview_ids = interview.search([('candidate_pipeline_id','=',candidate_pipeline_obj.id)])
        if len(interview_ids)>0:
            res_id = interview_ids[0]
#         context_dict.update({'default_job_id':candidate_pipeline_obj.job_id.id })
#         context_dict.update({'default_candidate_id':candidate_pipeline_obj.candidate_id.id })
#         context_dict.update({'default_candidate_type':candidate_pipeline_obj.candidate_type })
#         context_dict.update({'default_candidate_pipeline_id':candidate_pipeline_obj.id })
        title = candidate_pipeline_obj.job_id.internal_title or candidate_pipeline_obj.job_id.external_title
        return {
            'type': 'ir.actions.act_window',
            'name': "Set up Interviews for "+title,
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'hr.candidate.interview',
            'nodestroy': True,
            'context': context_dict,
            'target': 'new',
            'res_id': res_id,
        }
    
    @api.model
    def get_candidate_pipeline_details(self):
        context_dict=self.env.context
        
        if context_dict.get('job_id'):
            job_id=int(context_dict['job_id'])

        candidates=[]
        #To fetch job details
        job_detail=self.env['hr.recruitment.job'].browse(job_id)
                
        job_details_dict={
                          'job_requisition_number':job_detail.requisition_number,
                          'job_status':job_detail.status.name,
                          'hiring_manager':job_detail.hiring_manager.name,
                          'title':job_detail.internal_title,
                          'no_of_openings':job_detail.no_of_openings,
                          'job_id':job_detail.id
                          }
        
        #To fetch stage counts
        candidate_status=self.env['hr.candidate.status'].search([('status','=','Active')])
        candidate_status_count=[]
        for stage in candidate_status:
            candidate_pipeline=self.search([('stage','=',stage.id),('job_id','=',job_id)])
            vals={
                  'id':stage.id,
                  'name':stage.internal_label,
                  'count':len(candidate_pipeline),
                  'status_group':stage.status_group_id.code,
                  }
            candidate_status_count.append(vals)
            
         #To fetch Candidates for the stage
        if context_dict.get('stage_id'):
             stage_id=int(context_dict['stage_id'])
             
             pipeline_obj=self.search([('stage','=',stage_id),('job_id','=',job_id)])
             for candidate in pipeline_obj:
                 profile_dict={
                               'candidate_name':str(candidate.candidate_id.name)+' ('+str(candidate.candidate_type)+')',
                               'candidate_id':candidate.candidate_id.id,
                               'status':candidate.status,
                               'stage':candidate.stage.internal_label,
                               'pipeline_id':candidate.id,
                               }
                 candidates.append(profile_dict)
                 
        else:
            pipeline_obj=self.search([('job_id','=',job_id)])
            for candidate in pipeline_obj:
                 profile_dict={
                               'candidate_name':str(candidate.candidate_id.name)+' ('+str(candidate.candidate_type)+')',
                               'candidate_id':candidate.candidate_id.id,
                               'status':candidate.status,
                               'stage':candidate.stage.internal_label,
                               'pipeline_id':candidate.id,
                               }
                 candidates.append(profile_dict)
         
        return [job_details_dict,candidates,candidate_status_count]
    
class hr_candidate_pipeline_history(models.Model):
    _name = 'hr.candidate.pipeline.history'    
    candidate_pipeline_id = fields.Many2one('hr.candidate.pipeline','Candidate Pipeline')
    user_id = fields.Many2one('res.users','User')
    date = fields.Datetime(string = 'Date',)
    status = fields.Char(string = 'Status',)
    remarks = fields.Text(string = 'Remarks',)
    stage = fields.Many2one('hr.candidate.status','Stage',domain="[('status_group_id.code', '=', 'In-Progress')]")
    
class hr_candidate_interview(models.Model):
    _name = 'hr.candidate.interview' 
    candidate_pipeline_id = fields.Many2one('hr.candidate.pipeline','Candidate Pipeline')  
    job_id = fields.Many2one(string='Job ID',related='candidate_pipeline_id.job_id')
    candidate_id = fields.Many2one(string='Candidate ID',related='candidate_pipeline_id.candidate_id') 
    candidate_type = fields.Selection(candidate_type,string='Candidate Type',related='candidate_pipeline_id.candidate_type')  
    attach_resume = fields.Boolean(string = 'Attach Resume',)
    candidate_interviewers = fields.One2many('hr.candidate.interviewers', 'candidate_interview_id','Interviewers')
    remarks = fields.Text(string = 'Remarks',compute='_compute_remarks')
    
    @api.one
    @api.depends('job_id', 'candidate_id')
    def _compute_remarks(self):
        remarks = "Job ID : "+self.job_id.requisition_number +"\n"
        remarks += "Job Title : "+self.job_id.internal_title +"\n" or self.job_id.external_title +"\n"
        remarks += "Candidate : "+self.candidate_id.name +"\n"
        remarks += "Candidate Type : "+self.candidate_type
        self.remarks = remarks
        
    def save(self, cr, uid, ids, context=None):
        if isinstance(ids, (int, long, float, complex)):
            interview_obj = self.browse(cr,uid,ids,context)
        elif isinstance(ids, (tuple, list, dict, set)):
            interview_obj = self.browse(cr,uid,ids[0],context)
        title = interview_obj.job_id.internal_title or interview_obj.job_id.external_title
        return {
            'type': 'ir.actions.act_window',
            'name': "Set up Interviews for "+title,
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'hr.candidate.interview',
            'nodestroy': True,
            'context': context,
            'target': 'new',
            'res_id': interview_obj.id,
        }
    
    def create_meeting(self, cr, uid, ids, context=None):
        event_obj = self.pool.get('calendar.event')
        att_obj = self.pool.get('calendar.attendee')
        if isinstance(ids, (int, long, float, complex)):
            interview_obj = self.browse(cr,uid,ids,context)
        elif isinstance(ids, (tuple, list, dict, set)):
            interview_obj = self.browse(cr,uid,ids[0],context)
        title = interview_obj.job_id.internal_title or interview_obj.job_id.external_title
        
        for candidate_interviewer in interview_obj.candidate_interviewers:
            interview_date = candidate_interviewer.interview_date
            interview_hour = candidate_interviewer.interview_hour or '00'
            interview_minute = candidate_interviewer.interview_minute or '00'
            duration = candidate_interviewer.duration
            duration_list = duration.split(':', 2)
            
            
            if candidate_interviewer.interview_period != 'AM':
                interview_hour += 12
            interview_time = str(interview_hour) + ':' + str(interview_minute)
            start_date = datetime.datetime.strptime(interview_date+ ' ' +interview_time, "%Y-%m-%d %H:%M")
            end_date = start_date + datetime.timedelta(hours=int(duration_list[0]),minutes = int(duration_list[1]))
#             date_str = str(interview_date.year) + '-' + str(interview_date.month) +'-'+ str(interview_date.day)
#             interview_date +=' '+str(interview_hour)+':'+str(interview_minute)+':00'
            curr_event = {
                      'name' : 'Interview for candidate '+interview_obj.candidate_id.name,
                      'start':  start_date.strftime("%Y-%m-%d %H:%M:%S"),
                      'stop' : end_date.strftime("%Y-%m-%d %H:%M:%S"),
                      
                      }
            event_id = event_obj.create(cr, uid, curr_event,context=context)
            curr_attendee = {
                             'event_id' : event_id,
                             'state' : 'accepted',
                             'cn' : interview_obj.candidate_id.name,
                             'partner_id' : candidate_interviewer.interviewer_user_id.partner_id.id
                             }
            attendee_id = att_obj.create(cr, uid, curr_attendee,context=context)
            event_obj.write(cr, uid, [event_id], {
                    'attendee_ids': [(4, attendee_id)]
                }, context=context)
        return {
            'type': 'ir.actions.act_window',
            'name': "Set up Interviews for "+title,
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'hr.candidate.interview',
            'nodestroy': True,
            'context': context,
            'target': 'new',
            'res_id': interview_obj.id,
        }
        
    @api.model
    def get_job_requisitions_list(self):
        query ="""select hr_job.id as id,
                            internal_title , 
                            requisition_number ,  
                            res.name as hiring_manager, 
                            status.name as Status
                 from 
                            hr_recruitment_job hr_job
                            LEFT JOIN res_users usr on usr.id =hr_job.hiring_manager
                            LEFT JOIN res_users usr1 on usr1.id =hr_job.primary_recruiter 
                            LEFT JOIN res_partner  res on  res.id = usr.partner_id
                            LEFT JOIN res_partner  res1 on  res1.id = usr1.partner_id    
                            LEFT JOIN hr_adm_job_status status on status.id = hr_job.status 
                where hr_job.state='approved'
                            """
        self._cr.execute(query,())     
        data=self._cr.dictfetchall()
        
        return data
    
    @api.model
    def get_candidate_details(self):
        context_dict=self.env.context
        candidate_pipeline = self.env['hr.candidate.pipeline']
        if context_dict.get('job_id'):
            job_id=int(context_dict['job_id'])

        candidates=[]
        
        #To fetch stage counts
        job_competency=self.env['hr.recruitment.job.competency'].search([('hr_recruitment_job_id', '=', job_id)])
        competencies=[]
        for competency in job_competency:
            vals={
                  'id':competency.competency_id.id,
                  'name':competency.competency_id.name,
                  }
            competencies.append(vals)
        candidate_pipeline_obj = candidate_pipeline.search([('job_id','=',job_id)])  
        for candidate in candidate_pipeline_obj:
            profile_dict={
                           'candidate_name':str(candidate.candidate_id.name)+' ('+str(candidate.candidate_type)+')',
                           'candidate_id':candidate.candidate_id.id,
                           'status':candidate.status,
                           }
            candidates.append(profile_dict)
        logging.info("candidates--------")
        logging.info(candidates)
        return [candidates,competencies]
    
class hr_candidate_interviewers(models.Model):
    _name = 'hr.candidate.interviewers'    
    candidate_interview_id = fields.Many2one('hr.candidate.interview','Candidate Interview',required=True)
    interviewer_user_id = fields.Many2one('res.users','Interviewer',required=True)
    interview_date = fields.Date(string = 'Interview Date',required=True)
    interview_hour = fields.Selection(INTERVIEW_HOUR_SELECTION,string = 'Hour',required=True,)
    interview_minute = fields.Selection(INTERVIEW_MINUTE_SELECTION,string = 'Minute',required=True,)
    interview_period = fields.Selection([('AM','AM'),('PM','PM')],'Period',required=True) 
    duration = fields.Char('Duration (HH:MM)', required=True)
    notes = fields.Char(string = 'Notes',)
    
class hr_candidate_interview_feedback(models.Model):
    _name = 'hr.candidate.interview.feedback' 
    candidate_pipeline_id = fields.Many2one('hr.candidate.pipeline','Candidate Pipeline')  
    job_id = fields.Many2one(string='Job ID',related='candidate_pipeline_id.job_id')
    candidate_id = fields.Many2one(string='Candidate ID',related='candidate_pipeline_id.candidate_id') 
    notes_summary = fields.Text(string = 'Notes')
    overall_rating = fields.Char('Overall Rating')
    average_rating = fields.Float('Average Rating')
    interviewer_user_id = fields.Many2one('res.users','Interviewer')
    
class hr_candidate_competency_rating(models.Model):
    _name = 'hr.candidate.competency.rating'    
    interview_feedback_id = fields.Many2one('hr.candidate.interview.feedback','Interview Feedback',required=True)
    competency_id = fields.Many2one('hr.adm.competency','Competency Name',required=True)
    rating = fields.Selection(INTERVIEW_RATING_SELECTION,'My Rating')
    comments = fields.Text(string = 'My Comments')
    
    def done(self, cr, uid, ids, context=None):
        return True
    
    def cancel(self, cr, uid, ids, context=None):
        return True

class hr_candidate_search_line(models.Model):
    _name = 'hr.candidate.search.line'
    
    candidate_id=fields.Many2one('hr.recruitment.candidate','Candidate ID')
    name=fields.Char("Candidate Name")
    email=fields.Char("Email")
    mobile=fields.Char("Phone")
    designation=fields.Char("Designation")
    candidate_type=fields.Selection(candidate_type,string = 'Type',)
    candidate_selected =  fields.Boolean('Select')
    candidate_child_id    = fields.Many2one('hr.candidate.search','Name')
    
    def attach_candidate(self, cr, uid, ids, context=None):
        record=self.browse(cr, uid, ids[0], context=context)
        return {
             'type': 'ir.actions.act_window',
             'name': "Attach Candidate",
             'res_model': 'hr.recruitment.candidate',
             'view_type': 'form',
             'view_mode': 'form',
             'target': 'current',
             'res_id': record.candidate_id.id,
             } 
      
                            
class hr_candidate_search(models.Model):
    _name = 'hr.candidate.search'
    
    name=fields.Char("Name",default="Attach Candidate")
    candidate_name=fields.Char("Candidate Name")
    email=fields.Char("Email")
    mobile=fields.Char("Phone")
    candidate_type=fields.Selection(candidate_type,string = 'Type',)
    hr_recruitment_job_id = fields.Many2one('hr.recruitment.job', 'Job ID')
    candidate_line_id    = fields.One2many('hr.candidate.search.line','candidate_child_id')
    
    
    
    @api.multi 
    def search_candidate(self,clear_flag):
        self.env.cr.execute(" delete from hr_candidate_search_line", ())
        self.env.cr.execute(" delete from hr_candidate_search where id not in (%s)", (self.id,))
        
        filter_condition = ''
        candidate_name  = self.candidate_name
        if candidate_name:
            filter_condition += "and  (first_name like '%"+candidate_name+"%' or middle_name like '%"+candidate_name+"%' or last_name like '%"+candidate_name+"%')" 
        candidate_type  = self.candidate_type    
        if candidate_type:
            filter_condition += "and candidate_type like ('%"+ candidate_type +"%')"
        email  = self.email    
        if email:
            filter_condition += "and email like ('%"+ email +"%')"
        mobile  = self.mobile    
        if mobile:
            filter_condition += "and mobile like ('%"+ mobile +"%')"    
        
        if clear_flag == 'CLEAR':
            filter_condition += " and 1 = -1"
        query = """ 
                select 
                    id,candidate_type, 
                    case when first_name is null then '' else first_name || ' ' end  || '' || 
                    case when middle_name is null then '' else middle_name || ' ' end || '' || 
                    case when last_name is null then '' else last_name end as candidate_name,
                    title as designation,email,mobile
                from 
                    hr_recruitment_candidate 
                where profile_created = TRUE
                    """
        query = query + filter_condition         
        self.env.cr.execute(query, ())
        
        for candidate_id,candidate_type,candidate_name,designation,email ,mobile in self.env.cr.fetchall():
            self.candidate_line_id.create({
                                           'name':candidate_name,
                                           'email':email,
                                           'mobile':mobile,
                                           'candidate_type':candidate_type,
                                           'candidate_id':candidate_id,
                                           'designation':designation,
                                           'candidate_child_id':self.id,
                                           })
        return True
    
    
    @api.multi 
    def clear_candidate_search(self):
        self.candidate_name = ''
        self.candidate_type = ''
        self.email = ''
        self.mobile= ''
        self.hr_recruitment_job_id = False
        self.search_candidate("CLEAR")
        
    
    @api.multi 
    def attach_candidate_to_job(self):
        
        if not self.hr_recruitment_job_id:
            raise ValidationError('Please select a Job.')
        
        for candidate in self.candidate_line_id:
            if candidate.candidate_selected:
                
                vals={
                      'job_id':self.hr_recruitment_job_id.id,
                      'candidate_id':candidate.candidate_id.id,
                      'candidate_type':candidate.candidate_type,
                      'status':'Yet to Start',
    #                   'stage':
                      }
                candidate_pipeline_obj=self.env['hr.candidate.pipeline'].create(vals)
                candidate_history_obj=self.env['hr.candidate.pipeline.history']
                history={
                      'user_id':self.env.uid,
                      'candidate_pipeline_id':candidate_pipeline_obj.id,
                      'date':datetime.datetime.now(),
                      'status':'Candidate attached to a job',
    #                   'stage':
                      }
                
                candidate_history_obj.create(history)
                                                                         
        return True

########################################## reports ##############################################
########################################## init.py #################################################

import new_requisistion_report
import open_positions_report

###################################### excel_styles.py #################################################
import os
from xlwt import easyxf
import xlwt


tittle_style = xlwt.easyxf('font: height 240, name Arial, colour_index white, bold on; align: wrap on, vert centre, horiz center;' 'pattern: pattern solid, fore_colour 0x3c')

subTitle_style = xlwt.easyxf('font: height 200, name Arial, colour_index white, bold on, italic on; align: wrap on, vert centre, horiz left;' 'pattern: pattern solid, fore_colour 0x3c')

g_style = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz left;' 'pattern: pattern solid, fore_colour 0x1B')

gn_style = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1B')

gtn_style = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1B')

gm_style = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1B')

style1_even = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz left;' 'pattern: pattern solid, fore_colour 0x1A')
style1_odd = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz left;')

style2_even = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style2_odd = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;')

style3_even = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style3_odd = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;')

style4_even = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style4_odd = xlwt.easyxf('font: bold off,height 200;' 'align: wrap on, vert centre, horiz right;')

style5_even = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style5_odd = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;')


style6_even = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style6_odd = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;')

style7_even = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style7_odd = xlwt.easyxf('font: bold on,height 200;' 'align: wrap on, vert centre, horiz right;')

style8_even = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style8_odd = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;')

style9_even = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz left;' 'pattern: pattern solid, fore_colour 0x1A')
style9_odd = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz left;')

style10_even = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style10_odd = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;')

style11_even = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;' 'pattern: pattern solid, fore_colour 0x1A')
style11_odd = xlwt.easyxf('font: bold off,height 200,color red;' 'align: wrap on, vert centre, horiz right;')



borders = xlwt.Borders()
borders.left = xlwt.Borders.THIN
borders.right = xlwt.Borders.THIN
borders.top = xlwt.Borders.THIN
borders.bottom = xlwt.Borders.THIN

class ExcelStyles(object):
     
    def getBorders(self):
        bdr = xlwt.Borders()
        bdr.left = xlwt.Borders.THIN
        bdr.right = xlwt.Borders.THIN
        bdr.top = xlwt.Borders.THIN
        bdr.bottom = xlwt.Borders.THIN
        return  bdr 
       
    def title(self):
        tittle_style.borders = borders
        return  tittle_style
    
    def subTitle(self):
        subTitle_style.borders = borders
        return  subTitle_style
    
    
    def groupByTitle(self):
        g_style.borders = borders
        return  g_style
    
    def groupByTotal(self):
        gn_style.borders = borders
        gn_style.num_format_str = '########0.00'
        return  gn_style
    
    def groupByTotalNumber(self):
        gtn_style.borders = borders
        gtn_style.num_format_str = '##########0'
        return  gtn_style
    
    def groupByTotalMoney(self):
        gm_style.borders = borders
        gm_style.num_format_str = '##,##,##,##0.00'
        return  gm_style
    
    
    def contentText(self, dataRowNo,fontColor='',backColor=''):
        style1 = None
        if dataRowNo % 2 == 0:
            style1 = style1_even
        else:
            style1 = style1_odd
        style1.borders = borders
        return  style1
   
    def contentMoney(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style2 = style2_even
        else:
             style2 = style2_odd
        style2.borders = borders
        style2.num_format_str = '##,##,##,##0.00'
        return  style2 
    
    def contentMoneyBold(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style5 = style5_even
        else:
             style5 = style5_odd
        style5.borders = borders
        style5.num_format_str = '##,##,##,##0.00'
        return  style5 
    
    
     
    def contentNumber(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style3 = style3_even
        else:
             style3 = style3_odd
        style3.borders = borders
        style3.num_format_str = '##########0'
        return  style3  
    
    def contentDecNum(self,dataRowNo):
        if dataRowNo % 2 == 0:
             style4 = style4_even
        else:
             style4 = style4_odd
        style4.borders = borders
        style4.num_format_str = '########0.00'
        return  style4
    
    def contentNumberBold(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style6 = style6_even
        else:
             style6 = style6_odd
        style6.borders = borders
        style6.num_format_str = '##########0'
        return  style6  
    
    def contentDecNumBold(self,dataRowNo):
        if dataRowNo % 2 == 0:
             style7 = style7_even
        else:
             style7 = style7_odd
        style7.borders = borders
        style7.num_format_str = '########0.00'
        return  style7
    
    def contentMoneyRed(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style8 = style8_even
        else:
             style8 = style8_odd
        style8.borders = borders
        style8.num_format_str = '##,##,##,##0.00'
        return  style8 

    def contentTextRed(self, dataRowNo,fontColor='',backColor=''):
        style9 = None
        if dataRowNo % 2 == 0:
            style9 = style9_even
        else:
            style9 = style9_odd
        style9.borders = borders
        return  style9

    def contentNumberRed(self, dataRowNo):
        if dataRowNo % 2 == 0:
             style10 = style10_even
        else:
             style10 = style10_odd
        style10.borders = borders
        style10.num_format_str = '##########0'
        return  style10

    def contentDecNumRed(self,dataRowNo):
        if dataRowNo % 2 == 0:
             style11 = style11_even
        else:
             style11 = style11_odd
        style11.borders = borders
        style11.num_format_str = '########0.00'
        return  style11

####################################################### new_requisition_report.py ####################################

import base64
import cStringIO
from datetime import datetime
import logging
import time
import locale
from openerp.osv import osv, fields
#from report import report_sxw
import xlwt
from excel_styles import ExcelStyles
from openerp import models, fields, api, osv, tools
from openerp.exceptions import ValidationError
from openerp.osv.orm import MetaModel, Model, TransientModel, AbstractModel


ADD_REPLACE=[
          ('Add','Add'),
          ('Replace','Replace')
          ]

class new_requisistion_report(models.TransientModel):
    _name = "new.requisistion.report"
    _description ="newrequisition"

    job_req_id          = fields.Many2one('hr.recruitment.job','Job Requisition')
    department          = fields.Many2one('hr.department','Department')
    number_openings     = fields.Many2one('hr.recruitment.job','Number of Openings')
    job_title           = fields.Char(string = 'Job Title')
    created_by          = fields.Many2one('res.users','Hiring Manager')
    add_replace         = fields.Many2one('hr.recruitment.job','Add or Replace')
    date_created        = fields.Many2one('hr.recruitment.job','Date Created')
    data                = fields.Binary(string = 'File',readonly = True)
    name                = fields.Char(string ='Filename',readonly = True)
    advice              = fields.Text(string ='Advice',readonly = True)

    _defaults = { 
         'name': 'new_requisition_report.xls',
         
     } 
       
    def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):
        if context is None:context = {}
        res = super(new_requisistion_report, self).fields_view_get(cr, uid, view_id=view_id, view_type=view_type, context=context, toolbar=toolbar,submenu=False)
        configured_cmp = []
        cr.execute("select uid from res_groups_users_rel ug join res_groups grp on ug.gid = grp.id where grp.name = 'Hiring Manager' ")      
        configured_cmp = [r[0] for r in cr.fetchall()]
        for field in res['fields']:
            if field == 'created_by':
                res['fields'][field]['domain'] = [('id','in',configured_cmp)]
        return res

    def export_new_requisistion(self, cr, uid, ids, context=None):

            this = self.browse(cr, uid, ids)[0]
 
            if not this.job_req_id: 
                 job_req_id = None
            else:
                job_req_id = this.job_req_id.id
            if not this.department: 
                    department = None
            else:
                department = this.department.id
                
            if not this.job_title: 
                    job_title = None
            else:
                job_title = this.job_title
            if not this.created_by: 
                    created_by = None
            else:
                created_by = this.created_by.id   
                    
            #job_req_id = this.job_req_id.id
            #department = this.department.id
            number_openings = this.number_openings.id
            #job_title = this.job_title.id
            #created_by = this.created_by.id
            add_replace = this.add_replace.id
            date_created = this.date_created.id
            query=""
            dynamic_query=""
           # logging.info(job_req_id)
            query=""" select requisition_number,dept.name,no_of_openings,internal_title,partner.name,add_or_replace,to_char(date(hj.create_date), 'mm/dd/yyyy')
                            from hr_recruitment_job hj join res_users usr on hj.hiring_manager = usr.id
                            join res_partner partner on usr.partner_id = partner.id
                            left join hr_department dept on dept.id = hj.department 
                            where '1' = '1' """ 
            if job_req_id :
                dynamic_query += ' and hj.id = '+ str(job_req_id) 
            if department :
                dynamic_query += ' and dept.id ='+ str(department)                     
            if job_title :
                dynamic_query += ' and hj.internal_title ='+" '" + str(job_title) +"' "
            if created_by :
                dynamic_query += ' and usr.id ='+ str(created_by)      
            
            
            query += dynamic_query    
            cr.execute(query,())     
            result=cr.fetchall()  
            
            
            wbk = xlwt.Workbook()
            Style = ExcelStyles()
            sheet1 = wbk.add_sheet("New Requisition Report")
            sheet1.show_grid = False 
            sheet1.col(0).width = 2000
            sheet1.col(1).width = 5000
            sheet1.col(2).width = 7000
            sheet1.col(3).width = 5000
            sheet1.col(4).width = 10000
            sheet1.col(5).width = 5000
            sheet1.col(6).width = 3000
            sheet1.col(7).width = 5000  
                       
            s1 = 0
            s3 = 1
            s4 = 2
            s5 = 3         
            
            sheet1.row(s1).height = 500
            sheet1.row(s4).height = 400
            """ WRITING FIELD HEADINGS """
              
                
            # Excel Heading 
            sheet1.write(s1, 0, "New Requisition Report", Style.title())
            sheet1.merge(s1, s1, 0, 4, Style.title())
                
            sheet1.write(s1, 5, "Date", Style.subTitle())
            sheet1.write_merge(s1, s1, 6, 7, time.strftime('%m/%d/%Y'), Style.subTitle())
    
            # Cloumn Names
            sheet1.write(s4, 0, "S.No", Style.subTitle())
            sheet1.write(s4, 1, "Job Requisition", Style.subTitle())
            sheet1.write(s4, 2, "Department", Style.subTitle())
            sheet1.write(s4, 3, "Number of Openings", Style.subTitle())
            sheet1.write(s4, 4, "Job Title", Style.subTitle())
            sheet1.write(s4, 5, "Hiring Manager", Style.subTitle())
            sheet1.write(s4, 6, "Add or Replace", Style.subTitle())
            sheet1.write(s4, 7, "Date Created", Style.subTitle())                      
                                  
            # Writing data
            serial_no = 1         
            for data in result:
            # creating group
             logging.info('result')
             # writing data   
             sheet1.row(s5).height = 300          
             sheet1.write(s5, 0, serial_no,  Style.contentText(s5))
             sheet1.write(s5, 1, data[0], Style.contentText(s5))
             sheet1.write(s5, 2, data[1], Style.contentText(s5))
             sheet1.write(s5, 3, data[2], Style.contentNumber(s5))
             sheet1.write(s5, 4, data[3], Style.contentText(s5))
             sheet1.write(s5, 5, data[4], Style.contentText(s5))
             sheet1.write(s5, 6, data[5].capitalize(), Style.contentText(s5))
             sheet1.write(s5, 7, data[6], Style.contentMoney(s5))
                     
             serial_no += 1
             s5 += 1
             
            file_data = cStringIO.StringIO()
            o = wbk.save(file_data)
            advice = ('Save this document to a .xls file.')
            out = base64.encodestring(file_data.getvalue())
            self.write(cr, uid, ids, {'data':out, 'advice':advice, 'name':this.name}, context=context)
            return { 'type': 'ir.actions.act_url', 'url': '/hr_recruitment_htc/requisistion_report_xls?id=' + str(ids[0]) + '&db=' + str(cr.dbname) + '&uid=' + str(uid), 'nodestroy': True, 'target': 'new'}
            
#############################################################3 new_requisition_report_view.xml ##################################
<?xml version="1.0" ?>
<openerp>
	<data>	
		
		<record model="ir.ui.view" id="new_requisistion_report_view">
			<field name="name">New Requisition Report</field>
			<field name="model">new.requisistion.report</field>
			<field name="arch" type="xml">
				<form string="New Requisition Report">
					<header>
						<button icon="gtk-print" name="export_new_requisistion"
							string="Print Report" type="object" colspan="2" default_focus="2" />
						OR
						<button string="Cancel" class="oe_link" special="cancel" />
					</header>
					<group>
						<group col = "4" colspan = "2">
							<field name="created_by" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>
							<field name="job_title"/>							
							<field name="department" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>
							<field name="job_req_id" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>							
						</group>
					</group>
				</form>
			</field>
		</record>

		<record id="new_requisistion_report_Action" model="ir.actions.act_window">
			<field name="name">New Requisition Report</field>
			<field name="res_model">new.requisistion.report</field>
			<field name="view_type">form</field>
			<field name="view_mode">form</field>
			<field name="target">new</field>
		</record>
		
		<menuitem id="menu_new_requisistion_report" name="New Requisition Report" parent="recruitment_reports_menu"
		action="new_requisistion_report_Action" sequence="10" />
	</data>
</openerp>

################################## open_posions_report.py ####################################################3

import base64
import cStringIO
from datetime import datetime
import logging
import time
import locale
from openerp.osv import osv, fields
import xlwt
from excel_styles import ExcelStyles
from openerp import models, fields, api, osv, tools



POSITIONS_FILLED=[
          ('All','All'),
          ('Partially Filled','Partially Filled'),
          ('Completely Filled','Completely Filled')
          ]

class open_positions_report(models.TransientModel):
    _name = "open.positions.report"
    _description ="OpenPositions"

    job_req_id          = fields.Many2one('hr.recruitment.job','Job Requisition')
    department          = fields.Many2one('hr.department','Department')
    number_openings     = fields.Many2one('hr.recruitment.job','Number of Openings')
    job_title           = fields.Char(string = 'Job Title')
    add_replace         = fields.Many2one('hr.recruitment.job','Add or Replace')
    openings_filled     = fields.Selection(POSITIONS_FILLED,'Openings Filled')
    offer_min           = fields.Many2one('hr.recruitment.job','Offer Min')
    offer_max           = fields.Many2one('hr.recruitment.job','Offer Max')
    replacement_for     = fields.Many2one('hr.recruitment.job','Replacement For')
    employment_category = fields.Many2one('hr.adm.emp.category','Employment Category')
    geographic_location = fields.Many2one('hr.adm.geo.location','Geographic Location')
    data                = fields.Binary(string = 'File',readonly = True)
    name                = fields.Char(string ='Filename',readonly = True, default = 'open_positions_report.xls')
    advice              = fields.Text(string ='Advice',readonly = True)
    
    def export_open_positions(self, cr, uid, ids, context=None):

            this = self.browse(cr, uid, ids)[0]
 
            if not this.job_req_id: 
                 job_req_id = None
            else:
                job_req_id = this.job_req_id.id
                
            if not this.job_title: 
                job_title = None
            else:
                job_title = this.job_title
                
            if not this.department: 
                    department = None
            else:
                department = this.department.id
                
            if not this.employment_category: 
                    employment_category = None
            else:
                employment_category = this.employment_category.id
                
            if not this.geographic_location: 
                    geographic_location = None
            else:
                geographic_location = this.geographic_location.id
                
            if not this.openings_filled: 
                    openings_filled = None
            else:
                openings_filled = this.openings_filled
                
            
            number_openings = this.number_openings.id
            add_replace = this.add_replace.id            
            offer_min    = this.offer_min.id
            offer_max    = this.offer_max.id
            replacement_for = this.replacement_for.id
            query=""
            dynamic_query=""
           # logging.info(job_req_id)
            query=""" select requisition_number,internal_title,dept.name,no_of_openings,no_of_positions_filled,offer_min,offer_max,add_or_replace,replacement_for,catg.name,geo.name
                            from hr_recruitment_job hj left join hr_department dept on dept.id = hj.department join hr_adm_emp_category catg on catg.id = hj.employment_category
                            left join hr_adm_geo_location geo on geo.id = hj.geographic_location 
                            where '1' = '1' """ 
            if job_req_id :
                dynamic_query += ' and  hj.id = '+ str(job_req_id) 
                
            if department :
                dynamic_query += ' and dept.id ='+ str(department)  
                                   
            if job_title :
                dynamic_query += ' and hj.internal_title ='+" '" + str(job_title) +"' "
                
            if employment_category :
                dynamic_query += ' and catg.id ='+ str(employment_category)
                
            if geographic_location :
                dynamic_query += ' and geo.id ='+ str(geographic_location)
                
            if openings_filled == "Completely Filled":
                dynamic_query += ' and hj.no_of_positions_filled = hj.no_of_openings '
            elif openings_filled == "Partially Filled":
                dynamic_query += ' and hj.no_of_positions_filled < hj.no_of_openings' 
                
                
            query += dynamic_query    
            cr.execute(query,())     
            result=cr.fetchall()  
            
            
            wbk = xlwt.Workbook()
            Style = ExcelStyles()       
            sheet1 = wbk.add_sheet("Open Positions Report")
            sheet1.show_grid = False 
            sheet1.col(0).width = 2000
            sheet1.col(1).width = 5000
            sheet1.col(2).width = 7000
            sheet1.col(3).width = 7000
            sheet1.col(4).width = 4000
            sheet1.col(5).width = 5000
            sheet1.col(6).width = 3000
            sheet1.col(7).width = 3000
            sheet1.col(8).width = 4000
            sheet1.col(9).width = 4000
            sheet1.col(10).width = 6000
            sheet1.col(11).width = 5000
                        
            s1 = 0
            s3 = 1
            s4 = 2
            s5 = 3         
            
            sheet1.row(s1).height = 500
            sheet1.row(s4).height = 400
            """ WRITING FIELD HEADINGS """
              
                
            # Excel Heading 
            sheet1.write(s1, 0, "Open Positions Report", Style.title())
            sheet1.merge(s1, s1, 0, 8, Style.title())
                
            sheet1.write(s1, 9, "Date", Style.subTitle())
            sheet1.write_merge(s1, s1, 10, 11, time.strftime('%m/%d/%Y'), Style.subTitle())
    
            # Cloumn Names
            sheet1.write(s4, 0, "S.No", Style.subTitle())
            sheet1.write(s4, 1, "Job Requisition", Style.subTitle())
            sheet1.write(s4, 2, "Job Title", Style.subTitle())
            sheet1.write(s4, 3, "Department", Style.subTitle())
            sheet1.write(s4, 4, "Number of Openings", Style.subTitle())
            sheet1.write(s4, 5, "Openings Filled", Style.subTitle())
            sheet1.write(s4, 6, "Offer Min", Style.subTitle())
            sheet1.write(s4, 7, "Offer Max", Style.subTitle())
            sheet1.write(s4, 8, "Add or Replace", Style.subTitle())
            sheet1.write(s4, 9, "Replacement For", Style.subTitle())
            sheet1.write(s4, 10, "Employment Category", Style.subTitle())
            sheet1.write(s4, 11, "Geographic Location", Style.subTitle())
                                                      
            # Writing data
            serial_no = 1         
            for data in result:
            # creating group
             logging.info('result')
             # writing data   
             sheet1.row(s5).height = 300          
             sheet1.write(s5, 0, serial_no,  Style.contentText(s5))
             sheet1.write(s5, 1, data[0], Style.contentText(s5))
             sheet1.write(s5, 2, data[1], Style.contentText(s5))
             sheet1.write(s5, 3, data[2], Style.contentText(s5))
             sheet1.write(s5, 4, data[3], Style.contentNumber(s5))
             sheet1.write(s5, 5, data[4], Style.contentNumber(s5))
             sheet1.write(s5, 6, data[5], Style.contentMoney(s5))
             sheet1.write(s5, 7, data[6], Style.contentMoney(s5))
             sheet1.write(s5, 8, data[7], Style.contentText(s5))
             sheet1.write(s5, 9, data[8], Style.contentText(s5))
             sheet1.write(s5, 10, data[9], Style.contentText(s5))
             sheet1.write(s5, 11, data[10], Style.contentText(s5))
                     
             serial_no += 1
             s5 += 1
             
            file_data = cStringIO.StringIO()
            o = wbk.save(file_data)
            advice = ('Save this document to a .xls file.')
            out = base64.encodestring(file_data.getvalue())
            self.write(cr, uid, ids, {'data':out, 'advice':advice, 'name':this.name}, context=context)
            return { 'type': 'ir.actions.act_url', 'url': '/hr_recruitment_htc/open_positions_report_xls?id=' + str(ids[0]) + '&db=' + str(cr.dbname) + '&uid=' + str(uid), 'nodestroy': True, 'target': 'new'}    

####################################3 open_positions_report_view.xml ##########################################

<?xml version="1.0" ?>
<openerp>
	<data>		
		<record model="ir.ui.view" id="open_positions_report_view">
			<field name="name">Open Positions Report</field>
			<field name="model">open.positions.report</field>
			<field name="arch" type="xml">
				<form string="Open Positions Report">
					<header>
						<button icon="gtk-print" name="export_open_positions"
							string="Print Report" type="object" colspan="2" default_focus="2" />
						OR
						<button string="Cancel" class="oe_link" special="cancel" />
					</header>
					<group>
						<group col = "4" colspan = "2">
							<field name="job_title"/>							
							<field name="department" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>
							<field name="job_req_id" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>
							<field name="employment_category" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>
							<field name="geographic_location" options="{ 'create': false, 'create_edit': false}" widget='many2one_tags'/>							
							<field name="openings_filled"/>
														
						</group>
					</group>
				</form>
			</field>
		</record>

		<record id="open_positions_report_Action" model="ir.actions.act_window">
			<field name="name">Open Positions Report</field>
			<field name="res_model">open.positions.report</field>
			<field name="view_type">form</field>
			<field name="view_mode">form</field>
			<field name="target">new</field>
		</record>
		
		<menuitem id="menu_open_positions_report" name="Open Positions Report" parent="recruitment_reports_menu"
		action="open_positions_report_Action" sequence="20" />
	</data>
</openerp>

###########################33################## static/src/ ###################3####################
######################################### css  ###################################################

####################################### customized_homepage.css ###########################################
@charset "UTF-8";

.openerp .custom-title {
  padding: 0;
  margin: 0;
  font-family: "Lucida Grande", Helvetica, Verdana, Arial, sans-serif;
  color: #4c4c4c;
  font-size: 20px;
  background: #4c4c4c;
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.5);
  background-color:#f0f0fa;
  z-index: 1800;
} 

.openerp .underline_class { 
	padding-left:25px;
	text-decoration: underline;
} 


.openerp .job_posting {
	text-align:center;
}
.stage_count{
	
	color:white;
	background-color:black;
	font-weight:bold;
	text-align:center !important;
	padding:10px !important;
	height:48px;
	cursor: pointer; 
	cursor: hand;
}
.job_details{
	padding:3px !important;
}
.view_job_details{
	text-decoration:underline;
	color:#1995dc;
	cursor: pointer; 
	cursor: hand;
	padding-left:10px !important;
}
.left_contain{
	float:right !important;
}
.tbody{
  overflow-y: scroll !important;
  height: 200px !important;
  width: 100% !important;
  position: absolute !important;
}
#stages{
		overflow-y: hidden;
}
.job_title{
	margin-left:12px !important;
}
.view_candidate_profile{
	cursor: pointer; 
	cursor: hand;
}
.candidate_pipeline{
	cursor: pointer; 
	cursor: hand;
}
#############################################################3  jquery.contextMenu.css ############################

/*!
 * jQuery contextMenu - Plugin for simple contextMenu handling
 *
 * Version: 1.6.6
 *
 * Authors: Rodney Rehm, Addy Osmani (patches for FF)
 * Web: http://medialize.github.com/jQuery-contextMenu/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

.context-menu-list {
    margin:0; 
    padding:0;
    
    min-width: 120px;
    max-width: 250px;
    display: inline-block;
    position: absolute;
    list-style-type: none;
    
    border: 1px solid #f5f5f5;
   /*  background: #EEE; */
   background:#f5f5f5;
    
    -webkit-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
       -moz-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
        -ms-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
         -o-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
    
    font-family: Verdana, Arial, Helvetica, sans-serif;
    font-size: 11px;
    font-weight:bold;
    color: #1c4d5f;
}

.context-menu-item {
    padding: 6px 6px 6px 32px;
    background-color: #f5f5f5;
    position: relative;
    -webkit-user-select: none;
       -moz-user-select: -moz-none;
        -ms-user-select: none;
            user-select: none;
}

.context-menu-separator {
    padding-bottom:0;
    border-bottom: 1px solid #f5f5f5;
}

.context-menu-item > label > input,
.context-menu-item > label > textarea {
    -webkit-user-select: text;
       -moz-user-select: text;
        -ms-user-select: text;
            user-select: text;
}

.context-menu-item.hover {
    cursor: pointer;
    background-color: #92A0AD;
}

.context-menu-item.disabled {
    color: #666;
}

.context-menu-input.hover,
.context-menu-item.disabled.hover {
    cursor: default;
    background-color: #EEE;
}

.context-menu-submenu:after {
    content: ">";
    color: #666;
    position: absolute;
    top: 0;
    right: 3px;
    z-index: 1;
}

/* icons
    #protip:
    In case you want to use sprites for icons (which I would suggest you do) have a look at
    http://css-tricks.com/13224-pseudo-spriting/ to get an idea of how to implement 
    .context-menu-item.icon:before {}
 */
.context-menu-item.icon { min-height: 18px; background-repeat: no-repeat; background-position: 6px 6px; }
.context-menu-item.icon-edit { background-image: url(images/page_white_edit.png); }
.context-menu-item.icon-cut { background-image: url(images/cut.png); }
.context-menu-item.icon-copy { background-image: url(images/page_white_copy.png); }
.context-menu-item.icon-paste { background-image: url(images/page_white_paste.png); }
.context-menu-item.icon-delete { background-image: url(images/page_white_delete.png); }
.context-menu-item.icon-add { background-image: url(images/add.png); }
.context-menu-item.icon-quit { background-image: url(images/door.png); }

/* vertically align inside labels */
.context-menu-input > label > * { vertical-align: top; }

/* position checkboxes and radios as icons */
.context-menu-input > label > input[type="checkbox"],
.context-menu-input > label > input[type="radio"] {
    margin-left: -17px;
}
.context-menu-input > label > span {
    margin-left: 5px;
}

.context-menu-input > label,
.context-menu-input > label > input[type="text"],
.context-menu-input > label > textarea,
.context-menu-input > label > select {
    display: block;
    width: 100%;
    
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
        -ms-box-sizing: border-box;
         -o-box-sizing: border-box;
            box-sizing: border-box;
}

.context-menu-input > label > textarea {
    height: 100px;
}
.context-menu-item > .context-menu-list {
    display: none;
    /* re-positioned by js */
    right: -5px;
    top: 5px;
}

.context-menu-item.hover > .context-menu-list {
    display: block;
}

.context-menu-accesskey {
    text-decoration: underline;
}

##################################################  js #########################################################
################################################### home_page.js #################################################

// static/src/js/first_module.js
openerp.hr_recruitment_htc = function(instance, local) {
	var _t = instance.web._t, _lt = instance.web._lt;
	var QWeb = instance.web.qweb;

	local.posting_type="";
	local.posting_ids = "";
	local.job_id="";
	local.stage_id=""
	local.pipeline_id=""
	
	local.HomePage = instance.Widget.extend({
		events: {
            'click .todo_action': 'route_to_models',
            'change .status': 'query_change',
            'click .candidate_pipeline': 'candidate_pipeline',
            'click .stage_count':'candidates_list',
            'click .view_candidate_profile':'view_candidate_profile',
            'click .view_job_details':'view_job_details',
            'click .setup_interview':'setup_interview'
        },
		start : function() {
			var self = this;
			var result = [];
			
			var model = new instance.web.Model('hr.job.requisitions');
			model.call("get_job_requisitions_list", {
				context : new instance.web.CompoundContext()
			}).then(function(result) {
				console.log("Module loaded",result);
				self.$el.append(QWeb.render('HomePageTemplate', {data: result}));
//				
			});
		},	
		setup_interview: function (event) {
	    	var self = this;
	    	local.pipeline_id=$(event.currentTarget).data('pipeline_id');
			var model = new instance.web.Model('hr.candidate.pipeline');
			model.call("setup_interview", {
				context :new instance.web.CompoundContext({'pipeline_id':local.pipeline_id})
			});
	    },
		
		candidate_pipeline: function (event) {
	    	var self = this;
	    	local.job_id=$(event.currentTarget).data('job_id');
	    	
			var model = new instance.web.Model('hr.candidate.pipeline');
			model.call("get_candidate_pipeline_details", {
				context :new instance.web.CompoundContext({'job_id': local.job_id,'stage_id':false})
			}).then(function(result) {
				self.$el.empty();
				self.$el.append(QWeb.render('candidate_pipeline', {job_detail:result[0],candidates:result[1],candidate_stages:result[2]}));
 			});
	    },
	    
	    candidates_list: function (event) {
	    	var self = this;
	    	local.stage_id=$(event.currentTarget).data('stage_id');
			var model = new instance.web.Model('hr.candidate.pipeline');
			model.call("get_candidate_pipeline_details", {
				context :new instance.web.CompoundContext({'stage_id': local.stage_id,'job_id':local.job_id})
			}).then(function(result) {
				self.$el.empty();
				self.$el.append(QWeb.render('candidate_pipeline', {job_detail:result[0],candidates:result[1],candidate_stages:result[2]}));
 			});
	    },
	    
	    view_candidate_profile: function (event) {
			   
            this.do_action({
                type: 'ir.actions.act_window',
                res_model: 'hr.recruitment.candidate',
                res_id:$(event.currentTarget).data('candidate_id'),
                views: [[false, 'form']],
                target: 'new',
               
            });
        },
        
        view_job_details: function (event) {
			   
            this.do_action({
                type: 'ir.actions.act_window',
                res_model: 'hr.recruitment.job',
                res_id:$(event.currentTarget).data('job_detail_id'),
                views: [[false, 'form']],
                target: 'new',
               
            });
        },
        
		route_to_models: function (event) {
			   
	            this.do_action({
	                type: 'ir.actions.act_window',
	                res_model: 'hr.recruitment.job',
	                res_id:$(event.currentTarget).data('id'),
	                views: [[false, 'form']],
	               
	            });
	        },
	    query_change: function (event) {
	    	var self = this;
	    	var selected_value=this.$(".status").val();
			var model = new instance.web.Model('hr.job.requisitions');
			model.call("get_job_requisitions_list", {
				context :new instance.web.CompoundContext({'status_id': selected_value})
			}).then(function(result) {
				 $(".workspace_container").html(" ");
				console.log("Module loaded",result);
				self.$el.append(QWeb.render('HomePageTemplate', {data: result}));
//				
			});
	        },	
//		
	});
	instance.web.client_actions.add('home_page', 'instance.hr_recruitment_htc.HomePage');	
	
	local.JobPosting = instance.Widget.extend({
		events: {
            'click .todo_action': 'route_to_models',
            'change .status': 'job_type_change',
            'click .todo_post_job': 'route_to_post_job',
        },
		start : function() {
			var self = this;
			var result = [];
			var model = new instance.web.Model('hr.job.postings');
			model.call("get_job_postings_list", {
				context : new instance.web.CompoundContext()
			}).then(function(result) {
				console.log("Module loaded",result);
				self.$el.empty();
				self.$el.append(QWeb.render('JobPostingTemplate', {data: result,'job_type':'not_posted'}));
				
			});
		},
		
		route_to_models: function (event) {
        	var model_id=$(event.currentTarget).data();
            this.do_action({
                type: 'ir.actions.act_window',
                res_model: 'hr.recruitment.job',
                res_id:$(event.currentTarget).data('id'),
                views: [[false, 'form']],              
            });
        },
	    
	    job_type_change: function (event) {
	    	var self = this;
	    	var selected_value=this.$(".status").val();
			var model = new instance.web.Model('hr.job.postings');
			model.call("get_job_postings_list", {
				context :new instance.web.CompoundContext({'status_id': selected_value})
			}).then(function(result) {
				self.$el.empty();
				console.log("Module loaded",result);
				self.$el.append(QWeb.render('JobPostingTemplate', {data: result,'job_type':selected_value}));
 			});
	    },
	     
	    route_to_post_job: function (event) {
	    	var job_request_ids = [];
	    	var ids = $("#selectedrows").val().substring(1, $("#selectedrows").val().length + 1);
			if(ids.length == 0)
			{
			  jAlert("Please select a Job requisition","CareTech");
			  return;
			}

	    	job_request_ids = ids.split(',');
			local.posting_type = $(event.currentTarget).attr('id');
			local.posting_ids = job_request_ids;
	        this.do_action({
                type: 'ir.actions.client',
                tag: "job_posting_popup",
                name:'Job Posting',
				target: 'new',
                context: {
                    'posting_status': $(event.currentTarget).attr('id'),
                    'job_request_ids': job_request_ids,
                },
            });
        },    
 
	});
	instance.web.client_actions.add('job_posting', 'instance.hr_recruitment_htc.JobPosting');
	
	// Popup for Job Posting
	
	local.JobPostingPopup = instance.Widget.extend({
    	events: {
            'click .postinternal': 'postinternal',
            'click .postexternal': 'postexternal',
        },
		start: function() {
			var self = this;
			self.$el.empty();
			result = {'posting_type': local.posting_type, 'posting_ids': local.posting_ids};
			local.posting_ids="";
			local.posting_type="";
			self.$el.append(QWeb.render('JobPostingPopupTemplate', {data: result}));
   	    },
		
		postinternal: function (event) {
			 var self = this;
        	 var ids = $("#selectedrows").val();
			 var start_date = $("#start_date_internal").val();
			 var end_date = $("#end_date_internal").val();
			 if(isNull(start_date)){
				 jAlert("Please select the start date","CareTech");
				 return;
			 }else if (!isValidDate(start_date)){
				 jAlert("Please select a valid start date","CareTech");
				 return; 
			 }
			 if(isNull(end_date)){
				 jAlert("Please select the end date","CareTech");
				 return;
			 }else if (!isValidDate(end_date)){
				 jAlert("Please select a valid end date","CareTech");
				 return; 
			 }
			 if (compareDates(start_date,end_date) > 0){
				 jAlert("End Date must be greater than Start Date","CareTech");
				 return; 
			 }
			 if (ids.substring(0, 1) == ',') { 
					ids = ids.substring(1);
			 }
			 job_request_ids = ids.split(',');
			 var model = new instance.web.Model('hr.job.postings');
			model.call("post_job", {
				context :new instance.web.CompoundContext({'job_request_ids': job_request_ids, 'posting_status' : 'internal', 'start_date' : start_date , 'end_date': end_date})
			}).then(function(result) {
				$("input[type=button]").attr('disabled','disabled');
				jAlert("Job Posted Successfully","CareTech");
				//self.$el.empty();
				console.log("Module loaded",result);
				//self.$el.append(QWeb.render('JobPostingTemplate', {data: result}));
 			});
        },
		
		postexternal: function (event) {
			var self = this;
			var ids = $("#selectedrows").val();
			var start_date = $("#start_date_external").val();
			var end_date = $("#end_date_external").val();
			if(isNull(start_date)){
				 jAlert("Please select the start date","CareTech");
				 return;
			}else if (!isValidDate(start_date)){
				 jAlert("Please select a valid start date","CareTech");
				 return; 
			}
			if(isNull(end_date)){
				jAlert("Please select the end date","CareTech");
				return;
			}else if (!isValidDate(end_date)){
				jAlert("Please select a valid end date","CareTech");
				return; 
			}
			if (compareDates(start_date,end_date) > 0){
				jAlert("End Date must be greater than Start Date","CareTech");
				return; 
			}
			if (ids.substring(0, 1) == ',') { 
				ids = ids.substring(1);
			}
			job_request_ids = ids.split(',');
			var model = new instance.web.Model('hr.job.postings');
			model.call("post_job", {
				context :new instance.web.CompoundContext({'job_request_ids': job_request_ids, 'posting_status' : 'external', 'start_date' : start_date , 'end_date': end_date})
			}).then(function(result) {
				$("input[type=button]").attr('disabled','disabled');
				jAlert("Job Posted Successfully","CareTech");
				//self.$el.empty();
				console.log("Module loaded",result);
				//self.$el.append(QWeb.render('JobPostingTemplate', {data: result}));
			});
        },
	});
	instance.web.client_actions.add('job_posting_popup', 'instance.hr_recruitment_htc.JobPostingPopup');
	
	
	local.InterviewFeedback = instance.Widget.extend({
		events: {
			'click .todo_action': 'route_to_models',
			'click .candidate_interview_feedback': 'candidate_interview_feedback',
			'click .interview_notes_btn': 'load_interview_notes',
			'click .competency_comments': 'load_competency_comments',
			'click .thumbs_up_plain': 'thumbs_up_plain_click',
			'click .thumbs_down_plain': 'thumbs_down_plain_click',
			'click .thumbs_up': 'thumbs_up_click',
			'click .thumbs_down': 'thumbs_down_click',
        },
		start : function() {
			var self = this;
			var result = [];
			
			var model = new instance.web.Model('hr.candidate.interview');
			model.call("get_job_requisitions_list", {
				context : new instance.web.CompoundContext()
			}).then(function(result) {
				self.$el.append(QWeb.render('InterviewFeedbackTemplate', {data: result}));
			});
		},
		route_to_models: function (event) {
			   
            this.do_action({
                type: 'ir.actions.act_window',
                res_model: 'hr.recruitment.job',
                res_id:$(event.currentTarget).data('id'),
                views: [[false, 'form']],
               
            });
        },
        load_competency_comments: function (event) {
			   
            this.do_action({
                type: 'ir.actions.act_window',
                name: 'Competency Rating',
                res_model: 'hr.candidate.competency.rating',
                res_id:$(event.currentTarget).data('id'),
                views: [[false, 'form']],
                target: 'new',
                context :new instance.web.CompoundContext({'default_competency_id':$(event.currentTarget).data('competency_id')})
            });
        },
        load_interview_notes: function (event) {
            this.do_action({
                type: 'ir.actions.act_window',
                name: 'Interview Comments',
                res_model: 'hr.candidate.interview.feedback',
                res_id:$(event.currentTarget).data('id'),
                views: [[false, 'form']],
                target: 'new',
            });
        },
        candidate_interview_feedback: function (event) {
	    	var self = this;
	    	local.job_id=$(event.currentTarget).data('job_id');
	    	
			var model = new instance.web.Model('hr.candidate.interview');
			model.call("get_candidate_details", {
				context :new instance.web.CompoundContext({'job_id': local.job_id,'stage_id':false})
			}).then(function(result) {
				self.$el.empty();
				self.$el.append(QWeb.render('candidate_interview_feedback', {candidates:result[0],competencies:result[1]}));
 			});
	    },
	    thumbs_up_plain_click: function (event) {
	    	document.getElementById('thumbs_up_plain').style.display = 'none';
	    	document.getElementById('thumbs_up').style.display = '';
	    	document.getElementById('thumbs_down_plain').style.display = '';
	    	document.getElementById('thumbs_down').style.display = 'none';
	    },
	    thumbs_down_plain_click: function (event) {
	    	document.getElementById('thumbs_up_plain').style.display = '';
	    	document.getElementById('thumbs_up').style.display = 'none';
	    	document.getElementById('thumbs_down_plain').style.display = 'none';
	    	document.getElementById('thumbs_down').style.display = '';
	    },
	    thumbs_up_click: function (event) {
	    	document.getElementById('thumbs_up_plain').style.display = '';
	    	document.getElementById('thumbs_up').style.display = 'none';
	    	document.getElementById('thumbs_down_plain').style.display = '';
	    	document.getElementById('thumbs_down').style.display = 'none';
	    },
	    thumbs_down_click: function (event) {
	    	document.getElementById('thumbs_up_plain').style.display = '';
	    	document.getElementById('thumbs_up').style.display = 'none';
	    	document.getElementById('thumbs_down_plain').style.display = '';
	    	document.getElementById('thumbs_down').style.display = 'none';
	    },
		
	});
	instance.web.client_actions.add('interview_feedback', 'instance.hr_recruitment_htc.InterviewFeedback');	
	
}

##########################################################################  job_posting.js ########################################

var jq = jQuery.noConflict();
jq(document).ready(function() {
	jq('#job_posting').dataTable({
		"aoColumnDefs" : [ {
			'bSortable' : false,
			'aTargets' : [ 0 ]
		} ],
		"order" : [ [ 1, "asc" ] ]
	});
});

$('.datatablecheckbox').on('click', function() {
	var selectedId = "";
	if ($(this).is(":checked")) {
		selectedId = $('#selectedrows').val() + "," + $(this).attr('id');
	} else {
		list = $('#selectedrows').val();
		list = list.replace(new RegExp($(this).attr('id') + ',?'), '');
		selectedId = list;
	}
	$('#selectedrows').val(selectedId);
	$('#job_posting').find('tr#' + $(this).attr('id')).toggleClass('selected');
});

var job_type = document.getElementById('job_type').value;
document.getElementById('job_type_filter').value = job_type;

if (job_type == 'internal') {
	document.getElementById('internal_span').style.display = 'none';
	document.getElementById('external_span').style.display = '';
	document.getElementById('int_ext_span').style.display = 'none';
} else if (job_type == 'external') {
	document.getElementById('internal_span').style.display = '';
	document.getElementById('external_span').style.display = 'none';
	document.getElementById('int_ext_span').style.display = 'none';
} else if (job_type == 'internal_external') {
	document.getElementById('internal_span').style.display = 'none';
	document.getElementById('external_span').style.display = 'none';
	document.getElementById('int_ext_span').style.display = 'none';
} else if (job_type == 'not_posted') {
	document.getElementById('internal_span').style.display = '';
	document.getElementById('external_span').style.display = '';
	document.getElementById('int_ext_span').style.display = '';
}

##############################################################  jquery.contextMenu.js ###################################################3
/*!
 * jQuery contextMenu - Plugin for simple contextMenu handling
 *
 * Version: 1.6.5
 *
 * Authors: Rodney Rehm, Addy Osmani (patches for FF)
 * Web: http://medialize.github.com/jQuery-contextMenu/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function(jql, undefined){
    
    // TODO: -
        // ARIA stuff: menuitem, menuitemcheckbox und menuitemradio
        // create <menu> structure if jql.support[htmlCommand || htmlMenuitem] and !opt.disableNative

// determine html5 compatibility
jql.support.htmlMenuitem = ('HTMLMenuItemElement' in window);
jql.support.htmlCommand = ('HTMLCommandElement' in window);
jql.support.eventSelectstart = ("onselectstart" in document.documentElement);
/* // should the need arise, test for css user-select
jql.support.cssUserSelect = (function(){
    var t = false,
        e = document.createElement('div');
    
    jql.each('Moz|Webkit|Khtml|O|ms|Icab|'.split('|'), function(i, prefix) {
        var propCC = prefix + (prefix ? 'U' : 'u') + 'serSelect',
            prop = (prefix ? ('-' + prefix.toLowerCase() + '-') : '') + 'user-select';
            
        e.style.cssText = prop + ': text;';
        if (e.style[propCC] == 'text') {
            t = true;
            return false;
        }
        
        return true;
    });
    
    return t;
})();
*/

if (!jql.ui || !jql.ui.widget) {
    // duck punch jql.cleanData like jQueryUI does to get that remove event
    // https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.widget.js#L16-24
    var _cleanData = jql.cleanData;
    jql.cleanData = function( elems ) {
        for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
            try {
                jql( elem ).triggerHandler( "remove" );
                // http://bugs.jquery.com/ticket/8235
            } catch( e ) {}
        }
        _cleanData( elems );
    };
}

var // currently active contextMenu trigger
    jqlcurrentTrigger = null,
    // is contextMenu initialized with at least one menu?
    initialized = false,
    // window handle
    jqlwin = jql(window),
    // number of registered menus
    counter = 0,
    // mapping selector to namespace
    namespaces = {},
    // mapping namespace to options
    menus = {},
    // custom command type handlers
    types = {},
    // default values
    defaults = {
        // selector of contextMenu trigger
        selector: null,
        // where to append the menu to
        appendTo: null,
        // method to trigger context menu ["right", "left", "hover"]
        trigger: "right",
        // hide menu when mouse leaves trigger / menu elements
        autoHide: false,
        // ms to wait before showing a hover-triggered context menu
        delay: 200,
        // flag denoting if a second trigger should simply move (true) or rebuild (false) an open menu
        // as long as the trigger happened on one of the trigger-element's child nodes
        reposition: true,
        // determine position to show menu at
        determinePosition: function(jqlmenu) {
            // position to the lower middle of the trigger element
            if (jql.ui && jql.ui.position) {
                // .position() is provided as a jQuery UI utility
                // (...and it won't work on hidden elements)
                jqlmenu.css('display', 'block').position({
                    my: "center top",
                    at: "center bottom",
                    of: this,
                    offset: "0 5",
                    collision: "fit"
                }).css('display', 'none');
            } else {
                // determine contextMenu position
                var offset = this.offset();
                offset.top += this.outerHeight();
                offset.left += this.outerWidth() / 2 - jqlmenu.outerWidth() / 2;
                jqlmenu.css(offset);
            }
        },
        // position menu
        position: function(opt, x, y) {
            var jqlthis = this,
                offset;
            // determine contextMenu position
            if (!x && !y) {
                opt.determinePosition.call(this, opt.jqlmenu);
                return;
            } else if (x === "maintain" && y === "maintain") {
                // x and y must not be changed (after re-show on command click)
                offset = opt.jqlmenu.position();
            } else {
                // x and y are given (by mouse event)
                offset = {top: y, left: x};
            }
            
            // correct offset if viewport demands it
            var bottom = jqlwin.scrollTop() + jqlwin.height(),
                right = jqlwin.scrollLeft() + jqlwin.width(),
                height = opt.jqlmenu.height(),
                width = opt.jqlmenu.width();
            
            if (offset.top + height > bottom) {
                offset.top -= height;
            }
            
            if (offset.left + width > right) {
                offset.left -= width;
            }
            
            opt.jqlmenu.css(offset);
        },
        // position the sub-menu
        positionSubmenu: function(jqlmenu) {
            if (jql.ui && jql.ui.position) {
                // .position() is provided as a jQuery UI utility
                // (...and it won't work on hidden elements)
                jqlmenu.css('display', 'block').position({
                    my: "left top",
                    at: "right top",
                    of: this,
                    collision: "flipfit fit"
                }).css('display', '');
            } else {
                // determine contextMenu position
                var offset = {
                    top: 0,
                    left: this.outerWidth()
                };
                jqlmenu.css(offset);
            }
        },
        // offset to add to zIndex
        zIndex: 1,
        // show hide animation settings
        animation: {
            duration: 50,
            show: 'slideDown',
            hide: 'slideUp'
        },
        // events
        events: {
            show: jql.noop,
            hide: jql.noop
        },
        // default callback
        callback: null,
        // list of contextMenu items
        items: {}
    },
    // mouse position for hover activation
    hoveract = {
        timer: null,
        pageX: null,
        pageY: null
    },
    // determine zIndex
    zindex = function(jqlt) {
        var zin = 0,
            jqltt = jqlt;

        while (true) {
            zin = Math.max(zin, parseInt(jqltt.css('z-index'), 10) || 0);
            jqltt = jqltt.parent();
            if (!jqltt || !jqltt.length || "html body".indexOf(jqltt.prop('nodeName').toLowerCase()) > -1 ) {
                break;
            }
        }
        
        return zin;
    },
    // event handlers
    handle = {
        // abort anything
        abortevent: function(e){
            e.preventDefault();
            e.stopImmediatePropagation();
        },
        
        // contextmenu show dispatcher
        contextmenu: function(e) {
            var jqlthis = jql(this);
            
            // disable actual context-menu
            e.preventDefault();
            e.stopImmediatePropagation();
            
            // abort native-triggered events unless we're triggering on right click
            if (e.data.trigger != 'right' && e.originalEvent) {
                return;
            }
            
            // abort event if menu is visible for this trigger
            if (jqlthis.hasClass('context-menu-active')) {
                return;
            }
            
            if (!jqlthis.hasClass('context-menu-disabled')) {
                // theoretically need to fire a show event at <menu>
                // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#context-menus
                // var evt = jQuery.Event("show", { data: data, pageX: e.pageX, pageY: e.pageY, relatedTarget: this });
                // e.data.jqlmenu.trigger(evt);
                
                jqlcurrentTrigger = jqlthis;
                if (e.data.build) {
                    var built = e.data.build(jqlcurrentTrigger, e);
                    // abort if build() returned false
                    if (built === false) {
                        return;
                    }
                    
                    // dynamically build menu on invocation
                    e.data = jql.extend(true, {}, defaults, e.data, built || {});

                    // abort if there are no items to display
                    if (!e.data.items || jql.isEmptyObject(e.data.items)) {
                        // Note: jQuery captures and ignores errors from event handlers
                        if (window.console) {
                            (console.error || console.log)("No items specified to show in contextMenu");
                        }
                        
                        throw new Error('No Items sepcified');
                    }
                    
                    // backreference for custom command type creation
                    e.data.jqltrigger = jqlcurrentTrigger;
                    
                    op.create(e.data);
                }
                // show menu
                op.show.call(jqlthis, e.data, e.pageX, e.pageY);
            }
        },
        // contextMenu left-click trigger
        click: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();
            jql(this).trigger(jql.Event("contextmenu", { data: e.data, pageX: e.pageX, pageY: e.pageY }));
        },
        // contextMenu right-click trigger
        mousedown: function(e) {
            // register mouse down
            var jqlthis = jql(this);
            
            // hide any previous menus
            if (jqlcurrentTrigger && jqlcurrentTrigger.length && !jqlcurrentTrigger.is(jqlthis)) {
                jqlcurrentTrigger.data('contextMenu').jqlmenu.trigger('contextmenu:hide');
            }
            
            // activate on right click
            if (e.button == 2) {
                jqlcurrentTrigger = jqlthis.data('contextMenuActive', true);
            }
        },
        // contextMenu right-click trigger
        mouseup: function(e) {
            // show menu
            var jqlthis = jql(this);
            if (jqlthis.data('contextMenuActive') && jqlcurrentTrigger && jqlcurrentTrigger.length && jqlcurrentTrigger.is(jqlthis) && !jqlthis.hasClass('context-menu-disabled')) {
                e.preventDefault();
                e.stopImmediatePropagation();
                jqlcurrentTrigger = jqlthis;
                jqlthis.trigger(jql.Event("contextmenu", { data: e.data, pageX: e.pageX, pageY: e.pageY }));
            }
            
            jqlthis.removeData('contextMenuActive');
        },
        // contextMenu hover trigger
        mouseenter: function(e) {
            var jqlthis = jql(this),
                jqlrelated = jql(e.relatedTarget),
                jqldocument = jql(document);
            
            // abort if we're coming from a menu
            if (jqlrelated.is('.context-menu-list') || jqlrelated.closest('.context-menu-list').length) {
                return;
            }
            
            // abort if a menu is shown
            if (jqlcurrentTrigger && jqlcurrentTrigger.length) {
                return;
            }
            
            hoveract.pageX = e.pageX;
            hoveract.pageY = e.pageY;
            hoveract.data = e.data;
            jqldocument.on('mousemove.contextMenuShow', handle.mousemove);
            hoveract.timer = setTimeout(function() {
                hoveract.timer = null;
                jqldocument.off('mousemove.contextMenuShow');
                jqlcurrentTrigger = jqlthis;
                jqlthis.trigger(jql.Event("contextmenu", { data: hoveract.data, pageX: hoveract.pageX, pageY: hoveract.pageY }));
            }, e.data.delay );
        },
        // contextMenu hover trigger
        mousemove: function(e) {
            hoveract.pageX = e.pageX;
            hoveract.pageY = e.pageY;
        },
        // contextMenu hover trigger
        mouseleave: function(e) {
            // abort if we're leaving for a menu
            var jqlrelated = jql(e.relatedTarget);
            if (jqlrelated.is('.context-menu-list') || jqlrelated.closest('.context-menu-list').length) {
                return;
            }
            
            try {
                clearTimeout(hoveract.timer);
            } catch(e) {}
            
            hoveract.timer = null;
        },
        
        // click on layer to hide contextMenu
        layerClick: function(e) {
            var jqlthis = jql(this),
                root = jqlthis.data('contextMenuRoot'),
                mouseup = false,
                button = e.button,
                x = e.pageX,
                y = e.pageY,
                target, 
                offset,
                selectors;
                
            e.preventDefault();
            e.stopImmediatePropagation();
            
            setTimeout(function() {
                var jqlwindow, hideshow, possibleTarget;
                var triggerAction = ((root.trigger == 'left' && button === 0) || (root.trigger == 'right' && button === 2));
                
                // find the element that would've been clicked, wasn't the layer in the way
                if (document.elementFromPoint) {
                    root.jqllayer.hide();
                    target = document.elementFromPoint(x - jqlwin.scrollLeft(), y - jqlwin.scrollTop());
                    root.jqllayer.show();
                }
                
                if (root.reposition && triggerAction) {
                    if (document.elementFromPoint) {
                        if (root.jqltrigger.is(target) || root.jqltrigger.has(target).length) {
                            root.position.call(root.jqltrigger, root, x, y);
                            return;
                        }
                    } else {
                        offset = root.jqltrigger.offset();
                        jqlwindow = jql(window);
                        // while this looks kinda awful, it's the best way to avoid
                        // unnecessarily calculating any positions
                        offset.top += jqlwindow.scrollTop();
                        if (offset.top <= e.pageY) {
                            offset.left += jqlwindow.scrollLeft();
                            if (offset.left <= e.pageX) {
                                offset.bottom = offset.top + root.jqltrigger.outerHeight();
                                if (offset.bottom >= e.pageY) {
                                    offset.right = offset.left + root.jqltrigger.outerWidth();
                                    if (offset.right >= e.pageX) {
                                        // reposition
                                        root.position.call(root.jqltrigger, root, x, y);
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                
                if (target && triggerAction) {
                    root.jqltrigger.one('contextmenu:hidden', function() {
                        jql(target).contextMenu({x: x, y: y});
                    });
                }

                root.jqlmenu.trigger('contextmenu:hide');
            }, 50);
        },
        // key handled :hover
        keyStop: function(e, opt) {
            if (!opt.isInput) {
                e.preventDefault();
            }
            
            e.stopPropagation();
        },
        key: function(e) {
            var opt = jqlcurrentTrigger.data('contextMenu') || {};

            switch (e.keyCode) {
                case 9:
                case 38: // up
                    handle.keyStop(e, opt);
                    // if keyCode is [38 (up)] or [9 (tab) with shift]
                    if (opt.isInput) {
                        if (e.keyCode == 9 && e.shiftKey) {
                            e.preventDefault();
                            opt.jqlselected && opt.jqlselected.find('input, textarea, select').blur();
                            opt.jqlmenu.trigger('prevcommand');
                            return;
                        } else if (e.keyCode == 38 && opt.jqlselected.find('input, textarea, select').prop('type') == 'checkbox') {
                            // checkboxes don't capture this key
                            e.preventDefault();
                            return;
                        }
                    } else if (e.keyCode != 9 || e.shiftKey) {
                        opt.jqlmenu.trigger('prevcommand');
                        return;
                    }
                    // omitting break;
                    
                // case 9: // tab - reached through omitted break;
                case 40: // down
                    handle.keyStop(e, opt);
                    if (opt.isInput) {
                        if (e.keyCode == 9) {
                            e.preventDefault();
                            opt.jqlselected && opt.jqlselected.find('input, textarea, select').blur();
                            opt.jqlmenu.trigger('nextcommand');
                            return;
                        } else if (e.keyCode == 40 && opt.jqlselected.find('input, textarea, select').prop('type') == 'checkbox') {
                            // checkboxes don't capture this key
                            e.preventDefault();
                            return;
                        }
                    } else {
                        opt.jqlmenu.trigger('nextcommand');
                        return;
                    }
                    break;
                
                case 37: // left
                    handle.keyStop(e, opt);
                    if (opt.isInput || !opt.jqlselected || !opt.jqlselected.length) {
                        break;
                    }
                
                    if (!opt.jqlselected.parent().hasClass('context-menu-root')) {
                        var jqlparent = opt.jqlselected.parent().parent();
                        opt.jqlselected.trigger('contextmenu:blur');
                        opt.jqlselected = jqlparent;
                        return;
                    }
                    break;
                    
                case 39: // right
                    handle.keyStop(e, opt);
                    if (opt.isInput || !opt.jqlselected || !opt.jqlselected.length) {
                        break;
                    }
                    
                    var itemdata = opt.jqlselected.data('contextMenu') || {};
                    if (itemdata.jqlmenu && opt.jqlselected.hasClass('context-menu-submenu')) {
                        opt.jqlselected = null;
                        itemdata.jqlselected = null;
                        itemdata.jqlmenu.trigger('nextcommand');
                        return;
                    }
                    break;
                
                case 35: // end
                case 36: // home
                    if (opt.jqlselected && opt.jqlselected.find('input, textarea, select').length) {
                        return;
                    } else {
                        (opt.jqlselected && opt.jqlselected.parent() || opt.jqlmenu)
                            .children(':not(.disabled, .not-selectable)')[e.keyCode == 36 ? 'first' : 'last']()
                            .trigger('contextmenu:focus');
                        e.preventDefault();
                        return;
                    }
                    break;
                    
                case 13: // enter
                    handle.keyStop(e, opt);
                    if (opt.isInput) {
                        if (opt.jqlselected && !opt.jqlselected.is('textarea, select')) {
                            e.preventDefault();
                            return;
                        }
                        break;
                    }
                    opt.jqlselected && opt.jqlselected.trigger('mouseup');
                    return;
                    
                case 32: // space
                case 33: // page up
                case 34: // page down
                    // prevent browser from scrolling down while menu is visible
                    handle.keyStop(e, opt);
                    return;
                    
                case 27: // esc
                    handle.keyStop(e, opt);
                    opt.jqlmenu.trigger('contextmenu:hide');
                    return;
                    
                default: // 0-9, a-z
                    var k = (String.fromCharCode(e.keyCode)).toUpperCase();
                    if (opt.accesskeys[k]) {
                        // according to the specs accesskeys must be invoked immediately
                        opt.accesskeys[k].jqlnode.trigger(opt.accesskeys[k].jqlmenu
                            ? 'contextmenu:focus'
                            : 'mouseup'
                        );
                        return;
                    }
                    break;
            }
            // pass event to selected item, 
            // stop propagation to avoid endless recursion
            e.stopPropagation();
            opt.jqlselected && opt.jqlselected.trigger(e);
        },

        // select previous possible command in menu
        prevItem: function(e) {
            e.stopPropagation();
            var opt = jql(this).data('contextMenu') || {};

            // obtain currently selected menu
            if (opt.jqlselected) {
                var jqls = opt.jqlselected;
                opt = opt.jqlselected.parent().data('contextMenu') || {};
                opt.jqlselected = jqls;
            }
            
            var jqlchildren = opt.jqlmenu.children(),
                jqlprev = !opt.jqlselected || !opt.jqlselected.prev().length ? jqlchildren.last() : opt.jqlselected.prev(),
                jqlround = jqlprev;
            
            // skip disabled
            while (jqlprev.hasClass('disabled') || jqlprev.hasClass('not-selectable')) {
                if (jqlprev.prev().length) {
                    jqlprev = jqlprev.prev();
                } else {
                    jqlprev = jqlchildren.last();
                }
                if (jqlprev.is(jqlround)) {
                    // break endless loop
                    return;
                }
            }
            
            // leave current
            if (opt.jqlselected) {
                handle.itemMouseleave.call(opt.jqlselected.get(0), e);
            }
            
            // activate next
            handle.itemMouseenter.call(jqlprev.get(0), e);
            
            // focus input
            var jqlinput = jqlprev.find('input, textarea, select');
            if (jqlinput.length) {
                jqlinput.focus();
            }
        },
        // select next possible command in menu
        nextItem: function(e) {
            e.stopPropagation();
            var opt = jql(this).data('contextMenu') || {};

            // obtain currently selected menu
            if (opt.jqlselected) {
                var jqls = opt.jqlselected;
                opt = opt.jqlselected.parent().data('contextMenu') || {};
                opt.jqlselected = jqls;
            }

            var jqlchildren = opt.jqlmenu.children(),
                jqlnext = !opt.jqlselected || !opt.jqlselected.next().length ? jqlchildren.first() : opt.jqlselected.next(),
                jqlround = jqlnext;

            // skip disabled
            while (jqlnext.hasClass('disabled') || jqlnext.hasClass('not-selectable')) {
                if (jqlnext.next().length) {
                    jqlnext = jqlnext.next();
                } else {
                    jqlnext = jqlchildren.first();
                }
                if (jqlnext.is(jqlround)) {
                    // break endless loop
                    return;
                }
            }
            
            // leave current
            if (opt.jqlselected) {
                handle.itemMouseleave.call(opt.jqlselected.get(0), e);
            }
            
            // activate next
            handle.itemMouseenter.call(jqlnext.get(0), e);
            
            // focus input
            var jqlinput = jqlnext.find('input, textarea, select');
            if (jqlinput.length) {
                jqlinput.focus();
            }
        },
        
        // flag that we're inside an input so the key handler can act accordingly
        focusInput: function(e) {
            var jqlthis = jql(this).closest('.context-menu-item'),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            root.jqlselected = opt.jqlselected = jqlthis;
            root.isInput = opt.isInput = true;
        },
        // flag that we're inside an input so the key handler can act accordingly
        blurInput: function(e) {
            var jqlthis = jql(this).closest('.context-menu-item'),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            root.isInput = opt.isInput = false;
        },
        
        // :hover on menu
        menuMouseenter: function(e) {
            var root = jql(this).data().contextMenuRoot;
            root.hovering = true;
        },
        // :hover on menu
        menuMouseleave: function(e) {
            var root = jql(this).data().contextMenuRoot;
            if (root.jqllayer && root.jqllayer.is(e.relatedTarget)) {
                root.hovering = false;
            }
        },
        
        // :hover done manually so key handling is possible
        itemMouseenter: function(e) {
            var jqlthis = jql(this),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;
            
            root.hovering = true;

            // abort if we're re-entering
            if (e && root.jqllayer && root.jqllayer.is(e.relatedTarget)) {
                e.preventDefault();
                e.stopImmediatePropagation();
            }

            // make sure only one item is selected
            (opt.jqlmenu ? opt : root).jqlmenu
                .children('.hover').trigger('contextmenu:blur');

            if (jqlthis.hasClass('disabled') || jqlthis.hasClass('not-selectable')) {
                opt.jqlselected = null;
                return;
            }
            
            jqlthis.trigger('contextmenu:focus');
        },
        // :hover done manually so key handling is possible
        itemMouseleave: function(e) {
            var jqlthis = jql(this),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            if (root !== opt && root.jqllayer && root.jqllayer.is(e.relatedTarget)) {
                root.jqlselected && root.jqlselected.trigger('contextmenu:blur');
                e.preventDefault();
                e.stopImmediatePropagation();
                root.jqlselected = opt.jqlselected = opt.jqlnode;
                return;
            }
            
            jqlthis.trigger('contextmenu:blur');
        },
        // contextMenu item click
        itemClick: function(e) {
            var jqlthis = jql(this),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot,
                key = data.contextMenuKey,
                callback;

            // abort if the key is unknown or disabled or is a menu
            if (!opt.items[key] || jqlthis.is('.disabled, .context-menu-submenu, .context-menu-separator, .not-selectable')) {
                return;
            }

            e.preventDefault();
            e.stopImmediatePropagation();

            if (jql.isFunction(root.callbacks[key]) && Object.prototype.hasOwnProperty.call(root.callbacks, key)) {
                // item-specific callback
                callback = root.callbacks[key];
            } else if (jql.isFunction(root.callback)) {
                // default callback
                callback = root.callback;                
            } else {
                // no callback, no action
                return;
            }

            // hide menu if callback doesn't stop that
            if (callback.call(root.jqltrigger, key, root) !== false) {
                root.jqlmenu.trigger('contextmenu:hide');
            } else if (root.jqlmenu.parent().length) {
                op.update.call(root.jqltrigger, root);
            }
        },
        // ignore click events on input elements
        inputClick: function(e) {
            e.stopImmediatePropagation();
        },
        
        // hide <menu>
        hideMenu: function(e, data) {
            var root = jql(this).data('contextMenuRoot');
            op.hide.call(root.jqltrigger, root, data && data.force);
        },
        // focus <command>
        focusItem: function(e) {
            e.stopPropagation();
            var jqlthis = jql(this),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            jqlthis.addClass('hover')
                .siblings('.hover').trigger('contextmenu:blur');
            
            // remember selected
            opt.jqlselected = root.jqlselected = jqlthis;
            
            // position sub-menu - do after show so dumb jql.ui.position can keep up
            if (opt.jqlnode) {
                root.positionSubmenu.call(opt.jqlnode, opt.jqlmenu);
            }
        },
        // blur <command>
        blurItem: function(e) {
            e.stopPropagation();
            var jqlthis = jql(this),
                data = jqlthis.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;
            
            jqlthis.removeClass('hover');
            opt.jqlselected = null;
        }
    },
    // operations
    op = {
        show: function(opt, x, y) {
            var jqltrigger = jql(this),
                offset,
                css = {};

            // hide any open menus
            jql('#context-menu-layer').trigger('mousedown');

            // backreference for callbacks
            opt.jqltrigger = jqltrigger;

            // show event
            if (opt.events.show.call(jqltrigger, opt) === false) {
                jqlcurrentTrigger = null;
                return;
            }

            // create or update context menu
            op.update.call(jqltrigger, opt);
            
            // position menu
            opt.position.call(jqltrigger, opt, x, y);

            // make sure we're in front
            if (opt.zIndex) {
                css.zIndex = zindex(jqltrigger) + opt.zIndex;
            }
            
            // add layer
            op.layer.call(opt.jqlmenu, opt, css.zIndex);
            
            // adjust sub-menu zIndexes
            opt.jqlmenu.find('ul').css('zIndex', css.zIndex + 1);
            
            // position and show context menu
            opt.jqlmenu.css( css )[opt.animation.show](opt.animation.duration, function() {
                jqltrigger.trigger('contextmenu:visible');
            });
            // make options available and set state
            jqltrigger
                .data('contextMenu', opt)
                .addClass("context-menu-active");
            
            // register key handler
            jql(document).off('keydown.contextMenu').on('keydown.contextMenu', handle.key);
            // register autoHide handler
            if (opt.autoHide) {
                // mouse position handler
                jql(document).on('mousemove.contextMenuAutoHide', function(e) {
                    // need to capture the offset on mousemove,
                    // since the page might've been scrolled since activation
                    var pos = jqltrigger.offset();
                    pos.right = pos.left + jqltrigger.outerWidth();
                    pos.bottom = pos.top + jqltrigger.outerHeight();
                    
                    if (opt.jqllayer && !opt.hovering && (!(e.pageX >= pos.left && e.pageX <= pos.right) || !(e.pageY >= pos.top && e.pageY <= pos.bottom))) {
                        // if mouse in menu...
                        opt.jqlmenu.trigger('contextmenu:hide');
                    }
                });
            }
        },
        hide: function(opt, force) {
            var jqltrigger = jql(this);
            if (!opt) {
                opt = jqltrigger.data('contextMenu') || {};
            }
            
            // hide event
            if (!force && opt.events && opt.events.hide.call(jqltrigger, opt) === false) {
                return;
            }
            
            // remove options and revert state
            jqltrigger
                .removeData('contextMenu')
                .removeClass("context-menu-active");
            
            if (opt.jqllayer) {
                // keep layer for a bit so the contextmenu event can be aborted properly by opera
                setTimeout((function(jqllayer) {
                    return function(){
                        jqllayer.remove();
                    };
                })(opt.jqllayer), 10);
                
                try {
                    delete opt.jqllayer;
                } catch(e) {
                    opt.jqllayer = null;
                }
            }
            
            // remove handle
            jqlcurrentTrigger = null;
            // remove selected
            opt.jqlmenu.find('.hover').trigger('contextmenu:blur');
            opt.jqlselected = null;
            // unregister key and mouse handlers
            //jql(document).off('.contextMenuAutoHide keydown.contextMenu'); // http://bugs.jquery.com/ticket/10705
            jql(document).off('.contextMenuAutoHide').off('keydown.contextMenu');
            // hide menu
            opt.jqlmenu && opt.jqlmenu[opt.animation.hide](opt.animation.duration, function (){
                // tear down dynamically built menu after animation is completed.
                if (opt.build) {
                    opt.jqlmenu.remove();
                    jql.each(opt, function(key, value) {
                        switch (key) {
                            case 'ns':
                            case 'selector':
                            case 'build':
                            case 'trigger':
                                return true;

                            default:
                                opt[key] = undefined;
                                try {
                                    delete opt[key];
                                } catch (e) {}
                                return true;
                        }
                    });
                }
                
                setTimeout(function() {
                    jqltrigger.trigger('contextmenu:hidden');
                }, 10);
            });
        },
        create: function(opt, root) {
            if (root === undefined) {
                root = opt;
            }
            // create contextMenu
            opt.jqlmenu = jql('<ul class="context-menu-list"></ul>').addClass(opt.className || "").data({
                'contextMenu': opt,
                'contextMenuRoot': root
            });
            
            jql.each(['callbacks', 'commands', 'inputs'], function(i,k){
                opt[k] = {};
                if (!root[k]) {
                    root[k] = {};
                }
            });
            
            root.accesskeys || (root.accesskeys = {});
            
            // create contextMenu items
            jql.each(opt.items, function(key, item){
                var jqlt = jql('<li class="context-menu-item"></li>').addClass(item.className || ""),
                    jqllabel = null,
                    jqlinput = null;
                
                // iOS needs to see a click-event bound to an element to actually
                // have the TouchEvents infrastructure trigger the click event
                jqlt.on('click', jql.noop);
                
                item.jqlnode = jqlt.data({
                    'contextMenu': opt,
                    'contextMenuRoot': root,
                    'contextMenuKey': key
                });
                
                // register accesskey
                // NOTE: the accesskey attribute should be applicable to any element, but Safari5 and Chrome13 still can't do that
                if (item.accesskey) {
                    var aks = splitAccesskey(item.accesskey);
                    for (var i=0, ak; ak = aks[i]; i++) {
                        if (!root.accesskeys[ak]) {
                            root.accesskeys[ak] = item;
                            item._name = item.name.replace(new RegExp('(' + ak + ')', 'i'), '<span class="context-menu-accesskey">jql1</span>');
                            break;
                        }
                    }
                }
                
                if (typeof item == "string") {
                    jqlt.addClass('context-menu-separator not-selectable');
                } else if (item.type && types[item.type]) {
                    // run custom type handler
                    types[item.type].call(jqlt, item, opt, root);
                    // register commands
                    jql.each([opt, root], function(i,k){
                        k.commands[key] = item;
                        if (jql.isFunction(item.callback)) {
                            k.callbacks[key] = item.callback;
                        }
                    });
                } else {
                    // add label for input
                    if (item.type == 'html') {
                        jqlt.addClass('context-menu-html not-selectable');
                    } else if (item.type) {
                        jqllabel = jql('<label></label>').appendTo(jqlt);
                        jql('<span></span>').html(item._name || item.name).appendTo(jqllabel);
                        jqlt.addClass('context-menu-input');
                        opt.hasTypes = true;
                        jql.each([opt, root], function(i,k){
                            k.commands[key] = item;
                            k.inputs[key] = item;
                        });
                    } else if (item.items) {
                        item.type = 'sub';
                    }
                
                    switch (item.type) {
                        case 'text':
                            jqlinput = jql('<input type="text" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .appendTo(jqllabel);
                            break;
                    
                        case 'textarea':
                            jqlinput = jql('<textarea name=""></textarea>')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .appendTo(jqllabel);

                            if (item.height) {
                                jqlinput.height(item.height);
                            }
                            break;

                        case 'checkbox':
                            jqlinput = jql('<input type="checkbox" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .prop("checked", !!item.selected)
                                .prependTo(jqllabel);
                            break;

                        case 'radio':
                            jqlinput = jql('<input type="radio" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + item.radio)
                                .val(item.value || "")
                                .prop("checked", !!item.selected)
                                .prependTo(jqllabel);
                            break;
                    
                        case 'select':
                            jqlinput = jql('<select name="">')
                                .attr('name', 'context-menu-input-' + key)
                                .appendTo(jqllabel);
                            if (item.options) {
                                jql.each(item.options, function(value, text) {
                                    jql('<option></option>').val(value).text(text).appendTo(jqlinput);
                                });
                                jqlinput.val(item.selected);
                            }
                            break;
                        
                        case 'sub':
                            // FIXME: shouldn't this .html() be a .text()?
                            jql('<span></span>').html(item._name || item.name).appendTo(jqlt);
                            item.appendTo = item.jqlnode;
                            op.create(item, root);
                            jqlt.data('contextMenu', item).addClass('context-menu-submenu');
                            item.callback = null;
                            break;
                        
                        case 'html':
                            jql(item.html).appendTo(jqlt);
                            break;
                        
                        default:
                            jql.each([opt, root], function(i,k){
                                k.commands[key] = item;
                                if (jql.isFunction(item.callback)) {
                                    k.callbacks[key] = item.callback;
                                }
                            });
                            // FIXME: shouldn't this .html() be a .text()?
                            jql('<span></span>').html(item._name || item.name || "").appendTo(jqlt);
                            break;
                    }
                    
                    // disable key listener in <input>
                    if (item.type && item.type != 'sub' && item.type != 'html') {
                        jqlinput
                            .on('focus', handle.focusInput)
                            .on('blur', handle.blurInput);
                        
                        if (item.events) {
                            jqlinput.on(item.events, opt);
                        }
                    }
                
                    // add icons
                    if (item.icon) {
                        jqlt.addClass("icon icon-" + item.icon);
                    }
                }
                
                // cache contained elements
                item.jqlinput = jqlinput;
                item.jqllabel = jqllabel;

                // attach item to menu
                jqlt.appendTo(opt.jqlmenu);
                
                // Disable text selection
                if (!opt.hasTypes && jql.support.eventSelectstart) {
                    // browsers support user-select: none, 
                    // IE has a special event for text-selection
                    // browsers supporting neither will not be preventing text-selection
                    jqlt.on('selectstart.disableTextSelect', handle.abortevent);
                }
            });
            // attach contextMenu to <body> (to bypass any possible overflow:hidden issues on parents of the trigger element)
            if (!opt.jqlnode) {
                opt.jqlmenu.css('display', 'none').addClass('context-menu-root');
            }
            opt.jqlmenu.appendTo(opt.appendTo || document.body);
        },
        resize: function(jqlmenu, nested) {
            // determine widths of submenus, as CSS won't grow them automatically
            // position:absolute within position:absolute; min-width:100; max-width:200; results in width: 100;
            // kinda sucks hard...

            // determine width of absolutely positioned element
            jqlmenu.css({position: 'absolute', display: 'block'});
            // don't apply yet, because that would break nested elements' widths
            // add a pixel to circumvent word-break issue in IE9 - #80
            jqlmenu.data('width', Math.ceil(jqlmenu.width()) + 1);
            // reset styles so they allow nested elements to grow/shrink naturally
            jqlmenu.css({
                position: 'static',
                minWidth: '0px',
                maxWidth: '100000px'
            });
            // identify width of nested menus
            jqlmenu.find('> li > ul').each(function() {
                op.resize(jql(this), true);
            });
            // reset and apply changes in the end because nested
            // elements' widths wouldn't be calculatable otherwise
            if (!nested) {
                jqlmenu.find('ul').andSelf().css({
                    position: '', 
                    display: '',
                    minWidth: '',
                    maxWidth: ''
                }).width(function() {
                    return jql(this).data('width');
                });
            }
        },
        update: function(opt, root) {
            var jqltrigger = this;
            if (root === undefined) {
                root = opt;
                op.resize(opt.jqlmenu);
            }
            // re-check disabled for each item
            opt.jqlmenu.children().each(function(){
                var jqlitem = jql(this),
                    key = jqlitem.data('contextMenuKey'),
                    item = opt.items[key],
                    disabled = (jql.isFunction(item.disabled) && item.disabled.call(jqltrigger, key, root)) || item.disabled === true;

                // dis- / enable item
                jqlitem[disabled ? 'addClass' : 'removeClass']('disabled');
                
                if (item.type) {
                    // dis- / enable input elements
                    jqlitem.find('input, select, textarea').prop('disabled', disabled);
                    
                    // update input states
                    switch (item.type) {
                        case 'text':
                        case 'textarea':
                            item.jqlinput.val(item.value || "");
                            break;
                            
                        case 'checkbox':
                        case 'radio':
                            item.jqlinput.val(item.value || "").prop('checked', !!item.selected);
                            break;
                            
                        case 'select':
                            item.jqlinput.val(item.selected || "");
                            break;
                    }
                }
                
                if (item.jqlmenu) {
                    // update sub-menu
                    op.update.call(jqltrigger, item, root);
                }
            });
        },
        layer: function(opt, zIndex) {
            // add transparent layer for click area
            // filter and background for Internet Explorer, Issue #23
            var jqllayer = opt.jqllayer = jql('<div id="context-menu-layer" style="position:fixed; z-index:' + zIndex + '; top:0; left:0; opacity: 0; filter: alpha(opacity=0); background-color: #000;"></div>')
                .css({height: jqlwin.height(), width: jqlwin.width(), display: 'block'})
                .data('contextMenuRoot', opt)
                .insertBefore(this)
                .on('contextmenu', handle.abortevent)
                .on('mousedown', handle.layerClick);
            
            // IE6 doesn't know position:fixed;
            if (!jql.support.fixedPosition) {
                jqllayer.css({
                    'position' : 'absolute',
                    'height' : jql(document).height()
                });
            }
            
            return jqllayer;
        }
    };

// split accesskey according to http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#assigned-access-key
function splitAccesskey(val) {
    var t = val.split(/\s+/),
        keys = [];
        
    for (var i=0, k; k = t[i]; i++) {
        k = k[0].toUpperCase(); // first character only
        // theoretically non-accessible characters should be ignored, but different systems, different keyboard layouts, ... screw it.
        // a map to look up already used access keys would be nice
        keys.push(k);
    }
    
    return keys;
}

// handle contextMenu triggers
jql.fn.contextMenu = function(operation) {
    if (operation === undefined) {
        this.first().trigger('contextmenu');
    } else if (operation.x && operation.y) {
        this.first().trigger(jql.Event("contextmenu", {pageX: operation.x, pageY: operation.y}));
    } else if (operation === "hide") {
        var jqlmenu = this.data('contextMenu').jqlmenu;
        jqlmenu && jqlmenu.trigger('contextmenu:hide');
    } else if (operation === "destroy") {
        jql.contextMenu("destroy", {context: this});
    } else if (jql.isPlainObject(operation)) {
        operation.context = this;
        jql.contextMenu("create", operation);
    } else if (operation) {
        this.removeClass('context-menu-disabled');
    } else if (!operation) {
        this.addClass('context-menu-disabled');
    }
    
    return this;
};

// manage contextMenu instances
jql.contextMenu = function(operation, options) {
    if (typeof operation != 'string') {
        options = operation;
        operation = 'create';
    }
    
    if (typeof options == 'string') {
        options = {selector: options};
    } else if (options === undefined) {
        options = {};
    }
    
    // merge with default options
    var o = jql.extend(true, {}, defaults, options || {});
    var jqldocument = jql(document);
    var jqlcontext = jqldocument;
    var _hasContext = false;
    
    if (!o.context || !o.context.length) {
        o.context = document;
    } else {
        // you never know what they throw at you...
        jqlcontext = jql(o.context).first();
        o.context = jqlcontext.get(0);
        _hasContext = o.context !== document;
    }
    
    switch (operation) {
        case 'create':
            // no selector no joy
            if (!o.selector) {
                throw new Error('No selector specified');
            }
            // make sure internal classes are not bound to
            if (o.selector.match(/.context-menu-(list|item|input)(jql|\s)/)) {
                throw new Error('Cannot bind to selector "' + o.selector + '" as it contains a reserved className');
            }
            if (!o.build && (!o.items || jql.isEmptyObject(o.items))) {
                throw new Error('No Items sepcified');
            }
            counter ++;
            o.ns = '.contextMenu' + counter;
            if (!_hasContext) {
                namespaces[o.selector] = o.ns;
            }
            menus[o.ns] = o;
            
            // default to right click
            if (!o.trigger) {
                o.trigger = 'right';
            }
            
            if (!initialized) {
                // make sure item click is registered first
                jqldocument
                    .on({
                        'contextmenu:hide.contextMenu': handle.hideMenu,
                        'prevcommand.contextMenu': handle.prevItem,
                        'nextcommand.contextMenu': handle.nextItem,
                        'contextmenu.contextMenu': handle.abortevent,
                        'mouseenter.contextMenu': handle.menuMouseenter,
                        'mouseleave.contextMenu': handle.menuMouseleave
                    }, '.context-menu-list')
                    .on('mouseup.contextMenu', '.context-menu-input', handle.inputClick)
                    .on({
                        'mouseup.contextMenu': handle.itemClick,
                        'contextmenu:focus.contextMenu': handle.focusItem,
                        'contextmenu:blur.contextMenu': handle.blurItem,
                        'contextmenu.contextMenu': handle.abortevent,
                        'mouseenter.contextMenu': handle.itemMouseenter,
                        'mouseleave.contextMenu': handle.itemMouseleave
                    }, '.context-menu-item');

                initialized = true;
            }
            
            // engage native contextmenu event
            jqlcontext
                .on('contextmenu' + o.ns, o.selector, o, handle.contextmenu);
            
            if (_hasContext) {
                // add remove hook, just in case
                jqlcontext.on('remove' + o.ns, function() {
                    jql(this).contextMenu("destroy");
                });
            }
            
            switch (o.trigger) {
                case 'hover':
                        jqlcontext
                            .on('mouseenter' + o.ns, o.selector, o, handle.mouseenter)
                            .on('mouseleave' + o.ns, o.selector, o, handle.mouseleave);                    
                    break;
                    
                case 'left':
                        jqlcontext.on('click' + o.ns, o.selector, o, handle.click);
                    break;
                /*
                default:
                    // http://www.quirksmode.org/dom/events/contextmenu.html
                    jqldocument
                        .on('mousedown' + o.ns, o.selector, o, handle.mousedown)
                        .on('mouseup' + o.ns, o.selector, o, handle.mouseup);
                    break;
                */
            }
            
            // create menu
            if (!o.build) {
                op.create(o);
            }
            break;
        
        case 'destroy':
            var jqlvisibleMenu;
            if (_hasContext) {
                // get proper options 
                var context = o.context;
                jql.each(menus, function(ns, o) {
                    if (o.context !== context) {
                        return true;
                    }
                    
                    jqlvisibleMenu = jql('.context-menu-list').filter(':visible');
                    if (jqlvisibleMenu.length && jqlvisibleMenu.data().contextMenuRoot.jqltrigger.is(jql(o.context).find(o.selector))) {
                        jqlvisibleMenu.trigger('contextmenu:hide', {force: true});
                    }

                    try {
                        if (menus[o.ns].jqlmenu) {
                            menus[o.ns].jqlmenu.remove();
                        }

                        delete menus[o.ns];
                    } catch(e) {
                        menus[o.ns] = null;
                    }

                    jql(o.context).off(o.ns);
                    
                    return true;
                });
            } else if (!o.selector) {
                jqldocument.off('.contextMenu .contextMenuAutoHide');
                jql.each(menus, function(ns, o) {
                    jql(o.context).off(o.ns);
                });
                
                namespaces = {};
                menus = {};
                counter = 0;
                initialized = false;
                
                jql('#context-menu-layer, .context-menu-list').remove();
            } else if (namespaces[o.selector]) {
                jqlvisibleMenu = jql('.context-menu-list').filter(':visible');
                if (jqlvisibleMenu.length && jqlvisibleMenu.data().contextMenuRoot.jqltrigger.is(o.selector)) {
                    jqlvisibleMenu.trigger('contextmenu:hide', {force: true});
                }
                
                try {
                    if (menus[namespaces[o.selector]].jqlmenu) {
                        menus[namespaces[o.selector]].jqlmenu.remove();
                    }
                    
                    delete menus[namespaces[o.selector]];
                } catch(e) {
                    menus[namespaces[o.selector]] = null;
                }
                
                jqldocument.off(namespaces[o.selector]);
            }
            break;
        
        case 'html5':
            // if <command> or <menuitem> are not handled by the browser,
            // or options was a bool true,
            // initialize jql.contextMenu for them
            if ((!jql.support.htmlCommand && !jql.support.htmlMenuitem) || (typeof options == "boolean" && options)) {
                jql('menu[type="context"]').each(function() {
                    if (this.id) {
                        jql.contextMenu({
                            selector: '[contextmenu=' + this.id +']',
                            items: jql.contextMenu.fromMenu(this)
                        });
                    }
                }).css('display', 'none');
            }
            break;
        
        default:
            throw new Error('Unknown operation "' + operation + '"');
    }
    
    return this;
};

// import values into <input> commands
jql.contextMenu.setInputValues = function(opt, data) {
    if (data === undefined) {
        data = {};
    }
    
    jql.each(opt.inputs, function(key, item) {
        switch (item.type) {
            case 'text':
            case 'textarea':
                item.value = data[key] || "";
                break;

            case 'checkbox':
                item.selected = data[key] ? true : false;
                break;
                
            case 'radio':
                item.selected = (data[item.radio] || "") == item.value ? true : false;
                break;
            
            case 'select':
                item.selected = data[key] || "";
                break;
        }
    });
};

// export values from <input> commands
jql.contextMenu.getInputValues = function(opt, data) {
    if (data === undefined) {
        data = {};
    }
    
    jql.each(opt.inputs, function(key, item) {
        switch (item.type) {
            case 'text':
            case 'textarea':
            case 'select':
                data[key] = item.jqlinput.val();
                break;

            case 'checkbox':
                data[key] = item.jqlinput.prop('checked');
                break;
                
            case 'radio':
                if (item.jqlinput.prop('checked')) {
                    data[item.radio] = item.value;
                }
                break;
        }
    });
    
    return data;
};

// find <label for="xyz">
function inputLabel(node) {
    return (node.id && jql('label[for="'+ node.id +'"]').val()) || node.name;
}

// convert <menu> to items object
function menuChildren(items, jqlchildren, counter) {
    if (!counter) {
        counter = 0;
    }
    
    jqlchildren.each(function() {
        var jqlnode = jql(this),
            node = this,
            nodeName = this.nodeName.toLowerCase(),
            label,
            item;
        
        // extract <label><input>
        if (nodeName == 'label' && jqlnode.find('input, textarea, select').length) {
            label = jqlnode.text();
            jqlnode = jqlnode.children().first();
            node = jqlnode.get(0);
            nodeName = node.nodeName.toLowerCase();
        }
        
        /*
         * <menu> accepts flow-content as children. that means <embed>, <canvas> and such are valid menu items.
         * Not being the sadistic kind, jql.contextMenu only accepts:
         * <command>, <menuitem>, <hr>, <span>, <p> <input [text, radio, checkbox]>, <textarea>, <select> and of course <menu>.
         * Everything else will be imported as an html node, which is not interfaced with contextMenu.
         */
        
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#concept-command
        switch (nodeName) {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#the-menu-element
            case 'menu':
                item = {name: jqlnode.attr('label'), items: {}};
                counter = menuChildren(item.items, jqlnode.children(), counter);
                break;
            
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-a-element-to-define-a-command
            case 'a':
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-button-element-to-define-a-command
            case 'button':
                item = {
                    name: jqlnode.text(),
                    disabled: !!jqlnode.attr('disabled'),
                    callback: (function(){ return function(){ jqlnode.click(); }; })()
                };
                break;
            
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-command-element-to-define-a-command

            case 'menuitem':
            case 'command':
                switch (jqlnode.attr('type')) {
                    case undefined:
                    case 'command':
                    case 'menuitem':
                        item = {
                            name: jqlnode.attr('label'),
                            disabled: !!jqlnode.attr('disabled'),
                            callback: (function(){ return function(){ jqlnode.click(); }; })()
                        };
                        break;
                        
                    case 'checkbox':
                        item = {
                            type: 'checkbox',
                            disabled: !!jqlnode.attr('disabled'),
                            name: jqlnode.attr('label'),
                            selected: !!jqlnode.attr('checked')
                        };
                        break;
                        
                    case 'radio':
                        item = {
                            type: 'radio',
                            disabled: !!jqlnode.attr('disabled'),
                            name: jqlnode.attr('label'),
                            radio: jqlnode.attr('radiogroup'),
                            value: jqlnode.attr('id'),
                            selected: !!jqlnode.attr('checked')
                        };
                        break;
                        
                    default:
                        item = undefined;
                }
                break;
 
            case 'hr':
                item = '-------';
                break;
                
            case 'input':
                switch (jqlnode.attr('type')) {
                    case 'text':
                        item = {
                            type: 'text',
                            name: label || inputLabel(node),
                            disabled: !!jqlnode.attr('disabled'),
                            value: jqlnode.val()
                        };
                        break;
                        
                    case 'checkbox':
                        item = {
                            type: 'checkbox',
                            name: label || inputLabel(node),
                            disabled: !!jqlnode.attr('disabled'),
                            selected: !!jqlnode.attr('checked')
                        };
                        break;
                        
                    case 'radio':
                        item = {
                            type: 'radio',
                            name: label || inputLabel(node),
                            disabled: !!jqlnode.attr('disabled'),
                            radio: !!jqlnode.attr('name'),
                            value: jqlnode.val(),
                            selected: !!jqlnode.attr('checked')
                        };
                        break;
                    
                    default:
                        item = undefined;
                        break;
                }
                break;
                
            case 'select':
                item = {
                    type: 'select',
                    name: label || inputLabel(node),
                    disabled: !!jqlnode.attr('disabled'),
                    selected: jqlnode.val(),
                    options: {}
                };
                jqlnode.children().each(function(){
                    item.options[this.value] = jql(this).text();
                });
                break;
                
            case 'textarea':
                item = {
                    type: 'textarea',
                    name: label || inputLabel(node),
                    disabled: !!jqlnode.attr('disabled'),
                    value: jqlnode.val()
                };
                break;
            
            case 'label':
                break;
            
            default:
                item = {type: 'html', html: jqlnode.clone(true)};
                break;
        }
        
        if (item) {
            counter++;
            items['key' + counter] = item;
        }
    });
    
    return counter;
}

// convert html5 menu
jql.contextMenu.fromMenu = function(element) {
    var jqlthis = jql(element),
        items = {};
        
    menuChildren(items, jqlthis.children());
    
    return items;
};

// make defaults accessible
jql.contextMenu.defaults = defaults;
jql.contextMenu.types = types;
// export internal functions - undocumented, for hacking only!
jql.contextMenu.handle = handle;
jql.contextMenu.op = op;
jql.contextMenu.menus = menus;

})(jQuery);

#################################################################### jquery.ui.position.js ######################
/*!
 * jQuery UI Position v1.10.0
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
			overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowX ? $.position.scrollbarWidth() : 0,
			height: hasOverflowY ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] );
		return {
			element: withinElement,
			isWindow: isWindow,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: isWindow ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !$.support.offsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}( jQuery ) );

########################################################## xml #################################################
#####################################################3 templates.xml ###########################################

<?xml version="1.0" encoding="UTF-8"?>
<templates>

	<form t-name="HomePageTemplate">
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery.js"></script>
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery.dataTables.js"></script>
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery-alert.js"></script>
			
		<script type="text/javascript" language="javascript"
			src="/hr_recruitment_htc/static/src/js/jquery.contextMenu.js"></script>
		
		<script type="text/javascript" language="javascript"
			src="/hr_recruitment_htc/static/src/js/jquery.ui.position.js"></script>
			
		<link rel="stylesheet" href="/hr_recruitment_htc/static/src/css/jquery.contextMenu.css" />


		<div class="workspace_container">

			<div class="panel panel-primary">
				<div class="panel-heading">
					<h3 class="panel-title">Job Requisitions </h3>
				</div>
				<div class="panel-body">
					<table id="job_requistions" class="display" cellspacing="0"
						width="100%">
						<div>
						<thead>
								<div class = 'status_selection'>
								   <label for="status">Filter:</label>
									<select class="status">
										<option t-att-value="0">Open Job Requisitions</option>

										<option t-att-value="1">Closed Job Requisitions</option>
										<option t-att-value="2">All Job Requisitions</option>
									</select>
									<span>
									<span class="underline_class" >
									 <img t-attf-src="/hr_recruitment_htc/static/src/images/add2.png"/>
									 <a class="todo_action" href="#">Create New</a>
									 </span>
									<!-- <span class="underline_class" >
									 <img t-attf-src="/hr_recruitment_htc/static/src/images/add2.png"/>
                                     <a class="todo_action" href="#">Reports</a>
                                    </span>
									<span class="underline_class">
									<img t-attf-src="/hr_recruitment_htc/static/src/images/add2.png"/>
									<a class="todo_action"  href="#">Offer Approvals</a>
									</span> -->
									</span>
								</div>
								
							<th> Job Title</th>
							<th> Requisition Number </th>
							<th> Hiring Manager</th>
							<th> Primary Recruiter</th>
							<th> Candidates</th>
							<th> Progress</th>
							<th> Job Status</th>
							<th># Positions</th>
							<th> Age</th>
							<th> Job Postings</th>


						</thead>
						</div>
						<tbody>
							<t t-foreach="data" t-as="todo">
								<tr>

									<td id="contextMenu" t-att-data-job_id="todo.id">

										<!-- <a class="tooltip_action" data-toggle="tooltip" data-placement="right" 
											data-container="body" data-content="Some content in Popover on right" title="Tooltip 
											on right"> -->
										<u>
											<a class="candidate_pipeline" t-att-data-job_id="todo.id" href="#">
												<t t-esc="todo.internal_title" />
											</a>
										</u>
										<!-- </a> -->
									</td>
									<!-- <td class="todo_action" data-toggle="hover" data-placement="right" 
										data-container="body" data-content="Some content in Popover on right" title="Tooltip 
										on right"> -->
									<td class="todo_action" t-att-data-id="todo.id">
										<u>
											<a class="todo_action" href="#">
												<t t-esc="todo.requisition_number" />
											</a>
										</u>
									</td>

									<td>
										<t t-esc="todo.hiring_manager" />
									</td>
									<td>
										<t t-esc="todo.primary_recruiter" />
									</td>
									<td>
										<t t-esc="todo.candidates" />
									</td>
									<td>
										<t t-esc="todo.progress" />
									</td>
									<td>
										<t t-esc="todo.status" />
										<!-- <img t-attf-src="../images/sort_desc.png"/> -->
									</td>
									<td style="text-align:right;padding-right:10px;">
										<t t-esc="todo.openings" />
									</td>
									<td>
										<t t-esc="todo.age" />
									</td>
									<td>
										<t t-esc="todo.job_Posting" />
									</td>
								</tr>
							</t>
						</tbody>
					</table>
					<script>
						var jq = jQuery.noConflict();
						jq(document).ready(function()
						{
						jq('#job_requistions').dataTable( { "order": [[ 2, "asc" ]] } );
						});
						
						jq.contextMenu({
					    selector: '#job_requistions tbody tr', 
					    callback: function(key, options) {
					    	//alert(this.attr('id'));
					    	//alert(this.attr('class'));
					    	<!-- if(key=='Edit Job')
					    		openInNewTab('http://www.google.co.in');
					    	else if(key=='Add Candidate')
					    		openInNewTab('https://eportal.htcindia.com');
					    	else if(key=='Candidate Summary')
					    		openInNewTab('http://www.w3schools.com');	 -->
					    },
					    items: {
					        "Edit Job": {name: "Edit job requisition", icon: "edit",className:"edit_job"},
					        "Add Candidate": {name: "Add a new candidate", icon: "add"},
					        "Candidate Summary": {name: "Candidate summary", icon: "copy"}
					        /*"paste": {name: "Paste", icon: "paste"},
					        "delete": {name: "Delete", icon: "delete"},
					        "sep1": "---------",
					        "quit": {name: "Quit", icon: "quit"}*/
					    }
					});	

					</script>
				</div>
			</div>
		</div>
	</form>
	<form t-name="JobPostingTemplate">
		<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery.js"></script>
		<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery.dataTables.js"></script>
		<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery-ui.js"></script>
		<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery-alert.js"></script>
		<script type="text/javascript" language="javascript" src="/hr_recruitment_htc/static/src/js/job_posting.js"></script>
		<script type="text/javascript" language="javascript" src="/web/static/src/js/validations.js"></script>
		<div id="alertDiv" style="display:none;"></div>
		
	<div class="workspace_container"  style="padding:3px;">
		<div class="panel panel-primary" style="padding:3px;">
			<div class="panel-heading" >
				<h3 class="panel-title">Job Posting</h3>
			</div>
			<div class="panel-body">
			     <input type="hidden" id="selectedrows"  />
			     <input type="hidden" id="job_type" t-att-value="job_type" />
				<table id="job_posting" class="display" cellspacing="0" width="100%">

					<thead>
						<select class="status" id = "job_type_filter" >
							<option value="-">Please Select</option>
							<option value="not_posted">Not Posted</option>
							<option value="internal">Posted Internal</option>
							<option value="external">Posted External</option>
							<option value="internal_external">Posted Internal/External</option>
						</select>
						<span>
							<span class="underline_class" id="internal_span">
							 	<img t-attf-src="/hr_recruitment_htc/static/src/images/job_posting.png"/>
							 	<a class="todo_post_job" href="#" id="postinternal">Post Internal</a>
							 </span>
							<span class="underline_class" id="external_span">
							 	<img t-attf-src="/hr_recruitment_htc/static/src/images/post.png"/>
                                <a class="todo_post_job" href="#" id="postexternal">Post External</a>
                            </span>
							<span class="underline_class" id="int_ext_span">
								<img t-attf-src="/hr_recruitment_htc/static/src/images/post1.png"/>
								<a class="todo_post_job"  href="#" id="postboth">Post Internal/External</a>
							</span>
						</span>
						<th> Select </th>
						<th> Requisition Number </th>
						<th> Job Title</th>
						<th> Hiring Manager</th>
						<th> Primary Recruiter</th>
						<th> Job Status</th>
						<th> Openings</th>
						
					</thead>
					<tbody>
						<t t-foreach="data" t-as="todo">
							<tr t-att-id="todo.id">
							 <td>
								 <input type="checkbox" t-att-id="todo.id"  name="select" class="datatablecheckbox"/>
								</td>
								<td class="todo_action" t-att-data-id="todo.id">
									<u>
										<a class="todo_action" href="#">
											<t t-esc="todo.requisition_number" />
										</a>
									</u>
								</td>
								<td>
								<t t-esc="todo.internal_title" />
								</td>
								<td>
									<t t-esc="todo.hiring_manager" />
								</td>
								<td>
									<t t-esc="todo.primary_recruiter" />
								</td>
								<td>
									<t t-esc="todo.status" />
								</td>
								<td style="text-align:right;padding-right:10px;">
									<t t-esc="todo.openings" />
								</td>
								
							</tr>
						</t>
					</tbody>
				</table>
			</div>
		</div>	
		 
		</div>
	</form>
	
	<form t-name="JobPostingPopupTemplate">
	<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery.js"></script>
	<script type="text/javascript" language="javascript" src="/web/static/src/js/jquery-ui.js"></script>
	 <script>
			var jq = jQuery.noConflict();
			jq(document).ready(function() {
			      jq('#start_date_internal').datepicker({
						dateFormat:'mm/dd/yy',
						 changeMonth: true,
						 changeYear:true,
						 showOn:"both",
						 buttonImage: "/hr_recruitment_htc/static/src/images/calendar.gif",
						 buttonImageOnly: true,
						 buttonText: "Start Date",
						 yearRange: '-100:+50'
					});
					
					jq('#end_date_internal').datepicker({
						dateFormat:'mm/dd/yy',
						 changeMonth: true,
						 changeYear:true,
						 showOn:"both",
						 buttonImage: "/hr_recruitment_htc/static/src/images/calendar.gif",
						 buttonImageOnly: true,
						 buttonText: "End Date",
						 yearRange: '-100:+50'
					});
					
					jq('#start_date_external').datepicker({
						dateFormat:'mm/dd/yy',
						 changeMonth: true,
						 changeYear:true,
						 showOn:"both",
						 buttonImage: "/hr_recruitment_htc/static/src/images/calendar.gif",
						 buttonImageOnly: true,
						 buttonText: "Start Date",
						 yearRange: '-100:+50'
					});
					
					jq('#end_date_external').datepicker({
						dateFormat:'mm/dd/yy',
						 changeMonth: true,
						 changeYear:true,
						 showOn:"both",
						 buttonImage: "/hr_recruitment_htc/static/src/images/calendar.gif",
						 buttonImageOnly: true,
						 buttonText: "End Date",
						 yearRange: '-100:+50'
					});

			});
			 
			 
		</script>
	  <div class="workspace_container"  style="padding:3px;">
		<div class="panel panel-primary" style="padding:3px;">
			<div class="panel-heading" >
				<h3 class="panel-title">Job Posting</h3>
			</div>
			<div class="panel-body">
			     <input type="hidden" id="selectedrows"  t-att-value="data['posting_ids']"/>
			     <table class="display dataTable no-footer" cellspacing="0"  >
				 <thead>
				  <tr>
				    <th class="sorting_disabled"> Posting Type</th>
				    <th class="sorting_disabled"> Start Date </th>
					<th class="sorting_disabled"> End Date </th>
					<th class="sorting_disabled"> Action </th>
				  </tr>
				  </thead>
				    
				  <tbody>
				   <t t-if="data['posting_type'] == 'postinternal' or data['posting_type'] == 'postboth' ">
				   <tr class="odd">
				    <td>  Internal </td>
				     <td> <input type = "text" id = "start_date_internal"  name = "start_date_internal"/> </td>
					 <td> <input type = "text" id = "end_date_internal"  name = "end_date_internal" /> </td>
					 <td> <input type = "button" id = "post_internal"  name = "post_internal" value="  Post  " class="postinternal"/>  </td>
				   </tr>
				   </t>
				   <t t-if="data['posting_type'] == 'postexternal' or data['posting_type'] == 'postboth' ">
				  <tr class="even">
				     <td>  External </td>
				     <td> <input type = "text" id = "start_date_external" name = "start_date_external" /> </td>
					 <td> <input type = "text" id = "end_date_external" name = "end_date_external" /> </td>
					 <td> <input type = "button" id = "post_external"  name = "post_external" value="  Post  " class="postexternal"/> </td>
				   </tr>
				    </t>
				   </tbody>
				 </table>
				 
			</div>
		</div>	
		 
		</div>
	</form>
	<t t-name="tooltip">
		<html>
			<head>
			</head>
			<body>
				<h1>Welcome tooltip</h1>
			</body>
		</html>
	</t>
	<form t-name="InterviewFeedbackTemplate">
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery.js"></script>
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery.dataTables.js"></script>
		<script type="text/javascript" language="javascript"
			src="/web/static/src/js/jquery-alert.js"></script>


		<div class="workspace_container">

			<div class="panel panel-primary">
				<div class="panel-heading">
					<h3 class="panel-title">Interview Feedback </h3>
				</div>
				<div class="panel-body">
					<table id="job_requistions" class="display" cellspacing="0"
						width="100%">
						<div>
						<thead>
							<th> Job Title</th>
							<th> Requisition Number </th>
							<th> Hiring Manager</th>
							<th> Job Status</th>
						</thead>
						</div>
						<tbody>
							<t t-foreach="data" t-as="todo">
								<tr>
									<td id="contextMenu" >
										<u>
											<a class="candidate_interview_feedback" t-att-data-job_id="todo.id" href="#">
												<t t-esc="todo.internal_title" />
											</a>
										</u>
									</td>
									<td class="todo_action" t-att-data-id="todo.id">
										<u>
											<a class="todo_action" href="#">
												<t t-esc="todo.requisition_number" />
											</a>
										</u>
									</td>
									<td>
										<t t-esc="todo.hiring_manager" />
									</td>
									<td>
										<t t-esc="todo.status" />
									</td>
								</tr>
							</t>
						</tbody>
					</table>
					<script>
						var jq = jQuery.noConflict();
						jq(document).ready(function()
						{
						jq('#job_requistions').dataTable( { "order": [[ 2, "asc" ]] } );
						});

					</script>
				</div>
			</div>
		</div>
	</form>
	<t t-name="candidate_interview_feedback">
	
			<div class="candidate_pipeline_view"  style="padding:3px;">
				<div class="panel panel-primary" style="padding:3px;">
					<div class="panel-heading" >
						<h3 class="panel-title">Candidate Interview Feedback</h3>
					</div>
					<div class="panel-body">
					     
					     <table id="interview_feedback_tbl" class="display" cellspacing="0" width="100%">
	
						<thead>
						    <th width="25%">Competency \\ Candidate</th>
							<t t-foreach="candidates" t-as="candidate">
								  <th>
									<t t-esc="candidate.candidate_name" />
								  </th>
							</t>
							
						</thead>
						<tbody>
						    <t t-foreach="competencies" t-as="competency">
							<tr>
								
								  <td>
									<t t-esc="competency.name" />
								  </td>
								  <t t-foreach="candidates" t-as="candidate">
								  <td nowrap="nowrap">
								  		<select class="ratting_list" t-att-data-com_id="competency.id" t-att-data-cat_id="candidate.id" >
											<option value="-">Rating</option>
											<option value="1">1</option>
											<option value="2">2</option>
											<option value="3">3</option>
											<option value="4">4</option>
											<option value="5">5</option>
										</select>
										<img class="competency_comments" t-att-data-competency_id="competency.id" style="cursor:pointer" t-attf-src="/hr_recruitment_htc/static/src/images/comment.png"/>
								  </td>
								  </t>
							</tr>
							</t>
							<tr>
								<td>
									Summary
								  </td>
								  <t t-foreach="candidates" t-as="candidate">
								  <td>
								  		
								  </td>
								  </t>
							</tr>
							<tr>
								<td>
								  </td>
								  <t t-foreach="candidates" t-as="candidate">
								  <td>
								  		<input type = "button" value="Notes" id = "interview_notes_btn"  class = "interview_notes_btn"/>
								  </td>
								  </t>
							</tr>
							<tr>
								<td>Overall Rating
								  </td>
								  <t t-foreach="candidates" t-as="candidate">
								  <td>
								  		
								  </td>
								  </t>
							</tr>
							<tr>
								<td>
								  </td>
								  <t t-foreach="candidates" t-as="candidate">
								  <td>
								        <span id="thumbs_up_plain" >
								  		<img class="thumbs_up_plain" style="cursor:pointer" t-attf-src="/hr_recruitment_htc/static/src/images/thumbs_up_plain.png"/>
								  		</span>
								  		<span id="thumbs_up" style="display:none" >
								  		<img class="thumbs_up" style="cursor:pointer" t-attf-src="/hr_recruitment_htc/static/src/images/thumbs_up.png"/>
								  		</span>
								  		<span id="thumbs_down_plain" >
								  		<img class="thumbs_down_plain" style="cursor:pointer" t-attf-src="/hr_recruitment_htc/static/src/images/thumbs_down_plain.png"/>
								  		</span>
								  		<span id="thumbs_down" style="display:none" >
								  		<img class="thumbs_down" style="cursor:pointer" t-attf-src="/hr_recruitment_htc/static/src/images/thumbs_down.png"/>
								  		</span>
								  		<img style="cursor:pointer" class = "interview_notes_btn" t-attf-src="/hr_recruitment_htc/static/src/images/comment.png"/>
								  </td>
								  </t>
							</tr>
						</tbody>
					</table>
					<script>
						var jq = jQuery.noConflict();
						jq(document).ready(function()
						{
						jq('#interview_feedback_tbl').dataTable( {    "bInfo": false,
																      "bPaginate": false,
																      "bFilter": false,
																      "ordering": false,
																      "aoColumnDefs": [ 
																          { 'bSortable': false, 'aTargets': [ "_all" ] }
																       ]
																		 } );
						});

					</script>
				</div>
			</div>	
		 
		</div>
	</t>
	<t t-name="candidate_pipeline">
	
		<div class="workspace_container" style="width:34%;overflow: hidden;overflow-y: auto;">
				<div class="panel panel-primary" >
					<div class="panel-heading" >
						<h3 class="panel-title">Candidate Pipeline</h3>
					</div>
					<div class="panel-body" >
					
						<div id="stages" >
						<table border="1">
							<tbody>
							<tr>
								<td nowrap="nowrap">
					   			<div>
					   					<table style="float:left;">
					   						<tr>
								 				<t t-foreach="candidate_stages" t-as="stage" >
								 			 		<t t-if="stage.status_group == 'Forwarded Statuses'">
									 			
								 			 			<td t-att-data-stage_id="stage.id" class="stage_count" >
											 				 <t t-esc="stage.name"/><br></br>
											 			 	 <t t-esc="stage.count" />
										 				</td>
									 				 </t>
									 		 	</t>
									 		 </tr>
									 	</table>
								</div>
								</td>
								<td nowrap="nowrap">
								<div >
										<table style="float:left;margin-left:10px;">
					   						<tr>
								 				<t t-foreach="candidate_stages" t-as="stage" >
								 			 		<t t-if="stage.status_group == 'System Statuses'">
											 			<td t-att-data-stage_id="stage.id" class="stage_count" >
											 				 <t t-esc="stage.name"/><br></br>
											 			 	 <t t-esc="stage.count" />
											 			</td>
											 		 </t>
									 		 	</t>
									 		 </tr>
									 	</table>
							     </div>
							     </td>
							     <td nowrap="nowrap">
							     <div >
										<table style="float:left;margin-left:10px;">
					   						<tr>
								 				<t t-foreach="candidate_stages" t-as="stage" >
								 			 		<t t-if="stage.status_group == 'In-Progress'">
											 			<td t-att-data-stage_id="stage.id" class="stage_count" >
											 				 <t t-esc="stage.name"/><br></br>
											 			 	 <t t-esc="stage.count" />
											 			</td>
											 		 </t>
									 		 	</t>
									 		 </tr>
									 	</table>
							     </div>
							     </td>
							     <td nowrap="nowrap">
							      <div >
										<table style="float:left;margin-left:10px;">
					   						<tr>
								 				<t t-foreach="candidate_stages" t-as="stage" >
								 			 		<t t-if="stage.status_group == 'Withdrawn Statuses'">
											 			<td t-att-data-stage_id="stage.id" class="stage_count" >
											 				 <t t-esc="stage.name"/><br></br>
											 			 	 <t t-esc="stage.count" />
											 			</td>
											 		 </t>
									 		 	</t>
									 		 </tr>
									 	</table>
							     </div>
							     </td>
							     <td nowrap="nowrap">
							     <div >
										<table style="float:left;margin-left:10px;">
					   						<tr>
								 				<t t-foreach="candidate_stages" t-as="stage" >
								 			 		<t t-if="stage.status_group == 'Disqualification Statuses'">
											 			<td t-att-data-stage_id="stage.id" class="stage_count" >
											 				 <t t-esc="stage.name"/><br></br>
											 			 	 <t t-esc="stage.count" />
											 			</td>
											 		 </t>
									 		 	</t>
									 		 </tr>
									 	</table>
							     </div>
							  </td>
							
							</tr>
							</tbody>
						</table> 
						<br></br>  
					 	</div>
						 
					</div>
				</div>	
				<table>
				 	<tr>
				 		<td style="padding-left:15px;" class="job_title">Job Title </td>
				 		<td class="view_job_details" t-att-data-job_detail_id="job_detail.job_id" > <t t-esc="job_detail.title" /></td>
				 	</tr>
				 </table>
			</div>
			
			<div class="candidate_pipeline_view job_details" style="width:34%;margin-top:12px;">
				<div class="panel panel-primary" >
					<div class="panel-heading" >
						<h3 class="panel-title">Candidate Details</h3>
					</div>
					<div class="panel-body">
					    <table id="pipeline" class="display" cellspacing="0" width="100%">
						<thead>
							<th> Candidate Name </th>
							<th> Application Detail </th>
							<th> Candidate Profile</th>
							<th> Status</th>
							<th> Stage</th>
						</thead>
						<tbody>
							<t t-foreach="candidates" t-as="candidate">
								<tr>
								  <td>
									<t t-esc="candidate.candidate_name" />
								  </td>
									<td >
										<u>
											<a  href="#">
												View Application Detail
											</a>
										</u>
									</td>
									<td>
										<u>
											<a t-att-data-candidate_id="candidate.candidate_id" class="view_candidate_profile" href="#">
												View Profile
											</a>
										</u>
									</td>
									<td>
										<t t-esc="candidate.status" />
									</td>
									<td>
										<t t-esc="candidate.stage" />
									</td>
								</tr>
							</t>
						</tbody>
					</table>
				<script>
	               var jq = jQuery.noConflict();
	               jq(document).ready(function() {
				    jq('#pipeline').dataTable();
				    
					} );
	    		</script>
				</div>
			</div>	
		</div>
	</t>
</templates>

###################################################################################  view #########################################################
############################################################## recruitment_htc_view.xml ##########################################################

<?xml version="1.0" encoding="UTF-8"?>
<openerp>
    <data>
         <template id="assets_backend" name="home_dashboard" inherit_id="web.assets_backend">
            <xpath expr="." position="inside">
                 <link rel="stylesheet" type="text/css" href="/hr_recruitment_htc/static/src/css/customized_homepage.css"/>
                 <link rel="stylesheet" type="text/css" href="/web/static/src/css/jquery.dataTables.css"/>
                 <link rel="stylesheet" type="text/css" href="/web/static/src/css/jquery-alert.css"/>
                <script type="text/javascript" src="/hr_recruitment_htc/static/src/js/home_page.js"></script>
            </xpath>
        </template>
        <menuitem name="Recruitment" id="recruitment_menu_root" sequence="110"/>
        <menuitem name="Home" id="job_requisition_home"  parent="recruitment_menu_root" sequence="1"/>
        <menuitem name="Job Requisitions" id="job_requisition_menu"  parent="recruitment_menu_root" sequence="2"/>
	    <menuitem name="Candidate" id="candidate_profile_menu"  parent="recruitment_menu_root" sequence="2"/>
        <menuitem name="Candidates" id="candidate_menu"  parent="recruitment_menu_root" sequence="2"/>
        <menuitem name="Interview" id="interview_menu"  parent="recruitment_menu_root" sequence="3"/>
        <menuitem name="Approval" id="recruitment_approval_menu"  parent="recruitment_menu_root" sequence="4"/>
        <menuitem name="Reports" id="recruitment_reports_menu"  parent="recruitment_menu_root" sequence="5"/>
        
        <menuitem action="hr_admin_htc.approval_action" id="menu_approval"
			parent="recruitment_approval_menu" sequence="1" string="Approval"  />
        
        <record id="seq_type_request_number" model="ir.sequence.type">
			<field name="name">hr.recruitment.job</field>
			<field name="code">hr.recruitment.job</field>
		</record>
		<record id="seq_request_number" model="ir.sequence">
			<field name="name">hr.recruitment.job</field>
			<field name="code">hr.recruitment.job</field>
			<field name="prefix">JOB_REQ/%(year)s/</field>
			<field name="padding">4</field>
			<field name="requisition_number" eval="False" />
	    </record>
	<record id="seq_type_candidate_request_number" model="ir.sequence.type">
			<field name="name">hr.recruitment.candidate</field>
			<field name="code">hr.recruitment.candidate</field>
		</record>
	    <record id="seq_candidate_request_number" model="ir.sequence">
			<field name="name">hr.recruitment.candidate</field>
			<field name="code">hr.recruitment.candidate</field>
			<field name="prefix">ID_</field>
			<field name="padding">4</field>
			<field name="candidate_id" eval="False" />
	    </record>
        <record model="ir.ui.view" id="candidate_creation_form">
		<field name="name">Create Candidate</field>
	        <field name="model">hr.recruitment.candidate</field>
	        <field name="type">form</field>
	        <field name="arch" type="xml">
		    
		<form string="Candidate Profile">
		        	
			<sheet>
				    <div class="oe_title">
                           <h1>
                                <field name="name" readonly = "1"/>
				<field name ="candidate_id" readonly ="1"/>
				<field name ="is_application_created" invisible ="1"/>
                           </h1>
                    </div>
				    <group col = "4" colspan = "2">
					<field name= "first_name" />
					<field name= "last_name"/>
					<field name= "email"/>
					<field name ="mobile"/>
					<field name ="candidate_type"/>	
<!--
					<field name ="gender"/>				
-->
					<field name ="profile_created" invisible ="1"/>
				    </group>
				    <group col = "4" colspan = "2">
					<field name = "resume" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}" filename="resume_filename"/>
					<field name ="cover_letter" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}" filename="cover_letter_fielname"/>
					<field name ="resume_filename" invisible ="1" />
					<field name ="cover_letter_fielname" invisible ="1" />
				    </group>
				    
			    <button name="create_candidate_profile" string="Create Profile" type="object" class="oe_highlight" attrs="{'invisible':[('profile_created', '=',True)]}"/>
			    
			    <notebook attrs="{'invisible':[('profile_created', '!=',True)]}">
				<page string ="General Information">
				    <group col = "4" colspan ="2" string = "Contact Information">
					<field name ="address_line1" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="address_line2" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="country" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="state" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="city" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="zipcode" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
					<field name ="alternate_phone" style="width:80%%" attrs="{'invisible':[('profile_created', '!=',True)]}"/>	
					
				    </group>
				    
				    
				    
				    <group string ="Geographic Mobility" col ="4" colspan ="2">
					<field name ="relocate" style="width:80%%"/>
					<field name ="location" style="width:80%%"/>
					</group>
					
					<group>
					<field name ="resume_content" invisible ="1"/>
				    
					
					<field name ="comments" style="width:100%%"/>
				    </group>
				    <group string ="Travel Interest" col ="4" colspan ="2">
					<field name ="travel_interest" style="width:40%%"  />
					<field name ="travel_expectation" style="width:40%%" attrs="{'invisible':[('travel_interest', '!=','Yes')]}"/>
				    </group>
				  
				</page>
				<page string ="Employment History">		   
					<field name="previous_employer" >
					    <tree string="Previous Employers" >
						    <field name="title" />
						    <field name="company_name" />
						    <field name="business_type" />
						    <field name="start_date" />
						    <field name="end_date" />
					    </tree>
				    </field>
				</page>
				<page string ="Education">				    
				    <field name ="education_details" >
					<tree string = "Education" editable ="bottom">
					    <field name="school" />
					    <field name="major" />
					    <field name="degree" />
					    <field name="graduation_date" />
					</tree>
				    </field>
				</page>
				<page string ="Professional Certifications" >				
				    <field name ="certification">
					<tree string ="certification">
					    <field name="certification" />
					    <field name="description" />
					    <field name="institution" />
					    <field name="effective_date" />
					    <field name ="expiration_date"/>
					</tree>
				    </field>
				    </page>
				<page string ="Language">					
				    <field name ="language_known">
					<tree string ="Language" editable ="bottom">
					    <field name="language_known" />
					    <field name="speaking_proficiency" />
					    <field name="reading_proficiency" />
					    <field name="writing_proficiency" />
					</tree>
				    </field>
				    </page>
			    
				
			    </notebook>
			    <div align="right">  
			    	<button name ="next" align="right" string ="Next" type = "object" attrs="{'invisible':[('profile_created', '!=',True)]}"/>
	        	</div>
	        	</sheet>
	        </form>
		</field>	     
	</record>
	<record model="ir.ui.view" id="candidate_tree">
	        <field name="name">Create Candidate</field>
	        <field name="model">hr.recruitment.candidate</field>
	        <field name="type">tree</field>
	        <field name="arch" type="xml">
				<tree string="Candidate">
					<field name ="first_name"/>
					<field name= "last_name"/>
					<field name= "email"/>
					<field name ="mobile"/>

					<field name ="country"/>
			    </tree>	        		        	
			</field>
		</record>
	  <record model="ir.actions.act_window" id="action_create_candidate">
            <field name="name">Create Candidate</field>
            <field name="res_model">hr.recruitment.candidate</field>
            <field name="view_mode">tree,form</field>
	    <field name="view_id" ref="candidate_tree"/>
	    <field name="domain">[('profile_created','=',True)]</field>
        </record>
     <record model="ir.actions.act_window.view" id="action_tree_view_candidate_create">
	    <field name="act_window_id" ref="action_create_candidate"/>
	    <field name="sequence" eval="1"/>
	    <field name="view_mode">tree</field>
	    <field name="view_id" ref="candidate_tree"/>
	</record>

	<record model="ir.actions.act_window.view" id="action_form_view_candidate_create">
	    <field name="act_window_id" ref="action_create_candidate"/>
	    <field name="sequence" eval="2"/>
	    <field name="view_mode">form</field>
	    <field name="view_id" ref="candidate_creation_form"/>
	
        </record>
        <menuitem name="Create a new Candidate" id="menu_create_candidate" parent="candidate_profile_menu"
            sequence="2" action="action_create_candidate"/>
            
     <record model="ir.ui.view" id="interview_feedback_form">
			<field name="name">Interview Feedback</field>
			<field name="model">hr.candidate.interview.feedback</field>
			<field name="type">form</field>
			<field name="arch" type="xml">    
				<form >
					    <group >
							<field name="notes_summary" />
					    </group>
				</form>
			</field>
	</record>
		
	<record model="ir.ui.view" id="competency_rating_form">
			<field name="name">Competency Rating</field>
			<field name="model">hr.candidate.competency.rating</field>
			<field name="type">form</field>
			<field name="arch" type="xml">    
				<form >
					    <group >
							<field name="competency_id" readonly="1" />
							<field name="rating"  readonly="1" />
							<field name="comments" />
					    </group>
					    <div class="oe_right" name="buttons" groups="base.group_user">
					    	<button name="done" string="Done" type="object" class="oe_highlight" groups="base.group_user"/>
	                        <button name="cancel" string="Cancel" type="object" class="oe_highlight" groups="base.group_user"/>
	                    </div>
				</form>
			</field>
	</record>	
            
      <record model="ir.ui.view" id="candidate_interview_form">
		<field name="name">Candidate Interview</field>
	        <field name="model">hr.candidate.interview</field>
	        <field name="type">form</field>
	        <field name="arch" type="xml">
		<form string="Candidate Interview">
                    <group>
                    	<field name= "job_id" invisible="1" />
						<field name= "candidate_pipeline_id" invisible="1" />
						<field name= "candidate_id" invisible="1" />
						<field name= "candidate_type" invisible="1" />
                    </group>
				    <group col = "4" colspan = "2">
				    	<field name ="remarks" />
						<field name ="attach_resume" />
				    </group>
				    <div class="oe_right" name="buttons" groups="base.group_user">
				    	<button name="save" string="Save" type="object" class="oe_highlight" groups="base.group_user"/>
                        <button name="create_meeting" string="Create Meeting" type="object" class="oe_highlight" groups="base.group_user"/>
                    </div>
			    <notebook>
				<page string ="Interviewers">
					<field name="candidate_interviewers" >
					    <tree string="Interviewers" editable="bottom" >
						    <field name="interviewer_user_id" options="{'create': false, 'create_edit': false,'no_open': True}" />
						    <field name="interview_date" />
						    <field name="interview_hour" />
						    <field name="interview_minute" />
						    <field name="interview_period" />
						    <field name="duration" />
						    <field name="notes" />
					    </tree>
				    </field>
				</page>
				</notebook>
	        </form>
		</field>	     
	</record>
      
      <record model="ir.ui.view" id="candidate_pipeline_form">
		<field name="name">Candidate Pipeline</field>
	        <field name="model">hr.candidate.pipeline</field>
	        <field name="type">form</field>
	        <field name="arch" type="xml">
		<form string="Candidate Pipeline">
			<sheet>
				    <group col = "4" colspan = "2">
					<field name= "job_id" options="{'create': false, 'create_edit': false,'no_open': True}" />
					<field name= "candidate_id" options="{'create': false, 'create_edit': false,'no_open': True}" />
					<field name= "candidate_type"/>
					<field name ="stage" options="{'create': false, 'create_edit': false,'no_open': True}" />
					<field name ="status"/>
					<field name ="remarks"/>
				    </group>
			    <button name="setup_candidate_interview" string="Set up Interview" type="object" class="oe_highlight" />
			    <notebook>
				<page string ="History">
					<field name="candidate_pipeline_history" >
					    <tree string="History" editable="bottom" >
						    <field name="user_id" readonly="1" />
						    <field name="date" readonly="1" />
						    <field name="stage" readonly="1" />
						    <field name="status" readonly="1" />
						    <field name="remarks" readonly="1" />
					    </tree>
				    </field>
				</page>
				</notebook>
	        	</sheet>
	        </form>
		</field>	     
	</record>
           
       <record model="ir.ui.view" id="candidate_pipeline_tree">
	        <field name="name">Candidate Pipeline</field>
	        <field name="model">hr.candidate.pipeline</field>
	        <field name="type">tree</field>
	        <field name="arch" type="xml">
				<tree string="Candidate Pipeline">
					<field name= "job_id"  />
					<field name= "candidate_id"/>
					<field name= "candidate_type"/>
					<field name ="stage"/>
					<field name ="status"/>
			    </tree>	        		        	
			</field>
		</record>
	  <record model="ir.actions.act_window" id="action_candidate_pipeline">
            <field name="name">Candidate Pipeline</field>
            <field name="res_model">hr.candidate.pipeline</field>
            <field name="view_mode">form,tree</field>
	    	<field name="view_id" ref="candidate_pipeline_tree"/>
        </record>
            
        <menuitem name="Candidate Pipeline" id="menu_candidate_pipeline" parent="candidate_profile_menu"
            sequence="3" action="action_candidate_pipeline"/>
	    
	   
	######################### Education###################
	<record model="ir.ui.view" id="education_form">
			<field name="name">Previous Employer Form Form</field>
			<field name="model">hr.recruitment.candidate.education</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="Education">
					
				<sheet>
					    <group string = "Education" col = "4" colspan = "2">
						 <field name="school" />
						    <field name="major" />
						    <field name="degree" />
						    <field name="graduation_date" />
						   
						    </group>
					</sheet>
					</form>
					</field>
		</record>
	########################Previous Employer############
	<record model="ir.ui.view" id="previous_employer_form">
			<field name="name">Previous Employer</field>
			<field name="model">hr.recruitment.candidate.employer</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="Employment History">
					
				<sheet>
					    <group string = "Previous Employer" col = "4" colspan = "2">
						    <field name="title" />
						    <field name="company_name" />
						    <field name="start_date" />
						    <field name="end_date" />
						    <field name="business_type" />
						    </group>
					</sheet>
					</form>
					</field>
		</record>
		  
	###############################  certificate##############
	<record model="ir.ui.view" id="certificate_form">
			<field name="name">certifications</field>
			<field name="model">hr.recruitment.candidate.certifications</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="certifications">
					
				<sheet>
					    <group string = "Certifications" col = "4" colspan = "2">
						 
						    <field name="certification" />    
						    <field name="institution" />
						    <field name="effective_date" />
						    <field name ="expiration_date"/>
						    </group>
					    <group>
							<field name="description" />
					    </group>
					</sheet>
					</form>
					</field>
		</record>
		
	#################### Language
	<record model="ir.ui.view" id="language_form">
			<field name="name">Language</field>
			<field name="model">hr.recruitment.candidate.language</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="Language">
					
				<sheet>
					    <group string = "Language" col = "4" colspan = "2">
						 
						    <field name="language_known" />
						    <field name="speaking_proficiency" />
						    <field name="reading_proficiency" />
						    <field name="writing_proficiency" />
						    
						    </group>
					</sheet>
					</form>
					</field>
		</record>
		
		<record model="ir.ui.view" id="Attachment">
			<field name="name">Attachment</field>
			<field name="model">hr.recruitment.candidate.documents</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="Language">
					
				<sheet>
				    <div class="oe_right oe_button_box">
					    <button name="act_attachment" type="object" string="Save"  class= "oe_button oe_form_button oe_highlight"/>
					    <button special="cancel"  type="object" class= "oe_button oe_form_button oe_highlight" string="Discard" name="cancel_offer"/>                   
				    </div>
					    <group string = "Attachments" col = "4" colspan = "2">
						 
						    <field name="document_name" />
						    <field name="document_attach" />
						    
						    </group>
					</sheet>
					</form>
					</field>
		</record>
		
		
		
	<record model="ir.ui.view" id="candidate_application_form">
		<field name="name">Create Candidate</field>
	        <field name="model">hr.candidate.pipeline.application</field>
	        <field name="type">form</field>
	        <field name="arch" type="xml">
		    
		<form string="Candidate Screen">
			<sheet>
			    <div class="oe_title">
			       <h1>
				    <field name ="name" readonly ="1"/>
				    <field name ="candidate_id" invisible ="1"/>
			       </h1>
			    </div>
			    <group  string = "Personal Information">
				<field name= "first_name" style="width:30%%"/>
				<field name= "middle_name" style="width:30%%"/>
				<field name= "last_name" style="width:30%%"/>
				<field name ="suffix" style="width:30%%"/>
				<field name ="preferred_name" style="width:30%%"/>
				<field name ="mobile" style="width:30%%"/>
				<field name ="alternate_phone" style="width:30%%"/>
				<field name ="email" style="width:30%%"/>
				<field name ="address_line1" style="width:30%%"/>
				<field name ="address_line2" style="width:30%%"/>
				<field name ="city" style="width:30%%"/>
				<field name ="zipcode" style="width:30%%"/>
				<field name ="state" style="width:30%%"/>
			    </group>
			    <group  string ="Resume" style="width:30%%">
				<field name ="resume" style="width:30%%" filename ="resume_filename"/>
				<field name ="cover_letter" style="width:30%%" filename ="cover_letter_fielname"/>
				<field name ="resume_filename" invisible ="1" />
				<field name ="cover_letter_fielname" invisible ="1" />
				
			    </group>
				
			    <group>
				<field name ="current_position_period" style="width:30%%"/>
				<field name ="current_position_manager" style="width:30%%"/>
				
			    </group>
			    <group string = "Statement Of Agreement">
				<field name = "signature" style="width:30%%"/>
			    </group>
			    <group string ="Questions">
				<field name ="age_code" style="width:50%%"/>
				<field name ="citizenship" style="width:50%%"/>
				<field name ="is_convicted" style="width:50%%"/>
				
			    </group>
				    
	        	</sheet>
	        </form>
		</field>	     
	</record>
	<record model="ir.actions.act_window" id="action_candidate_application">
            <field name="name">Candidate Application</field>
            <field name="res_model">hr.candidate.pipeline.application</field>
            <field name="view_mode">form</field>
	    	<field name="view_id" ref="candidate_application_form"/>
        </record>
	<!-- <menuitem name="Candidate Application" id="menu_candidate_application" parent="candidate_profile_menu"
            sequence="4" action="action_candidate_application"/> -->
	    
	<record model="ir.ui.view" id="Audit Trial">
			<field name="name">Audit Trial</field>
			<field name="model">hr.candidate.audit.trial</field>
			<field name="type">form</field>
			<field name="arch" type="xml">
			    
			<form string="Audit Trial">
					
				<sheet>
					    <group string = "Audit Trial" col = "4" colspan = "2">						 
							<field name ="audit_trial_date"/>
							<field name ="application_used"/>
							<field name ="candidate_status_audit"/>						    
						    </group>
					</sheet>
					</form>
					</field>
		</record>
        <record model="ir.ui.view" id="create_job_requistion_form">
	        <field name="name">Create Job</field>
	        <field name="model">hr.recruitment.job</field>
	        <field name="type">form</field>
	        <field name="arch" type="xml">
	        
	        	<form string="Competency" >
		        	<header>			
						<button name="submit" attrs="{'invisible': ['|',('display_sheet','=','SHEET_1'),('state','!=','draft')]}" string="Submit" type="object"  confirm="Please Confirm, do you want to Procced?"/>
						<field name="state" widget="statusbar" statusbar_visible="draft,submit,approved,refused" readonly="1" />
					</header>
					<sheet attrs="{'invisible': [('display_sheet','=','SHEET_2')]}">
						<group col="4" colspan="2">
		        			<field name="family_id" options="{'create': false, 'create_edit': false,'no_open': True}"/>
		        			<field name="role_id" domain="[('family_id','=',family_id)]" options="{'create': false, 'create_edit': false,'no_open': True}"/>
		        			<field name="job_id"  domain="[('id','=',-1)]" options="{'create': false, 'create_edit': false,'no_open': True}"/>
		        		</group>
		        		<group>
		        			<div  align="center">
		        				<button name="create_job_requistion" string="Next" type="object" class="oe_button" />
		        			</div>
		        		</group>
	        		</sheet>
					<sheet attrs="{'invisible': [('display_sheet','=','SHEET_1')]}">
						<group col="4" colspan="2">
		        			<field name="requisition_number"/>
		        			<field name="status" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="hiring_manager" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        	<field name="primary_recruiter" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')],'invisible':[('state','!=','approved')]}" />
		        		</group>
		        		<group >
		        			<field name="internal_title" style="width:70%%" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="internal_description" widget="html" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="external_title" style="width:70%%" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="external_description"  widget="html" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="currency_id" invisible="1" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="state" invisible="1" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="display_sheet" invisible="1" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
		        			<field name="approval_status" invisible="1" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
						</group>
						<notebook>
							<page string="Job Details">
								<group col="4" colspan="2">
				        			<field name="employment_category" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="department" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="geographic_location" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="location_description" domain="[('location_id','=',geographic_location)]" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="no_of_openings" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
								</group>
							</page>
							<page string="Competency Details">
									<field name="competency_details" attrs="{'readonly':[('state', '!=', 'draft')]}">
										<tree string="Competency Details"  editable="bottom" >
											<field name="competency_id" options="{'create': false, 'create_edit': false,'no_open': True}"  attrs="{'readonly':[('is_editable','=',False)]}" />
											<field name="library_id" domain="[('id','=',library_id)]" options="{'create': false, 'create_edit': false,'no_open': True}"  attrs="{'readonly':[('is_editable','=',False)]}"/>
											<field name="category_id" domain="[('id','=',category_id)]" options="{'create': false, 'create_edit': false,'no_open': True}"  attrs="{'readonly':[('is_editable','=',False)]}"/>
											<field name="expected_rating" />
											<field name="weight" />
											<field name="is_editable" invisible="1"/>
										</tree>
									</field>
								</page>
								<page string="Questions">
									<field name="questions_details" attrs="{'readonly':[('state', '!=', 'draft')]}">
										<tree string="Question Details" editable="bottom">
											<field name="question_library_id" />
											<field name="question_id"  options="{'create': false, 'create_edit': false,'no_open': True}" domain="[('question_id','=',question_library_id)]"/>
											<field name="is_required" />
											<field name="is_disqualifier" />
											<field name="is_score" />
											<field name="weight" />
										</tree>
									</field>
								</page>
							
							<page string="Additional Info">
								<group col="4" colspan="2">
									<field name="job_code" readonly="1"/>
									<field name="budget_compensation" widget="monetary" options="{'currency_field': 'currency_id'}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
									<field name="caretech_offer_min" readonly="1" widget="monetary" options="{'currency_field': 'currency_id'}"/>
				        			<field name="offer_min" widget="monetary" options="{'currency_field': 'currency_id'}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="caretech_offer_mid" readonly="1" widget="monetary" options="{'currency_field': 'currency_id'}"/>
				        			<field name="offer_max" widget="monetary" options="{'currency_field': 'currency_id'}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="caretech_offer_max" readonly="1" widget="monetary" options="{'currency_field': 'currency_id'}"/>
				        			<field name="travel" options="{'create': false, 'create_edit': false,'no_open': True}" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="add_or_replace" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="replacement_for" attrs="{'invisible': [('add_or_replace','!=','replace')],'readonly':[('state', '!=', 'draft')]}"/>
				        			<field name="hiring_mgr_remarks" style="width:270%%" attrs="{'readonly':[('state', '!=', 'draft')]}"/>
								</group>					
							</page>
							<page string="Workflow" attrs="{'invisible': [('state', '=', 'draft'),('approval_status','!=','Info Required')]}">
								<field name="workflow_history_id">
									<tree string="Workflow" version="7.0" editable="bottom" create="false" delete="false" >
										<field name="process_type_id" readonly="1"/>
										<field name="group_id" readonly="1"/>
										<field name="user_id" readonly="1"/>
										<field name="date" readonly="1" />
										<field name="state" readonly="1" />
										<field name="remarks" readonly="1" />
									</tree>
								</field>
							</page>
						</notebook>
	        	</sheet>
	        </form>	        		        	
			</field>
		</record>
		
		<record model="ir.ui.view" id="job_posting_form">
			<field name="name">Job posting</field>
			<field name="model">hr.job.postings</field>
			<field name="type">form</field>
			<field name="arch" type="xml">    
				<form >
					<sheet>
					    <group   col = "4" colspan = "2">
							<field name="posting_start_date" />
							<field name="posting_end_date" />
					    </group>
					    <group col = "3" >
					    	<button name="post_internal_job"   string="Internal" type="object" class="oe_highlight"  confirm="Please Confirm, do you want to Procced?"/>
					    	<button name="post_external_job"   string="External" type="object" class="oe_highlight"  confirm="Please Confirm, do you want to Procced?"/>
					    	<button name="post_internal_external_job"   string="Internal/External" type="object" class="oe_highlight"  confirm="Please Confirm, do you want to Procced?"/>
					    </group>
					</sheet>
				</form>
			</field>
		</record>
		
		<record model="ir.ui.view" id="job_requistion_tree">
	        <field name="name">Job Requisitions</field>
	        <field name="model">hr.recruitment.job</field>
	        <field name="type">tree</field>
	        <field name="arch" type="xml">
				<tree string="Job Requistion">
			    	<field name="requisition_number" />
			    	<field name="family_id" />
			    	<field name="role_id" />
			    	<field name="job_id" />
			    	<field name="employment_category" />
			    	<field name="hiring_manager" />
			    	<field name="state" />
			    </tree>	        		        	
			</field>
		</record>
		
		<record model="ir.ui.view" id="competency_tree">
	        <field name="name">Create Job</field>
	        <field name="model">hr.adm.competency</field>
	        <field name="type">tree</field>
	        <field name="arch" type="xml">
				<tree string="Job Requistion">
			    	<field name="name" string="Competency"/>
			    	<field name="competency_id" string="Library"/>
			    	<field name="category" string="Category"/>
			    </tree>	        		        	
			</field>
		</record>
	    <record model="ir.actions.act_window" id="action_create_job_requistion">
            <field name="name">Create Job</field>
            <field name="res_model">hr.recruitment.job</field>
            <field name="view_type">form</field>
			<field name="view_mode">tree,form</field>
        </record>
        
 
        
        <menuitem name="Create a new Job Requisition" id="menu_create_job" parent="job_requisition_menu"
            sequence="2" action="action_create_job_requistion"/> 
        <!--Job Requisition Home Page Starts-->

        <record model="ir.actions.client" id="action_job_requisition_home">
            <field name="name">Home</field>
            <field name="tag">home_page</field>
        </record>

        <menuitem action="action_job_requisition_home" name="Home"
                sequence="1"  id="menu_job_requisition_home" parent="job_requisition_home"/>
       <!--Job Requisition Home Page Ends -->
       <!--Interview Feedback Screen Starts-->

        <record model="ir.actions.client" id="action_interview_feedback">
            <field name="name">Interview Feedback</field>
            <field name="tag">interview_feedback</field>
        </record>

        <menuitem action="action_interview_feedback" name="Interview Feedback"
                sequence="1"  id="menu_interview_feedback" parent="interview_menu"/>
       <!--Interview Feedback Screen Ends -->
       
       <record model="ir.actions.client" id="action_job_posting_home">
            <field name="name">Job Postings</field>
            <field name="tag">job_posting</field>
        </record>

       <record model="ir.actions.client" id="action_job_posting_popup">
            <field name="name">Job Postings</field>
            <field name="tag">job_posting_popup</field>
        </record>
       
        <menuitem action="action_job_posting_home" name="Job Postings"
                sequence="3"  id="menu_job_posting_home" parent="job_requisition_menu"/>
         
         
         <!-- JOb reqisitions  Recruiter Allocation-->
       <record id="job_recruiter_allocation_search" model="ir.ui.view">
			<field name="name">Recruiter Allocations</field>
			<field name="model">hr.recruiter.allocation</field>
			<field name="arch" type="xml">
				<search string="Recruiter Allocations">
				    <field name="job_id"  />
					<field name="job_title" />
					<field name="hiring_manager" />
					<field name="recruiter_id" />
					<separator />
					<group expand="0" string="Group By...">
						<filter string="Job Requisition Number" domain="[]"
							context="{'group_by':'job_id'}" help="Job Requisition Number" />
						<filter string="Job Title" domain="[]"
							context="{'group_by':'job_title'}" help="Job Requisition Title" />
						<filter string="Hiring Manager" domain="[]"
							context="{'group_by':'hiring_manager'}" help="Hiring Manager" />
						<filter string="Recruiter" domain="[]"
							context="{'group_by':'recruiter_id'}" help="Recruiter" />
					</group>
				</search>
			</field>
		</record>
       <record model="ir.ui.view" id="job_recruiter_allocation_tree">
	        <field name="name">Recruiter Allocations</field>
	        <field name="model">hr.recruiter.allocation</field>
	        <field name="type">tree</field>
	        <field name="arch" type="xml">
				<tree string="Recruiter Allocation" editable="bottom">
			    	<field name="job_id" />
			    	<field name="job_title" />
			    	<field name="hiring_manager" />
			    	<field name="positions" />
			    	<field name="recruiter_id" />
			    </tree>	        		        	
			</field>
		</record>
		 <record model="ir.actions.act_window" id="action_fetch_recruiter_allocation">
            <field name="name">Recruiter Allocation</field>
            <field name="res_model">hr.recruiter.allocation</field>
			<field name="view_mode">tree</field>
        </record>
		 <menuitem action="action_fetch_recruiter_allocation" 
                sequence="2"  id="menu_job_recruiter_allocation" parent="job_requisition_menu"/>
       <!-- JOb reqisitions  Recruiter Allocation-->     
       
       
        <!--  attach candidate to a job -->
        <record id="view_candidate_search_form" model="ir.ui.view">
        <field name="name">Attach Candidate</field>
        <field name="model">hr.candidate.search</field>
        <field name="arch" type="xml">
        <form string="Attach Candidate" create="false">
            <sheet>
                  <group col="4" colspan="2">
                        
                        <field name="candidate_name"/>
                        <field name="email" />
                        <field name="mobile" />
                        <field name="candidate_type" />
                        <field name="hr_recruitment_job_id"  options="{'create': false, 'create_edit': false,'no_open': True}" />
                        
                  </group>
                  <group col="4" colspan="2">
                        <div align="center">
	                        
	                        <button name="search_candidate" class="oe_button" string="Search" type="object" />
  	                        <button name="clear_candidate_search" string="Clear" type="object" />
                        </div>
                  </group>
                    
                  	<field name = "candidate_line_id" string="Candidate Information">
                          <tree editable="bottom" create="false" delete="false"  >
                            <field name="name" readonly="1"/>
                            <field name="candidate_type" readonly="1"/>
                            <field name="designation" string="Designation" readonly="1"/>
                            <field name="email" readonly="1"/>
                            <field name="mobile" readonly="1"/>
                            <button string="Attach Candidate" icon="terp-personal+" name="attach_candidate" type="object"/>
                         </tree>                         
				   </field>        			  
                  
            </sheet>
        </form>
        </field>
    </record>
    
            
    <record id="action_candidate_attach" model="ir.actions.act_window">
        <field name="name">Attach Candidate</field>
        <field name="res_model">hr.candidate.search</field>
        <field name="view_type">form</field>
        <field name="target">inline</field>
        <field name="view_id" ref="view_candidate_search_form"/>
    </record>
    
    <menuitem   action="action_candidate_attach"
                id="candidate_pipeline" 
                parent="candidate_profile_menu"
                sequence="2"/>
       <!--  attach candidate to a job -->
              
    </data>
</openerp>


####################################################################### 
